(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{430:function(t,a,s){t.exports=s.p+"assets/img/pc2board.2dec384b.png"},499:function(t,a,s){"use strict";s.r(a);var r=s(12),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#现象"}},[t._v("现象")])]),r("li",[r("a",{attrs:{href:"#问题分析"}},[t._v("问题分析")])]),r("li",[r("a",{attrs:{href:"#wireshark-具体实现"}},[t._v("Wireshark 具体实现")])]),r("li",[r("a",{attrs:{href:"#附录"}},[t._v("附录")]),r("ul",[r("li",[r("a",{attrs:{href:"#解析-pcnpag-文件"}},[t._v("解析 pcnpag 文件")])])])])])]),r("p"),t._v(" "),r("h1",{attrs:{id:"wireshark-是怎么抓包的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#wireshark-是怎么抓包的"}},[t._v("#")]),t._v(" Wireshark 是怎么抓包的？")]),t._v(" "),r("h2",{attrs:{id:"现象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#现象"}},[t._v("#")]),t._v(" 现象")]),t._v(" "),r("p",[t._v("之前在测试 "),r("a",{attrs:{href:"https://www.gitlink.org.cn/xuos/xiuos",target:"_blank",rel:"noopener noreferrer"}},[t._v("XiUOS"),r("OutboundLink")],1),t._v(" 网络框架的时候，将开发板和 PC 直连，在开发板架起 TCP 服务端，PC 上开了 Wireshark，截了一张图")]),t._v(" "),r("p",[r("img",{attrs:{src:s(430),alt:""}})]),t._v(" "),r("p",[t._v("可以看到 Wireshark 抓到了一个长度为 "),r("code",[t._v("13194")]),t._v(" 的一个帧，远超了 TCP PDU 最大长度。顿时感觉很奇怪，看了一下自己的网卡设置，也没有开启巨型帧，为什么会看到这么大的一个帧呢？")]),t._v(" "),r("h2",{attrs:{id:"问题分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题分析"}},[t._v("#")]),t._v(" 问题分析")]),t._v(" "),r("p",[t._v("基于一则类似的 "),r("a",{attrs:{href:"https://osqa-ask.wireshark.org/questions/24699/tcp-packet-length-was-much-greater-than-mtu/",target:"_blank",rel:"noopener noreferrer"}},[t._v("讨论"),r("OutboundLink")],1)]),t._v(" "),r("blockquote",[r("p",[t._v("这是因为系统启用了 TCP Large Segment Offload（缩写为 TSO 或 LSO）。操作系统将大于 MTU 的数据包传递给网络适配器，而网络适配器驱动程序负责分解这些数据包，以匹配 MTU。TSO 是一种增强性能的可选特性，可以将其关闭，在这种情况下，操作系统将不再生成过大的帧。")])]),t._v(" "),r("p",[t._v("也就是说，这是因为抓包时抓到的是系统提供给网卡的巨型帧，在网卡层面才会进行分拆处理。")]),t._v(" "),r("h2",{attrs:{id:"wireshark-具体实现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#wireshark-具体实现"}},[t._v("#")]),t._v(" Wireshark 具体实现")]),t._v(" "),r("p",[t._v("基于另一则关于 Wireshark 是如何抓包的 "),r("a",{attrs:{href:"https://osqa-ask.wireshark.org/questions/22956/where-exactly-wireshark-does-captures-packets/",target:"_blank",rel:"noopener noreferrer"}},[t._v("讨论"),r("OutboundLink")],1),t._v("。")]),t._v(" "),r("p",[t._v("通常这种抓包的框架都是作用于在网卡驱动和内核高层的协议栈（如 TCP/IP）之间的。Wireshark 在 Linux 下使用的是 libpcap，相关 slides 见 "),r("a",{attrs:{href:"https://sharkfestus.wireshark.org/sharkfest.11/presentations/McCanne-Sharkfest'11_Keynote_Address.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("libpcap: An Architecture and Optimization Methodology for Packet Capture"),r("OutboundLink")],1),t._v("。之前学习 eBPF 的时候了解到 tcpdump 是基于 BPF 的。事实上，tcpdump 也是基于 libpcap 开发的，libpcap 是单独抽离出的一个库，封装了 BPF 相关调用。")]),t._v(" "),r("p",[t._v("Windows 版本是基于 WinPcap 开发的，WinPcap 的 "),r("a",{attrs:{href:"https://www.winpcap.org/misc/faq.htm#Q-26",target:"_blank",rel:"noopener noreferrer"}},[t._v("QA"),r("OutboundLink")],1),t._v(" 里也谈到了具体的实现：")]),t._v(" "),r("blockquote",[r("p",[t._v("问：WinPcap如何与Windows网络连接？它是否会降低TCP/IP堆栈和应用程序的速度？\n答：在Windows内核中，WinPcap作为协议驱动程序运行。它与 TCP/IP 处于同一层级。和 TCP/IP 协议栈一样，它从底层网卡驱动程序接收数据包，但只有在基于 WinPcap 的工具正在捕获数据包时才会进行接收。这意味着，当安装了 WinPcap 但未进行捕获时，对系统的影响不存在。注意，开机后第一个网络流量捕获应用程序监听适配器时，WinPcap 驱动程序才会被加载到内核中。当 WinPcap 运行时，它不会直接与 TCP/IP 进行交互。然而，尤其是在高网络负载下，WinPcap 活动（尤其是软件中断级别的活动）将影响 TCP/IP 响应。")])]),t._v(" "),r("p",[t._v("WinPcap 的设计和实现可以见论文 "),r("a",{attrs:{href:"https://www.winpcap.org/docs/iscc01-wpcap.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("An Architecture for High Performance Network Analysis"),r("OutboundLink")],1),t._v("（开坑有空详细读一下）。")]),t._v(" "),r("h2",{attrs:{id:"附录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[t._v("#")]),t._v(" 附录")]),t._v(" "),r("h3",{attrs:{id:"解析-pcnpag-文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解析-pcnpag-文件"}},[t._v("#")]),t._v(" 解析 "),r("code",[t._v("pcnpag")]),t._v(" 文件")]),t._v(" "),r("p",[t._v("使用 Python 解析 "),r("code",[t._v("pcnpag")]),t._v(" 文件、进行数据分析时参考的资料")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("IETF 对 pcapng 的规范："),r("a",{attrs:{href:"https://www.ietf.org/staging/draft-tuexen-opsawg-pcapng-02.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("PCAP Next Generation (pcapng) Capture File Format"),r("OutboundLink")],1)])]),t._v(" "),r("li",[r("p",[t._v("Python 解析 pcapng 文件："),r("a",{attrs:{href:"https://github.com/rshk/python-pcapng",target:"_blank",rel:"noopener noreferrer"}},[t._v("rshk/python-pcapng: Pure-Python library to parse the pcap-ng format used by newer versions of dumpcap & similar tools"),r("OutboundLink")],1)])])]),t._v(" "),r("h4",{attrs:{id:"例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),r("p",[t._v("下面是在实验中写的一段加载 "),r("code",[t._v("pcnpag")]),t._v(" 文件并计算吞吐量、包数的 Python 脚本。这里默认该文件中记录的是已经在 Wireshark 里经过过滤后导出的特定分组，所以直接对整个文件进行了计算")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pcapng "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" FileScanner\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" pcapng"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("blocks "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" InterfaceStatistics"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EnhancedPacket\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pcapng"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("structs "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" ps\n\nSECOND "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e6")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 一秒钟")]),t._v("\nUNIT "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e6")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 单位时间，大于一秒钟，计算吞吐量的窗口")]),t._v("\nUNIT_NUM "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UNIT"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("SECOND\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    curr "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    packet "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    throughput "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filename"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rb"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" f"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        scanner "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" FileScanner"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__iter__"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        section_header "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scanner"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        interface_description "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("scanner"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        interface_statistics "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" block "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" scanner"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("block"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" EnhancedPacket "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" block"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("packet_len"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                packet "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                volume "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" block"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("packet_len\n                timestamp "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("block"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timestamp_high"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("block"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timestamp_low\n                curr_temp "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timestamp"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("SECOND"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" curr "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" curr_temp"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    throughput"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" block"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("packet_len\n                "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    throughput"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("block"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("packet_len"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    curr "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr_temp\n            "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# InterfaceStatistics")]),t._v("\n                interface_statistics "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" block\n    throughput "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("t"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("UNIT_NUM"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" t "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" throughput"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get kbps")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" throughput"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" packet\n")])])]),t._v(" "),r("Comment",{attrs:{lang:"zh-CN"}})],1)}),[],!1,null,null,null);a.default=n.exports}}]);