(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{487:function(t,s,a){"use strict";a.r(s);var n=a(12),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#为什么使用-libbpf-bootstrp"}},[t._v("为什么使用 libbpf-bootstrp？")])]),a("li",[a("a",{attrs:{href:"#背景"}},[t._v("背景")])]),a("li",[a("a",{attrs:{href:"#libbpf-bootstrap-概览"}},[t._v("Libbpf-bootstrap 概览")])]),a("li",[a("a",{attrs:{href:"#minimal-app"}},[t._v("Minimal app")]),a("ul",[a("li",[a("a",{attrs:{href:"#the-bpf-side"}},[t._v("The BPF side")])]),a("li",[a("a",{attrs:{href:"#the-user-space-side"}},[t._v("The user-space side")])])])]),a("li",[a("a",{attrs:{href:"#makefile"}},[t._v("Makefile")])]),a("li",[a("a",{attrs:{href:"#bootstrap-app"}},[t._v("Bootstrap app")]),a("ul",[a("li",[a("a",{attrs:{href:"#includes-vmlinux-h-libbpf-and-app-headers"}},[t._v("Includes: vmlinux.h, libbpf and app headers")])]),a("li",[a("a",{attrs:{href:"#bpf-maps"}},[t._v("BPF maps")])]),a("li",[a("a",{attrs:{href:"#bpf-ring-buffer"}},[t._v("BPF ring buffer")])]),a("li",[a("a",{attrs:{href:"#bpf-co-re"}},[t._v("BPF CO-RE")])])])]),a("li",[a("a",{attrs:{href:"#conclusion"}},[t._v("Conclusion")])]),a("li",[a("a",{attrs:{href:"#补充-bpf-map-相关内容"}},[t._v("补充 BPF Map 相关内容")]),a("ul",[a("li",[a("a",{attrs:{href:"#使用bpf系统调用操作-bpf-maps"}},[t._v("使用BPF系统调用操作 BPF maps")])]),a("li",[a("a",{attrs:{href:"#使用-bpf-helper-创建bpf-maps"}},[t._v("使用 BPF helper 创建BPF maps")])]),a("li",[a("a",{attrs:{href:"#working-with-bfp-maps"}},[t._v("Working with BFP Maps")])]),a("li",[a("a",{attrs:{href:"#更新元素"}},[t._v("更新元素")])]),a("li",[a("a",{attrs:{href:"#读取元素"}},[t._v("读取元素")])]),a("li",[a("a",{attrs:{href:"#删除元素"}},[t._v("删除元素")])]),a("li",[a("a",{attrs:{href:"#迭代遍历元素"}},[t._v("迭代遍历元素")])]),a("li",[a("a",{attrs:{href:"#查找删除元素"}},[t._v("查找删除元素")])]),a("li",[a("a",{attrs:{href:"#并发访问-map"}},[t._v("并发访问 map")])])])])])]),a("p"),t._v(" "),a("h1",{attrs:{id:"使用-libbpf-bootstrap-构建-bpf-程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-libbpf-bootstrap-构建-bpf-程序"}},[t._v("#")]),t._v(" 使用 libbpf-bootstrap 构建 BPF 程序")]),t._v(" "),a("p",[t._v("libbpf 是一个比 "),a("a",{attrs:{href:"https://github.com/iovisor/bcc/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BCC"),a("OutboundLink")],1),t._v("  更新的 BPF 开发库，也是最新的 BPF 开发推荐方式，官方提供了 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf",target:"_blank",rel:"noopener noreferrer"}},[t._v("C"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-rs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rust"),a("OutboundLink")],1),t._v(" 的库实现。libbpf 支持最新的 BPF CO-RE 特性（单次编译到处执行），它不像 BCC 依赖于 Clang/LLVM 运行时，也不是通过封装后的 Python 接口书写而是直接使用 C 或 Rust 进行开发，也不需要内核开发头文件。所以转向 libbpf 的使用吧。为了方便初学者和习惯了 BCC 的开发者，官方提供了 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap",target:"_blank",rel:"noopener noreferrer"}},[t._v("libbpf-bootstrap"),a("OutboundLink")],1),t._v(" 示例项目，BCC 项目里也有一些用 libbpf 构建的工具 "),a("a",{attrs:{href:"https://github.com/iovisor/bcc/tree/master/libbpf-tools",target:"_blank",rel:"noopener noreferrer"}},[t._v("bcc/libbpf-tools"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("下面的内容翻译自相关"),a("a",{attrs:{href:"https://nakryiko.com/posts/libbpf-bootstrap/",target:"_blank",rel:"noopener noreferrer"}},[t._v("博客：Building BPF applications with libbpf-bootstrap"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("使用 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap",target:"_blank",rel:"noopener noreferrer"}},[t._v("libbpf-bootstrap"),a("OutboundLink")],1),t._v(" 脚手架项目快速上手 libbpf，该项目已经配置好了环境，能够让开发者直接找到 BPF 的乐趣所在。下面我们将一起查看 libbpf-bootstrap 到底干了些什么，以及这一切是如何发挥作用的。")]),t._v(" "),a("h2",{attrs:{id:"为什么使用-libbpf-bootstrp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-libbpf-bootstrp"}},[t._v("#")]),t._v(" 为什么使用 libbpf-bootstrp？")]),t._v(" "),a("p",[t._v("BPF 是一种令人惊异的内核技术，它能够让开发者一览内核函数是如何工作的，即使该开发者没有内核开发的经验，也不需要该开发者花费大量时间在内核开发环境配置上。BPF 也降低了在检阅内核工作状态时 OS 崩溃的风险。一旦你掌握了 BPF，你就会了解其中的乐趣和它无穷的能力。")]),t._v(" "),a("p",[t._v("但是 BPF 的起步对很多人来说，仍然会是一个令人生畏的环节。因为构建一个 BPF 应用程序的工作流，即使是一个 “hello world” 程序都需要大量的步骤。这会是令人失望的，而且会吓走一大片开发者。这个过程不难，但是知晓其中必要的步骤仍然可能会劝退很多人，即使他们知道 BPF 的威力。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap",target:"_blank",rel:"noopener noreferrer"}},[t._v("libbpf-bootstrap"),a("OutboundLink")],1),t._v(" 就是这样一个 BPF 游乐场，它已经尽可能地为初学者配置好了环境，帮助他们可以直接步入到 BPF 程序的书写。它综合了 BPF 社区多年来的最佳实践，并且提供了一个现代化的、便捷的工作流。libbpf-bootstrap 依赖于 libbpf 并且使用了一个很简单的 Makefile。对于需要更高级设置的用户，它也是一个好的起点。即使这个 Makefile不会被直接使用到，也可以很轻易地迁移到别的构建系统上。")]),t._v(" "),a("p",[t._v("libbpf-bootstrap 中有两个示例 BPF 程序（目前已经不止这两个了）： "),a("code",[t._v("minimal")]),t._v(" 和 "),a("code",[t._v("bootstrap")]),t._v("。"),a("code",[t._v("minimal")]),t._v(" 是能够编译、加载和运行的最小化的 BPF 程序，它做的就是 BPF 中等价的"),a("code",[t._v('printf("Hello, World!")')]),t._v("。既然是最小化的一个程序，它也不会依赖于很新的内核特性，即使是旧的内核版本，它也应该会正常工作。")]),t._v(" "),a("p",[t._v("运行 "),a("code",[t._v("minimal")]),t._v(" 示例可以很快地在本地完成一个小的测试，但是它不能反映出用于生产环境下的 BPF 程序是否在各种各样的内核上都是可以使用的。"),a("code",[t._v("bootstrap")]),t._v(" 是一个这样的示例，它构建了一个最小化的可迁移的 BPF 程序。为了满足这个需求，它依赖于 "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-portability-and-co-re/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BPF CO-RE"),a("OutboundLink")],1),t._v(" 特性和内核的 "),a("a",{attrs:{href:"https://nakryiko.com/posts/btf-dedup/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BTF"),a("OutboundLink")],1),t._v(" 支持，所以确保你的 Linux 内核在构建的时候选择了"),a("code",[t._v("CONFIG_DEBUG_INFO_BTF=y")]),t._v(" 内核选项。可以参考 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf#bpf-co-re-compile-once--run-everywhere",target:"_blank",rel:"noopener noreferrer"}},[t._v("libbpf README"),a("OutboundLink")],1),t._v("，查阅已经配置好这些的 Linux 发行版。如果你想要减少构建自定义内核的麻烦，就尽可能地使用更新的内核吧。")]),t._v(" "),a("p",[t._v("另外，"),a("code",[t._v("bootstrap")]),t._v(" 还演示了 BPF 全局变量（Linux 5.5+）和 "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-ringbuf",target:"_blank",rel:"noopener noreferrer"}},[t._v("BPF ring buffer"),a("OutboundLink")],1),t._v("（Linux 5.8+）的使用。这些特性不是构建 BPF 程序必要的组件，但是他们带来了巨大的可用性提升和更现代化的 BPF 程序开发方法，所以他们被加入到了这个示例中。")]),t._v(" "),a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),a("p",[t._v("BPF 是一个持续演进的技术，这意味着新特性将会被持续添加进来，所以视你要采用的 BPF 特性，你可能需要更新的内核版本。但是 BPF 社区非常严肃地考虑了后向兼容性，所以旧的内核仍然可以运行 BPF 程序，假如你不需要新功能的话。所以你的 BPF 程序的逻辑越简单，特性越少，你的 BPF 程序就可以运行在越旧的内核上。")]),t._v(" "),a("p",[t._v("BPF 的用户体验是一直在提升的，更新的内核版本中的 BPF 提供了更加巨大的易用性上的改进。所以如果你只是刚起步，不需要支持旧版的内核，还是用最新的内核吧，让自己少掉点头发。")]),t._v(" "),a("p",[t._v("BPF 程序一般是用 C 语言写的，会有一些代码结构方面的拓展，来让 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf",target:"_blank",rel:"noopener noreferrer"}},[t._v("libbpf"),a("OutboundLink")],1),t._v(" 知晓 BPF 代码的结构，更高效地处理他们，"),a("a",{attrs:{href:"https://clang.llvm.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clang"),a("OutboundLink")],1),t._v(" 是 BPF 代码编译推荐使用的编译器，通常也会推荐使用最新的 Clang。Clang 10 或者更新的版本能够处理大多数的 BPF 特性，但是更先进的 "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-portability-and-co-re/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BPF CO-RE"),a("OutboundLink")],1),t._v(" 特性需要 Clang 11 甚至是 Clang 12（例如，一些最近的 CO-RE relocation built-ins）。")]),t._v(" "),a("p",[t._v("libbpf-bootstrap 打包了 libbpf （作为一个 Git submodule）和 bpftool （只适用于 x86-64 体系）来避免任何你的某个特定 Linux 发行版的依赖需求。"),a("strong",[t._v("你的系统需要安装 "),a("code",[t._v("zlib")]),t._v(" ("),a("code",[t._v("libz-dev")]),t._v(" 或 "),a("code",[t._v("zlib-devel")]),t._v(" 包) 和"),a("code",[t._v("libelf")]),t._v(" ("),a("code",[t._v("libelf-dev")]),t._v(" 或 "),a("code",[t._v("elfutils-libelf-devel")]),t._v(" package) 。这些是 "),a("code",[t._v("libbpf")]),t._v(" 编译和正确运行的必要依赖")]),t._v("，（注意对于 BTF 的支持情况，需要参考官方文档或之前的"),a("RouterLink",{attrs:{to:"/zh/blogs/20210311/#libbpf"}},[t._v("笔记")]),t._v("，只有较新的发行版直接暴露了 BTF 到 "),a("code",[t._v("/sys/kernel/btf/vmlinux")]),t._v("）。")],1),t._v(" "),a("p",[t._v("这篇文章不是 BPF 技术的入门介绍，所以假定读者已经知晓了基本的概念，比如 BPF program，BPF map，BPF hooks (attach points) 。如果你需要重温一下基础知识，可以看"),a("a",{attrs:{href:"https://docs.cilium.io/en/latest/bpf/",target:"_blank",rel:"noopener noreferrer"}},[t._v("这些"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://qmonnet.github.io/whirl-offload/2016/09/01/dive-into-bpf/",target:"_blank",rel:"noopener noreferrer"}},[t._v("资料"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("下面将会详细介绍 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap",target:"_blank",rel:"noopener noreferrer"}},[t._v("libbpf-bootstrap"),a("OutboundLink")],1),t._v(" 的结构，它的 Makefile 和 "),a("code",[t._v("minimal")]),t._v(" 、"),a("code",[t._v("bootstrap")]),t._v(" 两个示例。我们将会了解 libbpf 的代码风格，了解如何把 BPF C 程序构建成使用 libbpf 作为 BPF program loader 的形式，以及如何使用用户空间的 libbpf API 和你的 BPF 程序交互。")]),t._v(" "),a("h2",{attrs:{id:"libbpf-bootstrap-概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#libbpf-bootstrap-概览"}},[t._v("#")]),t._v(" Libbpf-bootstrap 概览")]),t._v(" "),a("p",[t._v("下面就是 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("libbpf-bootstrap")]),a("OutboundLink")],1),t._v(" 的目录结构")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ tree\n.\n├── libbpf\n│   ├── ...\n│   ... \n├── LICENSE\n├── README.md\n├── src\n│   ├── bootstrap.bpf.c\n│   ├── bootstrap.c\n│   ├── bootstrap.h\n│   ├── Makefile\n│   ├── minimal.bpf.c\n│   ├── minimal.c\n│   ├── vmlinux_508.h\n│   └── vmlinux.h -> vmlinux_508.h\n└── tools\n    ├── bpftool\n    └── gen_vmlinux_h.sh\n\n16 directories, 85 files\n")])])]),a("p",[a("code",[t._v("libbpf-bootstrap")]),t._v(" 把 libbpf 打包成了 "),a("code",[t._v("libbpf/")]),t._v(" 子目录下的一个子模块来避免系统侧对 libbpf 的依赖。")]),t._v(" "),a("p",[a("code",[t._v("tools/")]),t._v(" 包含了 "),a("code",[t._v("bpftool")]),t._v(" 的二进制文件，用来构建你的 BPF 程序的  "),a("a",{attrs:{href:"https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/#bpf-skeleton-and-bpf-app-lifecycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("BPF skeletons"),a("OutboundLink")],1),t._v("。 类似 libbpf，它被打包进来以避免依赖问题。")]),t._v(" "),a("p",[t._v("另外， bpftool 能被用来生成你自己的包含内核类型定义的 "),a("code",[t._v("vmlinux.h")]),t._v("头文件。 一般来说你不需要这么做，因为 libbpf-bootstrap 已经在 "),a("code",[t._v("src/")]),t._v(" 子目录下提供了预先生成的  "),a("a",{attrs:{href:"https://raw.githubusercontent.com/libbpf/libbpf-bootstrap/master/src/vmlinux_508.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("vmlinux.h"),a("OutboundLink")],1),t._v("。 它基于 Linux 5.8 内核选项的默认设置，激活了一些额外的和 BPF 相关的功能的配置项。这意味着它已经有了一些通用的内核类型和常量。因为有  "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-portability-and-co-re/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BPF CO-RE"),a("OutboundLink")],1),t._v("， "),a("code",[t._v("vmlinux.h")]),t._v(" 不需要特定地去匹配你的内核配置和版本。但是如果你仍然要生成你自己的 "),a("code",[t._v("vmlinux.h")]),t._v("，尽管参考 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap/blob/master/tools/gen_vmlinux_h.sh",target:"_blank",rel:"noopener noreferrer"}},[a("code",[t._v("tools/gen_vmlinux_h.sh")]),a("OutboundLink")],1),t._v(" 脚本吧，去看看它是如何做的。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap/blob/master/src/Makefile",target:"_blank",rel:"noopener noreferrer"}},[t._v("Makefile"),a("OutboundLink")],1),t._v(" 定义了必要的构建规则，来编译所有提供的 BPF 应用。它遵从一个简单的文件命名规则。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("<app>.bpf.c")]),t._v(" 文件是 BPF C 代码包含了将在内核上下文中执行的逻辑。")]),t._v(" "),a("li",[a("code",[t._v("<app>.c")]),t._v(" 是用户空间的 C 代码，加载了 BPF 代码，在应用的整个生命周期内和它交互。")]),t._v(" "),a("li",[a("em",[t._v("optional")]),t._v(" "),a("code",[t._v("<app>.h")]),t._v(" 是一个头文件，包含了常见的类型定义，是在 BPF 代码和用户空间代码之间共享的。")])]),t._v(" "),a("h2",{attrs:{id:"minimal-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minimal-app"}},[t._v("#")]),t._v(" Minimal app")]),t._v(" "),a("p",[a("code",[t._v("minimal")]),t._v(" 是一个给初学者的很好的例子。它是一个最小化的 BPF 试验场所。它不使用 CO-RE 特性，所以你可以在旧些的内核上使用它，只需要 include 你的内核类型定义。这个例子不适合拿来做生产环境下用，但是做学习用途还是很好的。")]),t._v(" "),a("h3",{attrs:{id:"the-bpf-side"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-bpf-side"}},[t._v("#")]),t._v(" The BPF side")]),t._v(" "),a("p",[t._v("下面就是 BPF 侧的代码 ("),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap/blob/master/src/minimal.bpf.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("minimal.bpf.c"),a("OutboundLink")],1),t._v(") ：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Copyright (c) 2020 Facebook */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<linux/bpf.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bpf/bpf_helpers.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" LICENSE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SEC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"license"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Dual BSD/GPL"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" my_pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SEC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tp/syscalls/sys_enter_write"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle_tp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_get_current_pid_tgid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" my_pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_printk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BPF triggered from PID %d.\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("#include <linux/bpf.h>")]),t._v(" 导入了一些基础的、必要的 BPF 相关的类型和常量，以便使用内核侧的 BPF API，例如 BPF helper function flags。这个头文件是之后导入 "),a("code",[t._v("bpf_helpers.h")]),t._v(" 这个头文件所必须的前提。而 "),a("code",[t._v("bpf_helpers.h")]),t._v(" 是由 "),a("code",[t._v("libbpf")]),t._v(" 提供的，包含了大多数常用的宏、常量和 BPF helper 的定义，几乎会在每个 BPF 应用中用到。例如上面用到的"),a("code",[t._v("bpf_get_current_pid_tgid()")]),t._v(" 就是一个 BPF helper。")]),t._v(" "),a("p",[a("code",[t._v("LICENSE")]),t._v(" 变量定义了你的 BPF 代码的 license。在内核开发中，明确 license 是必须的。一些 BPF 功能对于不兼容 GPL 的代码是不可用的。注意特殊的 "),a("code",[t._v('SEC("license")')]),t._v(" 注解。 定义在 "),a("code",[t._v("bpf_helpers.h")]),t._v(" 中的 "),a("code",[t._v("SEC()")]),t._v("  把变量和函数放到了特殊的段中。 "),a("code",[t._v('SEC("license")')]),t._v(" 和一些其他的段名，是 libbpf 规定的，只要遵循就好了。")]),t._v(" "),a("p",[t._v("接下来，我们看看 BPF 特性“全局变量”是如何使用的。代码 "),a("code",[t._v("int my_pid = 0;")]),t._v(" 所做的正是你所想象的事情：它定义了一个全局变量，BPF 代码可以读取和更新它，就像其他用户空间的 C 代码对待全局变量那样。使用 BPF 全局变量维护程序的状态很方便，而且性能表现也不错。另外，这样的全局变量能够从用户侧读写。这个特性是从 Linux 5.5 之后才支持的。在用额外的设置项配置 BPF 程序的时候常常会用到它。它也经常用于在内核中的 BPF 代码和用户侧的控制代码之间传递数据。")]),t._v(" "),a("p",[a("code",[t._v('SEC("tp/syscalls/sys_enter_write") int handle_tp(void *ctx) { ... }')]),t._v(" 定义了 BPF 程序，它会被加载到内核中。它是由一个普通的 C 函数定义的，使用 "),a("code",[t._v("SEC()")]),t._v(" 宏放在一个特殊的段中。段名定义了 libbpf 程序创建的是什么类型的 BPF 程序，以及它是附着到内核上哪个地方的。在这个例子中，我们是定义了一个 tracepoint BPF 程序，每次用户空间的应用调用了系统调用 "),a("code",[t._v("write()")]),t._v(" 的时候，就会触发它。")]),t._v(" "),a("blockquote",[a("p",[t._v("在同一个 BPF C 程序文件中，可能有多个 BPF 程序。他们可以是不同类型的，有着不同的 "),a("code",[t._v("SEC()")]),t._v(" 宏。例如，你可以用不同的 BPF 程序追踪不同的系统调用或其他事件（如网络包的处理）。你也可以使用相同的 "),a("code",[t._v("SEC()")]),t._v(" 宏来定义多个 BPF 程序，libbpf 会自动处理他们。在同一个 BPF C 代码文件中的所有的 BPF 程序共享所有的全局状态，例如上面例子中的 "),a("code",[t._v("my_pid")]),t._v(" 变量，如果使用了 BPF map，它也是共享的。这常常用在 BPF 程序的协作中。")])]),t._v(" "),a("p",[t._v("下面仔细看看 BPF 程序 "),a("code",[t._v("handle_tp")]),t._v(" 是在干嘛：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_get_current_pid_tgid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" my_pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v('这部分获取了 PID，或者说是内核术语中的 "TGID" ，它存储在 '),a("code",[t._v("bpf_get_current_pid_tgid()")]),t._v(" 返回值的高 32 位。接着，它会查看触发了 "),a("code",[t._v("write()")]),t._v(" 系统调用的进程是否是我们的 "),a("code",[t._v("minimal")]),t._v(" 进程。这对于一个很繁忙的系统是十分重要的，因为很可能有大量不相关的进程触发了 "),a("code",[t._v("write()")]),t._v("，使得你很难用这段 BPF 代码进行实验得到预期的结果。全局变量 "),a("code",[t._v("my_pid")]),t._v(" 是通过下面的用户空间的代码进行初始化的，它会被初始化成真实的 PID 值。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_printk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BPF triggered from PID %d.\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这就是 BPF 中的 "),a("code",[t._v('printf("Hello, world!\\n")')]),t._v("。它输出格式化的字符串到一个特殊的文件，叫作 "),a("code",[t._v("/sys/kernel/debug/tracing/trace_pipe")]),t._v("，你可以从控制台中去查看它的内容，注意你需要 "),a("code",[t._v("sudo")]),t._v(" 来取得查看它的权限：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" /sys/kernel/debug/tracing/trace_pipe\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("-3840345 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("010"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3220701.101143")]),t._v(": bpf_trace_printk: BPF triggered from PID "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3840345")]),t._v(".\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("-3840345 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("010"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3220702.101265")]),t._v(": bpf_trace_printk: BPF triggered from PID "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3840345")]),t._v(".\n")])])]),a("blockquote",[a("p",[a("code",[t._v("bpf_printk()")]),t._v(" 帮助函数和 "),a("code",[t._v("trace_pipe")]),t._v(" 文件一般不在生产环境中使用，它们是用来辅助 BPF 程序的 debug 的，帮助开发者知道自己的代码到底干了些什么事情。目前还没有 BPF 的调试工具，所以这种输出调试是目前最方便的调试方法了。")])]),t._v(" "),a("p",[t._v("这就是 BPF 侧的 "),a("code",[t._v("minimal")]),t._v(" 应用了，你可以加一些别的代码到 "),a("code",[t._v("handle_tp()")]),t._v(" 中，按你所需去拓展它。")]),t._v(" "),a("h3",{attrs:{id:"the-user-space-side"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-user-space-side"}},[t._v("#")]),t._v(" The user-space side")]),t._v(" "),a("p",[t._v("让我们看看用户空间到底做了啥 ("),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap/blob/master/src/minimal.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("minimal.c"),a("OutboundLink")],1),t._v(")，我们会跳过一些显然的部分，但是无论如何，读者都应该去看一下完整的代码。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"minimal.skel.h"')])]),t._v("\n")])])]),a("p",[t._v("这里导入了 BPF 代码 "),a("code",[t._v("minimal.bpf.c")]),t._v(" 中的 BPF skeleton。它是在 Makefile中的某一步，由 bpftool 自动生成的文件，它高度抽象了"),a("code",[t._v("minimal.bpf.c")]),t._v(" 的结构。它也简化了 BPF 代码部署的逻辑，将编译出的 BPF 目标代码嵌入到了头文件中，该头文件又会被用户空间的代码所引用。你的应用程序的二进制文件中不会有其他多余的文件了，就导入它就好了。")]),t._v(" "),a("blockquote",[a("p",[t._v("BPF skeleton 是完全由 "),a("code",[t._v("libbpf")]),t._v(" 构造出的，内核对它一无所知。但是它的存在显著提升了 BPF 开发体验，所以, 最好熟悉一下它。可以看这篇 "),a("a",{attrs:{href:"https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/#bpf-skeleton-and-bpf-app-lifecycle",target:"_blank",rel:"noopener noreferrer"}},[t._v("博客"),a("OutboundLink")],1),t._v(" 来了解 BPF skeleton 的细节。")])]),t._v(" "),a("p",[t._v("libbpf-bootstrap 的 BPF skeletons 在成功 "),a("code",[t._v("make")]),t._v(" 后，生成到了 "),a("code",[t._v("src/.output/<app>.skel.h")]),t._v(" 中。为了获取直观感受，下面是 "),a("code",[t._v("minimal.bpf.c")]),t._v(" 的 skeletons 高度抽象后的概览：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* THIS FILE IS AUTOGENERATED! */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("__MINIMAL_BPF_SKEL_H__")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("__MINIMAL_BPF_SKEL_H__")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bpf/libbpf.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_object_skeleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("skeleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_map")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" maps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_program")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("handle_tp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" progs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_link")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("handle_tp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" links"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf__bss")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" my_pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimal_bpf__destroy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimal_bpf__open_opts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_object_open_opts")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("opts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimal_bpf__open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimal_bpf__load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimal_bpf__open_and_load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimal_bpf__attach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimal_bpf__detach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* __MINIMAL_BPF_SKEL_H__ */")])]),t._v("\n")])])]),a("p",[t._v("上面的自动生成的代码中，会有一个 "),a("code",[t._v("struct bpf_object *obj;")]),t._v(" ，它会被传递给 libbpf 的 API。它也包含有 "),a("code",[t._v("maps")]),t._v("， "),a("code",[t._v("progs")]),t._v(" 和 "),a("code",[t._v("links")]),t._v(" 等段，可以直接获取到你的 BPF 代码中定义的 BPF map 和程序。例如，前面提到的 BPF 程序 "),a("code",[t._v("handle_tp")]),t._v(" 。这些引用能够直接传递给 libbpf的 API 去完成 BPF map/program/link 相关的工作。Skeleton 也可以包含可选的 bss、data、rodata 段，从而可以直接从用户空间访问 BPF 全局变量而不必使用额外的系统调用。在这种情况下，我们的"),a("code",[t._v("my_pid")]),t._v(" BPF 变量对应的是 "),a("code",[t._v("bss->my_pid")]),t._v(" 域。")]),t._v(" "),a("p",[t._v("现在看看  "),a("code",[t._v("minimal")]),t._v(" 应用的 "),a("code",[t._v("main()")]),t._v(" 函数在干些什么：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("minimal_bpf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("skel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Set up libbpf errors and debug info callback */")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("libbpf_set_print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("libbpf_print_fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("libbpf_set_print()")]),t._v(" 提供了一个自定义的回调给所有的 libbpf 日志输出。这很有用，特别是在活跃的开发时期，因为它允许捕获有用的 libbpf 调试日志。默认情况下，libbpf 将只打印错误级别的信息。调试日志则会帮助我们更快地定位问题。")]),t._v(" "),a("blockquote",[a("p",[t._v("想报告 libbpf 或你的基于 libbpf 开发的应用的问题，可以发送邮件到 "),a("a",{attrs:{href:"mailto://bpf@vger.kernel.org"}},[t._v("bpf@vger.kernel.org")]),t._v(" 邮件列表，记得附上你的调试信息。")])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("minimal")]),t._v(" 这个示例中， "),a("code",[t._v("libbpf_print_fn()")]),t._v("  只是把所有内容都打印到标准输出 stdout。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Bump RLIMIT_MEMLOCK to allow BPF sub-system to do anything */")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bump_memlock_rlimit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这是一步令人困惑但也是必要的步骤，大多数 BPF 程序都要这么去做。它放松了内核中对每个用户内存的约束，允许 BPF 子系统分配必要的资源给你的 BPF 程序和 BPF maps 等。这个限制很可能会被马上移除掉，但是目前你需要打开这个内存限制，即 "),a("code",[t._v("RLIMIT_MEMLOCK")]),t._v(" "),a("a",{attrs:{href:"https://man7.org/linux/man-pages/man2/getrlimit.2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("limit"),a("OutboundLink")],1),t._v(" 。通过 "),a("code",[t._v("minimal")]),t._v(" 代码中使用的 "),a("code",[t._v("setrlimit(RLIMIT_MEMLOCK, ...)")]),t._v(" ，是最简单也最便捷的方法。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Load and verify BPF application */")]),t._v("\n\tskel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimal_bpf__open_and_load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("skel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to open and load BPF skeleton\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("现在，使用自动生成的 BPF skeleton，加载 BPF 程序到内核中，然后让 BPF verifier 校验它是否合法，如果这步成功了，你的 BPF 代码就是正确的，而且可以附着到任何一个你需要的 BPF hook 上。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ensure BPF program only handles write() syscalls from our process */")]),t._v("\n\tskel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("bss"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("my_pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("但是首先，我们需要与 BPF 交流我们的用户态程序的 PID，以便它能够过滤掉不相关的进程触发的 "),a("code",[t._v("write()")]),t._v("事件。上面的这行代码会直接设置映射过的内存区域的 BPF 全局变量 "),a("code",[t._v("my_pid")]),t._v("。如上面提到的，这就是用户态读写 BPF 全局变量的方式。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Attach tracepoint handler */")]),t._v("\n\terr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimal_bpf__attach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("skel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to attach BPF skeleton\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" cleanup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Successfully started!\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("终于，我们可以将 BPF 程序"),a("code",[t._v("handle_tp")]),t._v(" 附着到到内核的锚点上（即上面的 BPF hook）。BPF 程序会随之响应，内核会开始在内核上下文中，回应每个 "),a("code",[t._v("write()")]),t._v(" 系统调用，执行我们自定义的 BPF 代码。")]),t._v(" "),a("blockquote",[a("p",[t._v("通过查看 "),a("code",[t._v("SEC()")]),t._v(" 注解，libbpf 能够自动决定在什么地方附着 BPF 程序。这并非对所有类型的 BPF 程序都适用，但是对大多数还是适用的，比如：tracepoints、kprobes 等等（具体的 BPF 程序种类，可以参考之前的"),a("RouterLink",{attrs:{to:"/zh/blogs/20210329/#常见-bpf-prog-type-定义"}},[t._v("笔记")]),t._v("）。另外，libbpf 提供了额外的 API 来附着 BPF 程序，可以通过用户的编程实现。")],1)]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* trigger our BPF program */")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面代码中的无穷循环确保了 BPF 程序 "),a("code",[t._v("handle_tp")]),t._v(" 能够一直附着在内核中，直到用户关掉进程，如按下 "),a("code",[t._v("Ctrl-C")]),t._v("。同时，它还会周期性地（每秒）调用 "),a("code",[t._v("fprintf(stderr, ...)")]),t._v("，从而触发一次 "),a("code",[t._v("write()")]),t._v(" 系统调用。通过这种方法，可以通过 "),a("code",[t._v("handle_tp")]),t._v(" 监控内核的内部情况和状态随时间的变化。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token symbol"}},[t._v("cleanup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\tminimal_bpf__destroy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("skel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\treturn -err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果前面任一个步骤错误了，"),a("code",[t._v("minimal_bpf__destroy()")]),t._v(" 将会像上面这几行代码所述，在内核和用户空间清除所有的资源。这是一个好习惯，但是即使你的程序还没清理就崩溃了，内核也仍然能够清理掉资源。好吧，至少大多数情况下是这样的。也有一些类型的 BPF 程序，会在内核中一直保持活跃，即使它自己的用户空间的进程已经结束了。所以必要的话还是确保你检查过释放掉资源了。这就是 "),a("code",[t._v("minimal")]),t._v(" 应用的全部的内容了，使用了 BPF skeleton 后，这一切都是很直截了当的。")]),t._v(" "),a("h2",{attrs:{id:"makefile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#makefile"}},[t._v("#")]),t._v(" Makefile")]),t._v(" "),a("p",[t._v("既然我们已经浏览过了 "),a("code",[t._v("minimal")]),t._v(" 应用，我们已经有足够的知识来看看 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap/blob/master/src/Makefile",target:"_blank",rel:"noopener noreferrer"}},[t._v("Makefile"),a("OutboundLink")],1),t._v(" 到底干了些什么。我们将跳过样板部分，关注核心的部分。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[t._v("INCLUDES "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" -I"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nCFLAGS "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" -g -Wall\nARCH "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("shell")]),t._v(" uname -m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" sed "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s/x86_64/x86/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这里我们定义一些在编译时使用的额外的参数。默认情况下，所有的中间文件都会写入到 "),a("code",[t._v("src/.output/")]),t._v(" 子文件夹下。所以这个文件夹会被添加到 C 编译器的包含路径中，以便找到 BPF skeletons 和 libbpf 头文件。所有的用户空间文件在编译时都会带有调试信息（即 "),a("code",[t._v("-g")]),t._v(" 选项），并且不会有任何的优化，来简化调试工作。 "),a("code",[t._v("ARCH")]),t._v(" 参数捕获了宿主机的操作系统的架构，之后和定义在 libbpf 库中"),a("code",[t._v("bpf_tracing.h")]),t._v(" 底层的 tracing helper 宏一起被传入到 BPF 代码编译步骤中。")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[t._v("APPS "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" minimal bootstrap\n")])])]),a("p",[t._v("这里提供了目标的应用名称，添加到 "),a("code",[t._v("APPS")]),t._v(" 变量中的会被编译。每个应用都定义了相关的 make 目标，所以你可以通过下面的命令构建对应的文件：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" minimal\n")])])]),a("p",[t._v("整个构建的过程分为下面的几步。首先，libbpf 以一个静态库的形式构建，它的 API 头文件之后被安装到了 "),a("code",[t._v(".output/")]),t._v(" 中：")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Build libbpf")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token symbol"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),t._v("(LIBBPF_OBJ)")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("wildcard")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LIBBPF_SRC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/*.[ch] "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LIBBPF_SRC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/Makefile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/libbpf\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("call")]),t._v(" msg,LIB,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MAKE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -C "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LIBBPF_SRC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" BUILD_STATIC_ONLY"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("1\t\t      \\\n\t\t    OBJDIR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("dir")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/libbpf DESTDIR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("dir")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t      \\\n\t\t    INCLUDEDIR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" LIBDIR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UAPIDIR"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\t\t\t      \\\n\t\t    install\n")])])]),a("p",[t._v("如果你想要构建系统层面的共享库 "),a("code",[t._v("libbpf")]),t._v(" ，你可以移除上面的步骤，然后对应地调整编译规则。")]),t._v(" "),a("p",[t._v("下一步构建了 BPF C 代码，即 "),a("code",[t._v("*.bpf.c")]),t._v("，编译到了一个目标文件：")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Build BPF code")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token symbol"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),t._v("(OUTPUT)/%.bpf.o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" %.bpf.c "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LIBBPF_OBJ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("wildcard")]),t._v(" %.h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" vmlinux.h "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("call")]),t._v(" msg,BPF,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CLANG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -g -O2 -target bpf -D__TARGET_ARCH_"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ARCH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("INCLUDES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -c "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("filter")]),t._v(" %.c,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -o "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LLVM_STRIP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -g "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# strip useless DWARF info")]),t._v("\n")])])]),a("p",[t._v("我们使用 Clang 来编译， "),a("code",[t._v("-g")]),t._v(" 是必须的选项，来让 Clang 生成 BTF 相关的调试信息。 "),a("code",[t._v("-O2")]),t._v(" 也是 BPF 编译中必要的， "),a("code",[t._v("-D__TARGET_ARCH_$(ARCH)")]),t._v(" 为 "),a("code",[t._v("bpf_tracing.h")]),t._v(" 定义了必要的宏来处理底层的 "),a("code",[t._v("struct pt_regs")]),t._v(" 宏。你可以忽略它如果你不是在处理内核探测程序 kprobes 和 "),a("code",[t._v("struct pt_regs")]),t._v("。最后，我们从生成的 "),a("code",[t._v(".o")]),t._v(" 文件中去除掉 DWARF 信息。因为它不会被用到，基本上都是 Clang 编译的副产物。")]),t._v(" "),a("blockquote",[a("p",[t._v("BTF 是确保 BPF 正常工作的唯一的必要信息，因此会被保留下来。减小最终的  "),a("code",[t._v(".bpf.o")]),t._v(" 文件是十分必要的，因为它将通过 BPF skeleton 被嵌入到最后的二进制应用中，所以要避免因为不必要的 DWARF 数据增加它的大小。")])]),t._v(" "),a("p",[t._v("既然我们已经生成了一个 "),a("code",[t._v(".bpf.o")]),t._v(" 文件，"),a("code",[t._v("bpftool")]),t._v("可以用来生成一个对应的 BPF skeleton 头文件，即"),a("code",[t._v(".skel.h")]),t._v("，是通过"),a("code",[t._v("bpftool gen skeleton")]),t._v(" 命令完成的：")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Generate BPF skeletons")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token symbol"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),t._v("(OUTPUT)/%.skel.h")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/%.bpf.o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("call")]),t._v(" msg,GEN-SKEL,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BPFTOOL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" gen skeleton "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$<")]),t._v(" > "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v("\n")])])]),a("p",[t._v("通过这种方式，我们确保了无论何时更新 BPF skeleton，用户空间的的应用也会被更新。因为他们需要在编译时将 BPF skeleton 嵌入进去。用户空间的 "),a("code",[t._v(".c")]),t._v(" → "),a("code",[t._v(".o")]),t._v(" 编译则是相当直接的：")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Build user-space code")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token symbol"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),t._v("(patsubst %,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),t._v("(OUTPUT)/%.o,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),t._v("(APPS))")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" %.o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" %.skel.h\n\n"),a("span",{pre:!0,attrs:{class:"token symbol"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),t._v("(OUTPUT)/%.o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" %.c "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("wildcard")]),t._v(" %.h"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("call")]),t._v(" msg,CC,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CFLAGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("INCLUDES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -c "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("filter")]),t._v(" %.c,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$^")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" -o "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v("\n")])])]),a("p",[t._v("最后，只使用用户空间的 "),a("code",[t._v(".o")]),t._v(" 文件，以及 "),a("code",[t._v("libbpf.a")]),t._v(" 静态库，就生成了最终的二进制文件。"),a("code",[t._v("-lelf")]),t._v(" 和 "),a("code",[t._v("-lz")]),t._v(" 是 libbpf 的依赖，需要显式地提供给编译器：")]),t._v(" "),a("div",{staticClass:"language-makefile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-makefile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Build application binary")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token symbol"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),t._v("(APPS)")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" %"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/%.o "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LIBBPF_OBJ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OUTPUT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("call")]),t._v(" msg,BINARY,"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CFLAGS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$^")]),t._v(" -lelf -lz -o "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$@")]),t._v("\n")])])]),a("p",[t._v("也就是说，在运行上面几个步骤后，你将会得到一个很小的用户空间的二进制文件。通过 BPF skeleton，编译出的 BPF 代码被嵌入到了这个二进制文件中，静态链接了 libbpf。所以它不再依赖于系统侧全局的 "),a("code",[t._v("libbpf")]),t._v("。这个二进制文件仅有 200KB，运行起来很快、可以独立执行，正如 "),a("a",{attrs:{href:"http://www.brendangregg.com/blog/2020-11-04/bpf-co-re-btf-libbpf.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Brendan Gregg 所述"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"bootstrap-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bootstrap-app"}},[t._v("#")]),t._v(" Bootstrap app")]),t._v(" "),a("p",[t._v("我们已经介绍了 "),a("code",[t._v("minimal")]),t._v(" 应用是什么样的，以及是如何编译的，下面我们就看看 "),a("code",[t._v("bootstrap")]),t._v(" 中显示出的别的 BPF 特性。 "),a("code",[t._v("bootstrap")]),t._v(" 是我之前写到的，是一个适用于生产环境下的 BPF 应用、它依赖于 BPF CO-RE (read why "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-portability-and-co-re/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(") 特性，需要 Linux 内核在编译时选择 "),a("code",[t._v("CONFIG_DEBUG_INFO_BTF=y")]),t._v(" (see "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf#bpf-co-re-compile-once--run-everywhere",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(")。")]),t._v(" "),a("p",[a("code",[t._v("bootstrap")]),t._v(" 追踪的是 "),a("code",[t._v("exec()")]),t._v(" 系统调用，使用的是 "),a("code",[t._v('SEC("tp/sched/sched_process_exec") handle_exit')]),t._v(" BPF 程序，大致上和进程的创建有关（这里忽略掉 "),a("code",[t._v("fork()")]),t._v("）。另外，它追踪了 "),a("code",[t._v("exit()")]),t._v(" 调用，这个是用的 "),a("code",[t._v('SEC("tp/sched/sched_process_exit") handle_exit')]),t._v(" BPF 程序，来监控每个进程是何时结束的。这两个 BPF 程序，共同协作，允许捕获到每个新建进程的信息，例如二进制文件名，每个进程的生命周期，收集进程消亡时的数据信息，如 exit code 或消耗的资源等。如果你想要看看内核到底在干嘛，它会是一个很好的开始。")]),t._v(" "),a("p",[a("code",[t._v("bootstrap")]),t._v(" 也用了libc 的部分 "),a("a",{attrs:{href:"https://www.gnu.org/software/libc/manual/html_node/Argp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("argp API"),a("OutboundLink")],1),t._v("  来解析命令行参数，可以参考 "),a("a",{attrs:{href:"http://download.savannah.nongnu.org/releases-noredirect/argpbook/step-by-step-into-argp.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v('"Step-by-Step into Argp" tutorial'),a("OutboundLink")],1),t._v(" 来了解这个 库是咋用的。用它我们提供了一些选项给程序，比如可以解析生命周期时长参数，即下面的"),a("code",[t._v("min_duration_ns")]),t._v(" 只读变量。使用命令 "),a("code",[t._v("sudo ./bootstrap -d 100")]),t._v(" 来显示最近 100 ms 存活的进程。详细的模式可以用 "),a("code",[t._v("sudo ./bootstrap -v")]),t._v("，激活 "),a("code",[t._v("libbpf")]),t._v(" 调试信息。")]),t._v(" "),a("h3",{attrs:{id:"includes-vmlinux-h-libbpf-and-app-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#includes-vmlinux-h-libbpf-and-app-headers"}},[t._v("#")]),t._v(" Includes: vmlinux.h, libbpf and app headers")]),t._v(" "),a("p",[t._v("下面是 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap/blob/master/src/bootstrap.bpf.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("bootstrap.bpf.c"),a("OutboundLink")],1),t._v(" 导入的头文件：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vmlinux.h"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bpf/bpf_helpers.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bpf/bpf_tracing.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<bpf/bpf_core_read.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bootstrap.h"')])]),t._v("\n")])])]),a("p",[t._v("和 "),a("code",[t._v("minimal.bpf.c")]),t._v(" 不同的是，我们使用了 "),a("code",[t._v("vmlinux.h")]),t._v(" 头文件，在一个文件中包含了内核中所有的类型。他是 libbpf-bootstrap 项目里 "),a("a",{attrs:{href:"https://raw.githubusercontent.com/libbpf/libbpf-bootstrap/master/src/vmlinux_508.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("预先生成的"),a("OutboundLink")],1),t._v(" ，但是开发者也可以自己使用 "),a("code",[t._v("bpftool")]),t._v(" 来生成，具体可以参考 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap/blob/master/tools/gen_vmlinux_h.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("gen_vmlinux_h.sh"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("vmlinux.h")]),t._v(" 中所有的类型都会携带着额外的标签 "),a("code",[t._v("__attribute__((preserve_access_index))")]),t._v("，它会让 Clang 生成具有 "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-portability-and-co-re/#reading-kernel-structure-s-fields",target:"_blank",rel:"noopener noreferrer"}},[t._v("BPF CO-RE relocations"),a("OutboundLink")],1),t._v(",的程序，允许 libbpf 将你的 BPF 代码放到宿主机内核内存的特定位置，即使它和脚手架项目最初生成的那个 "),a("code",[t._v("vmlinux.h")]),t._v(" 不同。这是构建可迁移的预编译出的 BPF 应用很关键的一步，从而不需要将整个 Clang/LLVM 工具链部署到目标系统上。与之相对的是 BCC 的方法，在运行时编译 BPF 代码，有很多"),a("a",{attrs:{href:"https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/#why-libbpf-and-bpf-co-re",target:"_blank",rel:"noopener noreferrer"}},[t._v("弊端"),a("OutboundLink")],1),t._v("。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[a("code",[t._v("vmlinux.h")]),t._v(" 不能和其他系统侧的内核头文件结合，显然，若是那么干了，你将会碰到重复定义的问题。所以只使用 libbpf 提供的 "),a("code",[t._v("vmlinux.h")]),t._v(" 头文件就好了。")])]),t._v(" "),a("p",[t._v("除了 "),a("code",[t._v("bpf_helpers.h")]),t._v("，我们也使用了一些其他的 libbpf 提供的头文件，如"),a("code",[t._v("bpf_tracing.h")]),t._v(" 和 "),a("code",[t._v("bpf_core_read.h")]),t._v("，提供了一些额外的宏来写具有 CO-RE 特性的 BPF 应用。最后，"),a("code",[t._v("bootstrap.h")]),t._v(" 包含了通用的类型定义，在 BPF 和用户空间的代码之间共享。")]),t._v(" "),a("h3",{attrs:{id:"bpf-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bpf-maps"}},[t._v("#")]),t._v(" BPF maps")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("bootstrap")]),t._v(" 展示了 BPF maps 的使用方法，它是 BPF 中的抽象数据结构。许多不同的数据结构都可以被建模为 BPF maps：例如数组、哈希表、per-socket 和 per-task 的本地存储、BPF perf  和 ring buffers，甚至是其他奇特的用法。重要的是大多数 BPF maps 允许执行差序、更新、按照键删除元素等方法。一些 BPF maps 允许额外的操作，比如 "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-ringbuf/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BPF ring buffer"),a("OutboundLink")],1),t._v("，允许数据入队，但是用于都不从 BPF 侧删除它。BPF maps 是用来在 BPF 程序和用户空间之间共享状态的。另一个起到这种作用的是 BPF 全局变量，它在底层也是用 BPF maps 实现的。")])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("bootstrap")]),t._v(" 中，我们定义了名叫 BPF map 的 "),a("code",[t._v("exec_start")]),t._v(" 的 "),a("code",[t._v("BPF_MAP_TYPE_HASH")]),t._v(" 类型的哈希表。它最大容纳 8192 个元素，键是 "),a("code",[t._v("pid_t")]),t._v(" 类型的，值是一个 64 位的无符号整型，存储了进程运行事件的纳秒粒度的时间戳。这就是所谓的 BTF-defined map，"),a("code",[t._v('SEC(".maps")')]),t._v(" 标注是必要的，让 libbpf 知晓它需要在内核中创建对应的 BPF map，在 BPF 代码中：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__uint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BPF_MAP_TYPE_HASH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__uint")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max_entries"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8192")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" exec_start "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SEC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".maps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在这样一个哈希表中添加、更新元素是很简单的：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tu64 ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* remember time exec() was executed for this PID */")]),t._v("\n\tpid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_get_current_pid_tgid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_ktime_get_ns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_update_elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("exec_start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BPF_ANY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("bpf_map_update_elem()")]),t._v(" BPF helper 接收 map 它自己的指针、键和值的指针，在这个例子中 "),a("code",[t._v("BPF_ANY")]),t._v(" 表示的是或者添加一个新的键或者更新已有的键值对。")]),t._v(" "),a("p",[t._v("注意第二个 BPF 程序（"),a("code",[t._v("handle_exit")]),t._v("）从同一个 BPF map 中查询元素，之后删除它。它展示了 "),a("code",[t._v("exec_start")]),t._v(" map 是在两个 BPF 程序之间共享的：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pid_t")]),t._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tu64 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("start_ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\tstart_ts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_lookup_elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("exec_start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start_ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\tduration_ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_ktime_get_ns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("start_ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_delete_elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("exec_start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"read-only-bpf-configuration-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-only-bpf-configuration-variables"}},[t._v("#")]),t._v(" Read-only BPF configuration variables")]),t._v(" "),a("p",[a("code",[t._v("bootstrap")]),t._v(" 和 "),a("code",[t._v("minimal")]),t._v(" 不同，使用的是只读的全局变量：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" min_duration_ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("const volatile")]),t._v(" 是重要的，它为 BPF 代码和用户空间的代码标记了只读变量。它具体定义了 "),a("code",[t._v("min_duration_ns")]),t._v(" 的值，同时在 BPF 程序的验证期间，BPF verifier 是知晓它的。这就允许 BPF verifier 优化无效的代码，也就是这样只读的变量限制下访问不到的代码路径，即减少了不可到达的分支逻辑。这个特性在一些更加高级的用例里是很受欢迎的，例如可移植性的检查和其他配置项。")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("volatile")]),t._v(" 是让 Clang 不去优化掉该变量、忽略掉用户空间所提供的值所必要的。否则，Clang 可以自由地移除掉该变量，这不是我们想要的结果。")])]),t._v(" "),a("p",[t._v("在用户侧代码 "),a("a",{attrs:{href:"https://github.com/libbpf/libbpf-bootstrap/blob/master/src/bootstrap.c",target:"_blank",rel:"noopener noreferrer"}},[t._v("bootstrap.c"),a("OutboundLink")],1),t._v(" 中，初始化自由的只读全局变量是有一点点不太一样的。他们需要在 BPF skeleton 被加载到内核前就设置好。所以，不能直接使用一个单步的 "),a("code",[t._v("bootstrap_bpf__open_and_load()")]),t._v("。我们需要先使用 "),a("code",[t._v("bootstrap_bpf__open()")]),t._v(" 来创建 skeleton，然后设置只读变量值，再调用 "),a("code",[t._v("bootstrap_bpf__load()")]),t._v(" 把 skeleton 加载到内核里：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Load and verify BPF application */")]),t._v("\n\tskel "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bootstrap_bpf__open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("skel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to open and load BPF skeleton\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Parameterize BPF code with minimum duration parameter */")]),t._v("\n\tskel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("rodata"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("min_duration_ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("min_duration_ms "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000000ULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Load & verify BPF programs */")]),t._v("\n\terr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bootstrap_bpf__load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("skel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fprintf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("stderr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Failed to load and verify BPF skeleton\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("goto")]),t._v(" cleanup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意只读变量是 skeleton 中 "),a("code",[t._v("rodata")]),t._v(" 段的一部分，不是 "),a("code",[t._v("data")]),t._v(" 或 "),a("code",[t._v("bss")]),t._v(" 段，所以是这么取它的： "),a("code",[t._v("skel->rodata->min_duration_ns")]),t._v("。在 BPF skeleton 被加载后，用户空间的的代码只能读取只读变量的值。BPF 代码也只能阅读这些变量。 一旦检测到写只读变量的操作，BPF verifier 将会拒绝 BPF 程序。")]),t._v(" "),a("h3",{attrs:{id:"bpf-ring-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bpf-ring-buffer"}},[t._v("#")]),t._v(" BPF ring buffer")]),t._v(" "),a("p",[a("code",[t._v("bootstrap")]),t._v(" 大量地使用了 BPF ring buffer map 来准备和发送数据到用户空间。它使用了 "),a("code",[t._v("bpf_ringbuf_reserve()")]),t._v("/"),a("code",[t._v("bpf_ringbuf_submit()")]),t._v(" "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-ringbuf/#bpf-ringbuf-reserve-commit-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("combo"),a("OutboundLink")],1),t._v(" 以获得最佳的可用性和性能，可以阅读 "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-ringbuf/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BPF ring buffer 相关博客"),a("OutboundLink")],1),t._v(" 来深入理解。那篇文章深入探究了相似的内容，解读了另一个独立的分支 "),a("a",{attrs:{href:"https://github.com/libbpf/bpf-ringbuf-examples/",target:"_blank",rel:"noopener noreferrer"}},[t._v("bpf-ringbuf-examples"),a("OutboundLink")],1),t._v(" 中的例子。它会给你一个很好的例子，帮助你了解如何使用 BPF perf buffer。")]),t._v(" "),a("h3",{attrs:{id:"bpf-co-re"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bpf-co-re"}},[t._v("#")]),t._v(" BPF CO-RE")]),t._v(" "),a("p",[t._v("BPF CO-RE (Compile Once – Run Everywhere) 是一个很大的话题， "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-portability-and-co-re/",target:"_blank",rel:"noopener noreferrer"}},[t._v("另有一篇博客"),a("OutboundLink")],1),t._v(" 详细描述了它，可以参阅它去理解。这里有一个来自 "),a("code",[t._v("bootstrap.bpf.c")]),t._v(" 中的例子，利用了 BPF CO-RE 特性来从内核的结构体 "),a("code",[t._v("struct task_struct")]),t._v(" 中读取数据：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\te"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ppid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BPF_CORE_READ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" real_parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tgid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在非 BPF 的世界中，可以很简单地写作 "),a("code",[t._v("e->ppid = task->real_parent->tgid;")]),t._v("，但是 BPF verifier 需要付出额外的努力，因为任意地去内核内存是存在风险的。 "),a("code",[t._v("BPF_CORE_READ()")]),t._v(" 就用了一个简洁的方式处理这个问题，它在读取指针对应位置的过程中，记录了 BPF CO-RE 重定位带来的地址偏移，允许 libbpf 将所有字段偏移量调整到宿主机器内核的特定内存布局上。可以参考 "),a("a",{attrs:{href:"https://nakryiko.com/posts/bpf-portability-and-co-re/#reading-kernel-structure-s-fields",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇博客"),a("OutboundLink")],1),t._v(" 来深入了解。")]),t._v(" "),a("h2",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[t._v("#")]),t._v(" Conclusion")]),t._v(" "),a("p",[t._v("这篇文章大概囊括了 "),a("code",[t._v("libbpf-bootstrap")]),t._v(" 和 BPF/libbpf 的方方面面。希望 "),a("code",[t._v("libbpf-bootstrap")]),t._v(" 让你度过 BPF 开发的起步阶段，避免配置环境的痛苦，让你的时间更多地用在 BPF 本身上。对于更有经验的 BPF 开发者，这篇文章应该已经揭示了 BPF 在可用性方面的提升，如 BPF skeleton、BPF ringbuf、BPF CO-RE，以防你没有紧密地追踪 BPF 的最新进展。")]),t._v(" "),a("h2",{attrs:{id:"补充-bpf-map-相关内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充-bpf-map-相关内容"}},[t._v("#")]),t._v(" 补充 BPF Map 相关内容")]),t._v(" "),a("p",[t._v("该部分内容来自本博客之前引用过的一篇文章，"),a("a",{attrs:{href:"https://blog.csdn.net/sinat_38816924/article/details/115607570",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文链接"),a("OutboundLink")],1),t._v(" 。作者是阅读了 "),a("a",{attrs:{href:"https://www.oreilly.com/library/view/linux-observability-with/9781492050193/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux Observability with BPF"),a("OutboundLink")],1),t._v(" 这本书做的笔记，这本书的电子版在 "),a("a",{attrs:{href:"https://z-lib.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Z-Library"),a("OutboundLink")],1),t._v(" 上能找到。")]),t._v(" "),a("p",[t._v("消息传递来唤醒程序的行为，在软件工程中很常见。一个程序可以通过发送消息来修改另一个程序的行为；这也允许这些程序之间交换信息。关于 BPF 最吸引人的一个方面是，运行在内核上的代码和加载所述代码的用户空间程序可以在运行时使用消息传递相互通信。BPF maps 用来实现此功能。BPF maps 是驻留在内核中的键/值存储。任何知道它们的 BPF 程序都可以访问它们。在用户空间中运行的程序也可以使用文件描述符访问这些映射。只要事先正确指定数据大小，就可以在 maps 中存储任何类型的数据。")]),t._v(" "),a("h3",{attrs:{id:"使用bpf系统调用操作-bpf-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用bpf系统调用操作-bpf-maps"}},[t._v("#")]),t._v(" 使用BPF系统调用操作 BPF maps")]),t._v(" "),a("p",[t._v("bpf 系统调用的原型如下：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<linux/bpf.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" cmd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" bpf_attr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("attr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("例如创建一个 hash-table map。其中key和value都是无符号整形。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" bpf_attr my_map "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BPF_MAP_TYPE_HASH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("max_entries "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map_flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BPF_F_NO_PREALLOC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BPF_MAP_CREATE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("my_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("my_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"使用-bpf-helper-创建bpf-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-bpf-helper-创建bpf-maps"}},[t._v("#")]),t._v(" 使用 BPF helper 创建BPF maps")]),t._v(" "),a("p",[t._v("helper函数bpf_map_create包装了刚才看到的代码，以便更容易根据需要初始化映射。我们可以使用它创建上一个map，只需一行代码：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nfd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_create_map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BPF_MAP_TYPE_HASH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("BPF_F_NO_PREALOC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果是将要加载到内核的代码，也可以如下这样创建map。创建原理是："),a("code",[t._v("bpf_load.c")]),t._v(" 扫描目标文件时候，解析到 maps section，会通过 bpf syscall 创建 maps。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_map_def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SEC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"maps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" my_map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BPF_MAP_TYPE_HASH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("max_entries "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map_flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BPF_F_NO_PREALLOC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("用户空间的程序，调用 "),a("code",[t._v("load_bpf_file")]),t._v(" 函数，将 "),a("code",[t._v("bpf")]),t._v(" 程序加载的内核。"),a("code",[t._v("load_bpf_file")]),t._v(" 会扫描 bpf 程序（elf 格式）的各个 section。对于名为 maps 的 section，"),a("code",[t._v("load_bpf_file")]),t._v(" 会从中提取出maps的信息，并调用 "),a("code",[t._v("syscall(__NR_bpf, 0, attr, size);")]),t._v(" 系统调用，创建map。")]),t._v(" "),a("h3",{attrs:{id:"working-with-bfp-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#working-with-bfp-maps"}},[t._v("#")]),t._v(" Working with BFP Maps")]),t._v(" "),a("p",[t._v("内核和用户空间之间的通信将是您编写的每个BPF程序的一个基本部分。给内核编写代码时访问 map 的 api 与给用户空间程序编写代码不同。对于 "),a("code",[t._v("bpf_map_update_elem")]),t._v(" 这个程序：运行在内核的代码从 "),a("code",[t._v("bpf_helpers.h")]),t._v(" 加载；运行在用户空间的代码从"),a("code",[t._v("tools/lib/bpf/bpf.h")]),t._v(" 加载；这样区分的原因是，内核空间可以直接访问 maps；而用户空间访问 maps 需要通过文件描述符。在内核上运行，可以在原子方式更新元素。在用户空间运行的代码，内核需要复制值以用于更新 map。这个非原子操作，可能失败。如果失败，失败原因填充到全局变量 errno 中。")]),t._v(" "),a("p",[t._v("对于5.4内核源码 bpf_helpers.h 的位置如下：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" -name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bpf_helpers.h"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tools/testing/selftests/bpf/bpf_helpers.h")]),t._v("\n")])])]),a("h3",{attrs:{id:"更新元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新元素"}},[t._v("#")]),t._v(" 更新元素")]),t._v(" "),a("p",[t._v("我们先看从内核中更新map的函数。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tools/testing/selftests/bpf/bpf_helpers.h")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bpf_map_update_elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\t  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" BPF_FUNC_map_update_elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// #define BPF_FUNC_map_update_elem 2")]),t._v("\n")])])]),a("p",[t._v("内核中出现这些奇奇怪怪的数字很正常。我暂时不知道这个2是什么鬼。")]),t._v(" "),a("p",[t._v("内核中的 bpf_map_update_elem 函数有四个参数。第一个是指向我们已经定义的 map 的指针。第二个是指向要更新的键的指针。因为内核不知道我们要更新的键的类型，所以这个方法被定义为指向 void 的不透明指针，这意味着我们可以传递任何数据。第三个参数是我们要插入的值。此参数使用与键参数相同的语义。我们在本书中展示了一些如何利用不透明指针的高级示例。您可以使用此函数中的第四个参数来更改map的更新方式。此参数可以采用三个值：")]),t._v(" "),a("p",[t._v("如果传递0，则告诉内核如果元素存在，则要更新该元素；如果元素不存在，则要在映射中创建该元素。[0 可以用 BPF_ANY 宏表示]\n如果传递1，则告诉内核仅在元素不存在时创建该元素。[1 可以用 BPF_NOEXIST 宏表示]\n如果传递2，内核将只在元素存在时更新它。[2 可以用 BPF_EXIST 宏表示]")]),t._v(" "),a("p",[t._v("也可以从用户空间程序中更新 map。执行此操作的帮助程序与我们刚才看到的类似；唯一的区别是，它们使用文件描述符访问 map，而不是直接使用指向 map 的指针。正如您所记得的，用户空间程序总是使用文件描述符访问 map。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tools/lib/bpf/bpf.h")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("LIBBPF_API")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("LIBBPF_API")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("visibility")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\nLIBBPF_API "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_update_elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\t   __u64 flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这里的fd获取方式有两种。第一中，是使用 bpf_create_map 函数返回的 fd。也可以通过全局变量 map_fd 访问。")]),t._v(" "),a("h3",{attrs:{id:"读取元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读取元素"}},[t._v("#")]),t._v(" 读取元素")]),t._v(" "),a("p",[a("code",[t._v("bpf_map_lookup_elem")]),t._v("：从 map 中读取内容。同样，也分为内核空间和用户空间两种形式。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内核空间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tools/testing/selftests/bpf/bpf_helpers.h")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bpf_map_lookup_elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" BPF_FUNC_map_lookup_elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//#define BPF_FUNC_map_lookup_elem 1")]),t._v("\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用户空间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tools/lib/bpf/bpf.h")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("ifndef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[t._v("LIBBPF_API")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("LIBBPF_API")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("visibility")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\nLIBBPF_API "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_lookup_elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("它们的第一个参数也有所不同；内核方法引用映射，而用户空间帮助程序将映射的文件描述符标识符作为其第一个参数。第三个参数是指向代码中要存储从映射中读取的值的变量的指针。")]),t._v(" "),a("h3",{attrs:{id:"删除元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删除元素"}},[t._v("#")]),t._v(" 删除元素")]),t._v(" "),a("p",[t._v("同样有两种：运行在用户空间，运行在内核空间。如果删除的 key 不存在，返回一个负数；error 被设置成 ENOENT。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bpf_map_delete_elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" BPF_FUNC_map_delete_elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("LIBBPF_API "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_delete_elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"迭代遍历元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代遍历元素"}},[t._v("#")]),t._v(" 迭代遍历元素")]),t._v(" "),a("p",[t._v("bpf_map_get_next_key，此指令仅适用于在用户空间上运行的程序。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("LIBBPF_API "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_get_next_key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next_key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("第一个参数：map 的文件描述符。第二个参数：lookup_key，你希望查找的属性值对应的 key。第三个参数：next_key，map 中的 next key。")]),t._v(" "),a("p",[t._v("当您调用这个帮助程序时，BPF 会尝试在这个 map 中找到作为查找键传递的键的元素；然后，它会用映射中相邻的键设置下一个next_key 参数。因此，如果您想知道哪个键在键 1 之后，您需要将 1 设置为 lookup_key，BPF 会将与之相邻的 key 设置为下一个next_key 参数的值。")]),t._v(" "),a("p",[t._v("如果要打印映射中的所有值，可以使用 bpf_map_get_next_key 键和映射中不存在的查找键。这将强制 BPF 从地图的开头开始。")]),t._v(" "),a("p",[t._v("当 bpf_map_get_next_key 到达 map 的末尾时候，返回一个负数，errno 值被设置成 ENOENT。")]),t._v(" "),a("p",[t._v("您可以想象，bpf_map_get_next_key 可以从地图中的任何一点开始查找 key；如果您只希望另一个特定 key 的下一个 key，则不需要从map 的开头开始。")]),t._v(" "),a("p",[t._v("另外，我们还需要知道 bpf_map_get_next_key 的另一个行为。许多编程语言会在迭代遍历之前，复制 map。因为遍历的时候，如果有代码删除将要遍历的元素，将会很危险。bpf_map_get_next_key 遍历的时候，没有复制 map。如果遍历的时候，map 中存在元素被删除，bpf_map_get_next_key 会自动跳过它。")]),t._v(" "),a("h3",{attrs:{id:"查找删除元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找删除元素"}},[t._v("#")]),t._v(" 查找删除元素")]),t._v(" "),a("p",[t._v("bpf_map_lookup_and_delete_elem：一个元素通过 key 进行搜索。搜索到之后，删除这个元素，同时将元素的值放在 value 中。这个也是仅仅适用于用户空间。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("LIBBPF_API "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_lookup_and_delete_elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"并发访问-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发访问-map"}},[t._v("#")]),t._v(" 并发访问 map")]),t._v(" "),a("p",[t._v("使用 BPF 映射的挑战之一是许多程序可以同时访问相同的映射。这会在我们的 BPF 程序中引入竞争条件。为了防止竞争情况，BPF 引入了 BPF 自旋锁的概念，它允许您在对 map 元素进行操作时锁定对 map 元素的访问。自旋锁仅适用于 array、hash 和 cgroup 存 maps。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 信号量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /usr/include/linux")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_spin_lock")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t__u32\tval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内核")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加锁+解锁")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tools/testing/selftests/bpf/bpf_helpers.h")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bpf_spin_lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_spin_lock")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" BPF_FUNC_spin_lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("bpf_spin_unlock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_spin_lock")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" BPF_FUNC_spin_unlock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("我这里复制下书上的事例。这个访问控制，精度比较细。对每一个元素使用了自旋锁。另外这个 map 必须用 BPF 类型格式（BPF Type Format, BTF）注释，这样 verifier 就知道如何解释这个结构。类型格式通过向二进制对象添加调试信息，使内核和其他工具对BPF数据结构有了更丰富的理解。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("concurrent_element")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_spin_lock")]),t._v(" semaphore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_map_def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SEC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"maps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" concurrent_map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BPF_MAP_TYPE_HASH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("concurrent_element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("max_entries "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BPF_ANNOTATE_KV_PAIR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("concurrent_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("concurrent_element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_program")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pt_regs")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("concurrent_element")]),t._v(" init_value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("concurrent_element")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("read_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_create_elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("concurrent_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("init_value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BPF_NOEXIST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    read_value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_map_lookup_elem")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("concurrent_map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_spin_lock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("read_value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("semaphore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    read_value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bpf_spin_unlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("read_value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("semaphore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("用户空间更改 map 的话，使用 "),a("code",[t._v("bpf_map_update_elem")]),t._v(" 和 "),a("code",[t._v("bpf_map_lookup_elem_flags")]),t._v(" 的时候，添加 "),a("code",[t._v("BPF_F_LOCK")]),t._v(" flags。")]),t._v(" "),a("Comment",{attrs:{lang:"zh-CN"}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);