(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{506:function(t,s,a){"use strict";a.r(s);var n=a(12),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"bpf-type-format-btf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bpf-type-format-btf"}},[t._v("#")]),t._v(" BPF Type Format (BTF)")]),t._v(" "),a("p",[t._v("翻译自："),a("a",{attrs:{href:"https://www.kernel.org/doc/html/latest/bpf/btf.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux Kernel Doc"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_1-introduction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-introduction"}},[t._v("#")]),t._v(" 1. Introduction")]),t._v(" "),a("p",[t._v("BTF (BPF Type Format) 是编码 BPF 程序、映射相关的 debug 信息的元数据格式。名称 BTF 最开始是用来描述数据类型的，之后被扩展，包含了预定义的子例程的函数信息以及源码中的 line info。")]),t._v(" "),a("p",[t._v("debug 信息被用来格式化打印和提供函数签名等信息。函数签名优化了 bpf 程序/函数的内核符号。line info 则可以生成经过标注的字节码，jited 代码和验证器记录。")]),t._v(" "),a("p",[t._v("BTF 包含两部分：")]),t._v(" "),a("ul",[a("li",[t._v("BTF kernel API")]),t._v(" "),a("li",[t._v("BTF ELF file format")])]),t._v(" "),a("p",[t._v("内核 API 是用户空间和内核之间沟通的桥梁。内核在使用 BTF 信息之前验证了它。ELF 文件格式则是一个用户空间的 ELF 文件和 libbpf loader 之间的协议。")]),t._v(" "),a("p",[t._v("类型和字符串段是 BTF 内核 API 的一部分，描述了 bpf 程序引用到的（几乎是类型相关的）debug 信息。")]),t._v(" "),a("h2",{attrs:{id:"_2-btf-type-and-string-encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-btf-type-and-string-encoding"}},[t._v("#")]),t._v(" 2. BTF Type and String Encoding")]),t._v(" "),a("p",[t._v("头文件 "),a("code",[t._v("include/uapi/linux/btf.h")]),t._v(" 中提供了类型和字符串是如何编码的高阶定义。")]),t._v(" "),a("p",[t._v("data blob 的开头必须是：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("btf_header")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    __u16   magic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    __u8    version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    __u8    flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    __u32   hdr_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* All offsets are in bytes relative to the end of this header */")]),t._v("\n    __u32   type_off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* offset of type section       */")]),t._v("\n    __u32   type_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* length of type section       */")]),t._v("\n    __u32   str_off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* offset of string section     */")]),t._v("\n    __u32   str_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* length of string section     */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("魔数 "),a("code",[t._v("magic")]),t._v(" 是 "),a("code",[t._v("0xeB9F")]),t._v("，它在大端和小端系统中编码顺序不同，因此可以用来检验 BTF 是由大端还是小端目标机器生成的。"),a("code",[t._v("btf_header")]),t._v(" 被设计成了可拓展的，当 data blob 生成时，它的"),a("code",[t._v("hdr_len")]),t._v(" 等于"),a("code",[t._v("sizeof(struct btf_header)")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_2-1-string-encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-string-encoding"}},[t._v("#")]),t._v(" 2.1 String Encoding")]),t._v(" "),a("p",[t._v("在上面的结构体中，字符串段第一个字符串一定是一个空字符串。字符串表剩下的部分是其他以空字符为结尾的字符串的拼接。")]),t._v(" "),a("h3",{attrs:{id:"_2-2-type-encoding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-type-encoding"}},[t._v("#")]),t._v(" 2.2 Type Encoding")]),t._v(" "),a("p",[t._v("类型 ID  "),a("code",[t._v("0")]),t._v(" 预留给了 "),a("code",[t._v("void")]),t._v(" 类型。类型部分是顺序解析的，并且分配了类型 ID 给可以解析的类型，是从 "),a("code",[t._v("1")]),t._v(" 开始的。目前支持下面这些类型：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_INT")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Integer      */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_PTR")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Pointer      */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_ARRAY")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Array        */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_STRUCT")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Struct       */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_UNION")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Union        */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_ENUM")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Enumeration  */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_FWD")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Forward      */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_TYPEDEF")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Typedef      */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_VOLATILE")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("       ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Volatile     */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_CONST")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Const        */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_RESTRICT")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v("      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Restrict     */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_FUNC")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Function     */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_FUNC_PROTO")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v("      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Function Proto       */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_VAR")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v("      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Variable     */")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("BTF_KIND_DATASEC")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("      ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Section      */")])]),t._v("\n")])])]),a("p",[t._v("注意类型段不只是纯粹的类型信息，还编码了为 debug 而存在的信息。例如 "),a("code",[t._v("BTF_KIND_FUNC")]),t._v(" 就不是一个类型，它代表着一个定义好的程序。每个类型都包含有下面的公共数据：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("btf_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    __u32 name_off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* 32 位的 "info" 变量各位的含义\n     * bits  0-15: vlen (e.g. # of struct\'s members)\n     * bits 16-23: unused\n     * bits 24-27: kind (e.g. int, ptr, array...etc)\n     * bits 28-30: unused\n     * bit     31: kind_flag, currently used by\n     *             struct, union and fwd\n     */')]),t._v("\n    __u32 info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/* "size" is used by INT, ENUM, STRUCT and UNION.\n     * "size" tells the size of the type it is describing.\n     *\n     * "type" is used by PTR, TYPEDEF, VOLATILE, CONST, RESTRICT,\n     * FUNC and FUNC_PROTO.\n     * "type" is a type_id referring to another type.\n     */')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            __u32 size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            __u32 type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("对于特定的类型，公共数据之后就是他们各自独特的数据。 结构体"),a("code",[t._v("struct btf_type")]),t._v("中的"),a("code",[t._v("name_off")]),t._v(" 指定了特定类型在字符串表中的偏移。")]),t._v(" "),a("h2",{attrs:{id:"_3-btf-kernel-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-btf-kernel-api"}},[t._v("#")]),t._v(" 3. BTF Kernel API")]),t._v(" "),a("p",[t._v("下列 bpf 系统调用命令包含了 BTF，除此以外还有很多"),a("a",{attrs:{href:"https://www.kernel.org/doc/html/latest/bpf/btf.html#btf-kernel-api",target:"_blank",rel:"noopener noreferrer"}},[t._v("其他调用"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("p",[t._v("BPF_BTF_LOAD：将一个 blob 的 BTF 数据加载到 kernel 中。")])]),t._v(" "),a("li",[a("p",[t._v("BPF_MAP_CREATE：创建有 BTF 键和类型信息值的映射。")])]),t._v(" "),a("li",[a("p",[t._v("BPF_PROG_LOAD：加载有 BTF 函数和 line 信息的程序。")])]),t._v(" "),a("li",[a("p",[t._v("BPF_BTF_GET_FD_BY_ID：得到一个 BTF 文件描述符 fd。")])]),t._v(" "),a("li",[a("p",[t._v("BPF_OBJ_GET_INFO_BY_FD：该函数将返回 BTF，函数信息，line 信息和其他 BTF 相关信息。")])])]),t._v(" "),a("p",[t._v("工作流通常看上去是这样的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Application:\n    BPF_BTF_LOAD\n        |\n        v\n    BPF_MAP_CREATE and BPF_PROG_LOAD\n        |\n        V\n    ......\n\nIntrospection tool:\n    ......\n    BPF_{PROG,MAP}_GET_NEXT_ID (get prog/map id's)\n        |\n        V\n    BPF_{PROG,MAP}_GET_FD_BY_ID (get a prog/map fd)\n        |\n        V\n    BPF_OBJ_GET_INFO_BY_FD (get bpf_prog_info/bpf_map_info with btf_id)\n        |                                     |\n        V                                     |\n    BPF_BTF_GET_FD_BY_ID (get btf_fd)         |\n        |                                     |\n        V                                     |\n    BPF_OBJ_GET_INFO_BY_FD (get btf)          |\n        |                                     |\n        V                                     V\n    pretty print types, dump func signatures and line info, etc.\n")])])]),a("h2",{attrs:{id:"_4-elf-file-format-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-elf-file-format-interface"}},[t._v("#")]),t._v(" 4. ELF File Format Interface")]),t._v(" "),a("h3",{attrs:{id:"_4-1-btf-section"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-btf-section"}},[t._v("#")]),t._v(" 4.1 .BTF section")]),t._v(" "),a("p",[a("code",[t._v(".BTF")]),t._v(" 段包含着类型数据和字符串数据。这部分的格式和 "),a("a",{attrs:{href:"https://www.kernel.org/doc/html/latest/bpf/btf.html#btf-type-and-string-encoding",target:"_blank",rel:"noopener noreferrer"}},[t._v("2. BTF Type and String Encoding"),a("OutboundLink")],1),t._v(" 中描述的一样。")]),t._v(" "),a("h3",{attrs:{id:"_4-2-btf-ext-section"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-btf-ext-section"}},[t._v("#")]),t._v(" 4.2 .BTF.ext section")]),t._v(" "),a("p",[a("code",[t._v(".BTF.ext")]),t._v(" 段编码了 func_info 和 line_info，需要使用 loader 才会被加载到内核中。")]),t._v(" "),a("p",[a("code",[t._v(".BTF.ext")]),t._v(" 段的详细文档在文件 "),a("code",[t._v("tools/lib/bpf/btf.h")]),t._v(" 和 "),a("code",[t._v("tools/lib/bpf/btf.c")]),t._v("。")]),t._v(" "),a("p",[t._v("当前相关的头文件中的定义如下：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("btf_ext_header")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    __u16   magic"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    __u8    version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    __u8    flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    __u32   hdr_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* All offsets are in bytes relative to the end of this header */")]),t._v("\n    __u32   func_info_off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    __u32   func_info_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    __u32   line_info_off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    __u32   line_info_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("类似于 "),a("code",[t._v(".BTF")]),t._v(" 段， 但是不是 "),a("code",[t._v("string/info")]),t._v(" 段，它包含的是 "),a("code",[t._v("func_info")]),t._v(" 和 "),a("code",[t._v("line_info")]),t._v(" 段。")]),t._v(" "),a("p",[t._v("可以参考 "),a("a",{attrs:{href:"https://www.kernel.org/doc/html/latest/bpf/btf.html#bpf-prog-load",target:"_blank",rel:"noopener noreferrer"}},[t._v("3.3 BPF_PROG_LOAD"),a("OutboundLink")],1),t._v(" 中 "),a("code",[t._v("func_info")]),t._v(" 和 "),a("code",[t._v("line_info")]),t._v(" 的详细信息。")]),t._v(" "),a("p",[a("code",[t._v("func_info")]),t._v(" 如下组织：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func_info_rec_size\nbtf_ext_info_sec for section #1 /* func_info for section #1 */\nbtf_ext_info_sec for section #2 /* func_info for section #2 */\n...\n")])])]),a("p",[t._v("当 "),a("code",[t._v(".BTF.ext")]),t._v(" 生成时，"),a("code",[t._v("func_info_rec_size")]),t._v(" 定义了"),a("code",[t._v("bpf_func_info")]),t._v(" 结构的大小。在下面定义的 "),a("code",[t._v("btf_ext_info_sec")]),t._v(" 是每个特定的 ELF 段中的一系列 "),a("code",[t._v("func_info")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("btf_ext_info_sec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   __u32   sec_name_off"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* offset to section name */")]),t._v("\n   __u32   num_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Followed by num_info * record_size number of bytes */")]),t._v("\n   __u8    data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这里的 "),a("code",[t._v("num_info")]),t._v(" 必须大于 0。")]),t._v(" "),a("p",[a("code",[t._v("line_info")]),t._v(" 如下组织：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("line_info_rec_size\nbtf_ext_info_sec for section #1 /* line_info for section #1 */\nbtf_ext_info_sec for section #2 /* line_info for section #2 */\n...\n")])])]),a("p",[t._v("当 "),a("code",[t._v(".BTF.ext")]),t._v(" 生成时，"),a("code",[t._v("line_info_rec_size")]),t._v(" 定义了 "),a("code",[t._v("bpf_line_info")]),t._v(" 结构的大小。")]),t._v(" "),a("p",[a("code",[t._v("bpf_func_info->insn_off")]),t._v(" 和 "),a("code",[t._v("bpf_line_info->insn_off")]),t._v(" 在内核 API 和 ELF API 中有着不同的阐释。在内核 API 中，"),a("code",[t._v("insn_off")]),t._v(" 是指令在 "),a("code",[t._v("struct bpf_insn")]),t._v(" 内的偏移。对于 ELF API，"),a("code",[t._v("insn_off")]),t._v(" 是相对于段 "),a("code",[t._v("btf_ext_info_sec->sec_name_off")]),t._v("开始的字节偏移。")]),t._v(" "),a("h3",{attrs:{id:"_4-2-btf-ids-section"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-btf-ids-section"}},[t._v("#")]),t._v(" 4.2 .BTF_ids section")]),t._v(" "),a("p",[a("code",[t._v(".BTF_ids")]),t._v(" 段编码了内核中定义的 BTF ID 值。借助头文件 "),a("code",[t._v("include/linux/btf_ids.h")]),t._v(" 中定义的宏，可以在内核编译时创建这一段数据。内核代码能够使用下面的语法来创建 BTF ID 值的列表和有序列表：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_ID_LIST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这将会生成下面的  .BTF_ids 段的布局：")]),t._v(" "),a("div",{staticClass:"language-assembly extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("__BTF_ID__type1__name1__1:\n.zero 4\n__BTF_ID__type2__name2__2:\n.zero 4\n")])])]),a("p",[a("code",[t._v("u32 list[];")]),t._v(" 变量被定义来获取列表。")]),t._v(" "),a("p",[a("code",[t._v("BTF_ID_UNUSED")]),t._v(" 宏定义了四个零字节。当我们想要在 BTF_ID_LIST 中定义 unused entry，可以这样做：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_ID_LIST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bpf_skb_output_btf_ids"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sk_buff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nBTF_ID_UNUSED\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" task_struct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("BTF_SET_START/END")]),t._v(" 这一对宏定义了有序列表 BTF ID 值和它们的计数值，它的语法如下：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_SET_START")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BTF_SET_END")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这将会生成下面的  .BTF_ids 段的布局：")]),t._v(" "),a("div",{staticClass:"language-assembly extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("A__BTF_ID__set__set:\n.zero 4\n__BTF_ID__type1__name1__3:\n.zero 4\n__BTF_ID__type2__name2__4:\n.zero 4\n")])])]),a("p",[a("code",[t._v("struct btf_id_set set;")]),t._v(" 变量可以获取到列表。"),a("code",[t._v("typeX")]),t._v(" 名字可以是下面的任一项：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" func\n")])])]),a("p",[t._v("并且可以被用来在解析 BTF ID 值的时候作为过滤器使用。所有的 BTF ID 列表和有序列表都被编译到了 "),a("code",[t._v(".BTF_ids")]),t._v(" 段，它在"),a("code",[t._v("resolve_btfids")]),t._v("构建出的内核的链接阶段解析。")]),t._v(" "),a("h2",{attrs:{id:"_5-using-btf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-using-btf"}},[t._v("#")]),t._v(" 5. Using BTF")]),t._v(" "),a("h3",{attrs:{id:"_5-1-bpftool-map-pretty-print"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-bpftool-map-pretty-print"}},[t._v("#")]),t._v(" 5.1 bpftool map pretty print")]),t._v(" "),a("p",[t._v("借助 BTF，映射的健值能够以域的形式打印出来，而不是仅仅打印出裸字节。这对于大型的结构或是你的数据结构中各比特位有独立意义时很有价值。例如下面的映射：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" A1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A5 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" ___A"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tmp_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" a1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("  a2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     __u32 a3"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     ___A b1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" b2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("bpf_map_def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SEC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"maps"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" tmpmap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BPF_MAP_TYPE_ARRAY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__u32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value_size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tmp_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("max_entries "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BPF_ANNOTATE_KV_PAIR")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tmpmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tmp_t")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("可以这样使用 bpftool 来优雅地打印：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"key"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"a1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 0x2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"a2"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 0x4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"a3"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 0x6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"b"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"b1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 0x8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"b2"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 0xa\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5-2-bpftool-prog-dump"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-bpftool-prog-dump"}},[t._v("#")]),t._v(" 5.2 bpftool prog dump")]),t._v(" "),a("p",[t._v("下面的例子展示了 func_info 和 line_info 能够更好地帮助 dump 出内核符号名称、函数原型和 line 信息：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ bpftool prog dump jited pinned /sys/fs/bpf/test_btf_haskv\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nint test_long_fname_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("struct dummy_tracepoint_args * arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\nbpf_prog_44a040bf25481309_test_long_fname_2:\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" static int test_long_fname_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("struct dummy_tracepoint_args *arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":   push   %rbp\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(":   mov    %rsp,%rbp\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(":   sub    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0x30")]),t._v(",%rsp\n   b:   sub    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0x28")]),t._v(",%rbp\n   f:   mov    %rbx,0x0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("%rbp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(":   mov    %r13,0x8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("%rbp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(":   mov    %r14,0x10"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("%rbp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  1b:   mov    %r15,0x18"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("%rbp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  1f:   xor    %eax,%eax\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(":   mov    %rax,0x20"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("%rbp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v(":   xor    %esi,%esi\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" int key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v(":   mov    %esi,-0x4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("%rbp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("arg-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("sock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  2a:   mov    0x8"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("%rdi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(",%rdi\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("arg-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("sock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  2e:   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cmp")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$0x0")]),t._v(",%rdi\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v(":   je     0x0000000000000070\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("34")]),t._v(":   mov    %rbp,%rsi\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" counts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bpf_map_lookup_elem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("btf_map, "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5-3-verifier-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-verifier-log"}},[t._v("#")]),t._v(" 5.3 Verifier Log")]),t._v(" "),a("p",[t._v("下面的例子展示了 line_info 是如何帮助 debug 验证错误的：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("   /* The code at tools/testing/selftests/bpf/test_xdp_noinline.c\n    * is modified as below.\n    */\n   data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("long"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("xdp-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   data_end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("long"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("xdp-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("data_end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   /*\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data + "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" data_end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" XDP_DROP"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   */\n   *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u32 *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dst-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("dst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n$ bpftool prog load ./test_xdp_noinline.o /sys/fs/bpf/test_xdp_noinline "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" xdp\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("void *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("long"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("xdp-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("224")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("79")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" r2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u64 *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r10 -112"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("225")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("61")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" r2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u32 *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r2 +0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u32 *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dst-"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("dst"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("226")]),t._v(": "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("63")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u32 *"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r2 +0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r1\n    invalid access to packet, "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("off")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(", R2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(",off"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(",r"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    R2 offset is outside of the packet\n")])])]),a("h2",{attrs:{id:"_6-btf-generation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-btf-generation"}},[t._v("#")]),t._v(" 6. BTF Generation")]),t._v(" "),a("p",[t._v("你需要使用最新的 "),a("a",{attrs:{href:"https://git.kernel.org/pub/scm/devel/pahole/pahole.git/",target:"_blank",rel:"noopener noreferrer"}},[t._v("pahole"),a("OutboundLink")],1),t._v(" 或 8.0 版本以上的 llvm来生成 BTF。")]),t._v(" "),a("p",[t._v("pahole 是一个 dwarf2btf 转换器，它还不支持 "),a("code",[t._v(".BTF.ext")]),t._v(" 和 "),a("code",[t._v("btf")]),t._v(" "),a("code",[t._v("BTF_KIND_FUNC")]),t._v(" 类型。例如：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("-bash-4.4$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" t.c\nstruct t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  int a:2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  int b:3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  int c:2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n-bash-4.4$ gcc -c -O2 -g t.c\n-bash-4.4$ pahole -JV t.o\nFile t.o:\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" STRUCT t "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("kind_flag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("vlen")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n        a "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("type_id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("bitfield_size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("bits_offset")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        b "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("type_id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("bitfield_size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("bits_offset")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n        c "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("type_id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("bitfield_size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("bits_offset")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" INT int "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("bit_offset")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("nr_bits")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("encoding")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("SIGNED\n")])])]),a("p",[t._v("llvm 能够直接生成 "),a("code",[t._v(".BTF")]),t._v(" 和 "),a("code",[t._v(".BTF.ext")]),t._v("，选项是 -g，目标选项是 bpf。 使用 readelf 工具的 -S 选项能够显示出汇编格式的 BTF 代码：")]),t._v(" "),a("div",{staticClass:"language-asm extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('-bash-4.4$ cat t2.c\ntypedef int __int32;\nstruct t2 {\n  int a2;\n  int (*f2)(char q1, __int32 q2, ...);\n  int (*f3)();\n} g2;\nint main() { return 0; }\nint test() { return 0; }\n-bash-4.4$ clang -c -g -O2 -target bpf t2.c\n-bash-4.4$ readelf -S t2.o\n  ......\n  [ 8] .BTF              PROGBITS         0000000000000000  00000247\n       000000000000016e  0000000000000000           0     0     1\n  [ 9] .BTF.ext          PROGBITS         0000000000000000  000003b5\n       0000000000000060  0000000000000000           0     0     1\n  [10] .rel.BTF.ext      REL              0000000000000000  000007e0\n       0000000000000040  0000000000000010          16     9     8\n  ......\n-bash-4.4$ clang -S -g -O2 -target bpf t2.c\n-bash-4.4$ cat t2.s\n  ......\n        .section        .BTF,"",@progbits\n        .short  60319                   # 0xeb9f\n        .byte   1\n        .byte   0\n        .long   24\n        .long   0\n        .long   220\n        .long   220\n        .long   122\n        .long   0                       # BTF_KIND_FUNC_PROTO(id = 1)\n        .long   218103808               # 0xd000000\n        .long   2\n        .long   83                      # BTF_KIND_INT(id = 2)\n        .long   16777216                # 0x1000000\n        .long   4\n        .long   16777248                # 0x1000020\n  ......\n        .byte   0                       # string offset=0\n        .ascii  ".text"                 # string offset=1\n        .byte   0\n        .ascii  "/home/yhs/tmp-pahole/t2.c" # string offset=7\n        .byte   0\n        .ascii  "int main() { return 0; }" # string offset=33\n        .byte   0\n        .ascii  "int test() { return 0; }" # string offset=58\n        .byte   0\n        .ascii  "int"                   # string offset=83\n  ......\n        .section        .BTF.ext,"",@progbits\n        .short  60319                   # 0xeb9f\n        .byte   1\n        .byte   0\n        .long   24\n        .long   0\n        .long   28\n        .long   28\n        .long   44\n        .long   8                       # FuncInfo\n        .long   1                       # FuncInfo section string offset=1\n        .long   2\n        .long   .Lfunc_begin0\n        .long   3\n        .long   .Lfunc_begin1\n        .long   5\n        .long   16                      # LineInfo\n        .long   1                       # LineInfo section string offset=1\n        .long   2\n        .long   .Ltmp0\n        .long   7\n        .long   33\n        .long   7182                    # Line 7 Col 14\n        .long   .Ltmp3\n        .long   7\n        .long   58\n        .long   8206                    # Line 8 Col 14\n')])])]),t._v(" "),a("Comment",{attrs:{lang:"zh-CN"}})],1)}),[],!1,null,null,null);s.default=e.exports}}]);