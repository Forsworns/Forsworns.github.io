import{_ as s,c as a,o as l,e as n}from"./app.a19c101b.js";const D=JSON.parse('{"title":"使用Alias命令接收参数","description":"通过在定义函数使得alias命令接收参数","frontmatter":{"title":"使用Alias命令接收参数","description":"通过在定义函数使得alias命令接收参数","tags":["unix","shell"]},"headers":[],"relativePath":"zh/blogs/20190919/index.md"}'),o={name:"zh/blogs/20190919/index.md"},p=n(`<h1 id="使用alias命令接收参数" tabindex="-1">使用Alias命令接收参数 <a class="header-anchor" href="#使用alias命令接收参数" aria-hidden="true">#</a></h1><p>因为实习的缘故，系统得学习了一下shell命令，在练习时，因为每次新建脚本后需要添加执行权限还要用到</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">touch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx.sh</span></span>
<span class="line"><span style="color:#FFCB6B;">chmod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+x</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx.sh</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># chmod 777 xxx.sh</span></span>
<span class="line"></span></code></pre></div><p>比较麻烦，所以想把上面的命令别名成</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">alias</span><span style="color:#A6ACCD;"> touchs</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">touch </span><span style="color:#A6ACCD;font-style:italic;">$1</span><span style="color:#C3E88D;">;chmod +x </span><span style="color:#A6ACCD;font-style:italic;">$1</span><span style="color:#C3E88D;">;</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>但是执行后，再次执行<code>alias</code>查看更改，发现变成了</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">alias</span><span style="color:#A6ACCD;"> touchs</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">touch ;chmod +x ;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>以为是双引号的缘故（双引号字符串进行转义且转换参数），换成了</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">alias</span><span style="color:#A6ACCD;"> touchs</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">touch $1;chmod +x $1;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>但是还是不对，查阅后发现需要使用定义函数的方式曲线救国，这样执行定义的<code>touchs</code>的时候就是在执行一个函数了，那么参数就被传到了函数中（注意函数的参数也是从<code>$1</code>开始的，<code>$0</code>是函数名。</p><p>所以正确的方法应该是</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">alias</span><span style="color:#A6ACCD;"> touchs</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">touch_script(){ touch $1;chmod +x $1;};touch_script</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>永久更改需要在<code>~/.bashrc</code>中添加上面的语句。</p></div>`,13),e=[p];function c(t,i,r,d,h,y){return l(),a("div",null,e)}const u=s(o,[["render",c]]);export{D as __pageData,u as default};
