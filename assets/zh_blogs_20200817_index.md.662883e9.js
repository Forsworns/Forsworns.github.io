import{_ as e,c as o,o as s,e as n}from"./app.bbbac65d.js";const y=JSON.parse('{"title":"学习rCore","description":"参考rCore教程用Rust写一个简单的内核","frontmatter":{"title":"学习rCore","description":"参考rCore教程用Rust写一个简单的内核","tags":["Rust"]},"headers":[{"level":2,"title":"第一章 独立可执行程序","slug":"第一章-独立可执行程序","link":"#第一章-独立可执行程序","children":[]},{"level":2,"title":"第二章 最小化内核","slug":"第二章-最小化内核","link":"#第二章-最小化内核","children":[]}],"relativePath":"zh/blogs/20200817/index.md"}'),a={name:"zh/blogs/20200817/index.md"},l=n(`<h1 id="学习rcore" tabindex="-1">学习rCore <a class="header-anchor" href="#学习rcore" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#第一章-独立可执行程序">第一章 独立可执行程序</a></li><li><a href="#第二章-最小化内核">第二章 最小化内核</a></li></ul></nav><p>之前花了好长时间去读<a href="https://doc.rust-lang.org/book/#the-rust-programming-language" target="_blank" rel="noreferrer">The Rust Programming Language</a>，写了写书里的实例，也在LeetCode上用Rust<a href="https://github.com/Forsworns/OJ_Diary" target="_blank" rel="noreferrer">写了一些题</a>，但是一直没有动手做一个项目。</p><p>最近发现同学在github上点赞了rCore项目，再次感叹人与人的差距，这就是强者的os课设么。网抑云，启动！我os课设计当时写的是调度器，现在想起来能跑起来都是一件神奇的事情。当时也没有记笔记的习惯，现在基本忘光了，这次就边学习边记录一下，内容基本都来源于<a href="https://rcore-os.github.io/rCore_tutorial_doc/" target="_blank" rel="noreferrer">rCore的教程</a>。也算激励自己学习（狒狒14太好玩了不想写代码了orz）。</p><h2 id="第一章-独立可执行程序" tabindex="-1">第一章 独立可执行程序 <a class="header-anchor" href="#第一章-独立可执行程序" aria-hidden="true">#</a></h2><ul><li><p>使用nightly的Rust需要指定版本确保<a href="https://stackoverflow.com/questions/2171177/what-is-an-application-binary-interface-abi/2456882" target="_blank" rel="noreferrer">ABI</a>稳定性，需要在工作目录下建一个名为 <code>rust-toolchain</code> 的文件，写入如<code>nightly-2020-01-27</code>的工具链版本。</p></li><li><p><code>rustup show</code>或<code>rustc --version</code>查看Rust版本。</p></li><li><p><code>cargo new --bin</code>和<code>cargo new --lib</code>分别创建binary和library项目。</p></li><li><p>使用<code>#![no_std]</code>禁用标准库，这类宏只能置于文件头部；之后需要实现错误处理，使用宏<code>#[panic_handler]</code>并实现<code>panic</code>函数。</p></li><li><p>在<code>Cargo.toml</code>中禁用exception handling</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">profile</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">dev</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># cargo build</span></span>
<span class="line"><span style="color:#A6ACCD;">panic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abort</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">profile</span><span style="color:#A6ACCD;">.</span><span style="color:#FFCB6B;">release</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># cargo build --release</span></span>
<span class="line"><span style="color:#A6ACCD;">panic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">abort</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div></li><li><p>移除runtime system（链接到标准库的rust程序会先跳转到 C runtime library 中的 <strong>crt0(C runtime zero)</strong> 进入 C runtime 设置 C 程序运行所需要的环境(比如：创建堆栈，设置寄存器参数等，之后跳转到 Rust runtime 的 <strong>入口点(entry point)</strong> 进入 Rust runtime 继续设置）。使用<code>#![no_main]</code>移除后并去除main函数后，显式地添加C runtime的入口，C语言函数<code>_start()</code>，并使用宏<code>#[no_mangle]</code>防止编译器改变函数名。</p></li><li><p>用rustc编译时，<code>cargo rustc -- -C link-arg=-nostartfiles</code>可以防止链接到C runtime。注意前一个<code>--</code>是cargo的参数，后面的是编译器rustc的参数。</p></li></ul><h2 id="第二章-最小化内核" tabindex="-1">第二章 最小化内核 <a class="header-anchor" href="#第二章-最小化内核" aria-hidden="true">#</a></h2><ul><li><p>Rust的编译需要指定目标元组：（cpu 架构、供应商、操作系统和 ABI），如<code>x86_64-unknown-linux-gnu</code>。使用<code>rustc --version --verbose</code>可以查看当前默认的目标平台，使用<code>rustc -Z unstable-options --print target-spec-json --target x86_64-unknown-linux-gnu</code>。</p></li><li><p>rCore使用了riscv，因此需要用<code>cargo build --target riscv64imac-unknown-none-elf</code>命令或直接在<code>.cargo/config</code>中写入</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">build</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">target </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">riscv64imac-unknown-none-elf</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>来为项目设置目标三元组。</p></li><li><p>使用<code>cargo install cargo-binutils</code>和<code>rustup component add llvm-tools-preview</code>安装binutils命令行工具，以使用objdump、objcopy等工具。</p><p>具体得，使用file工具查看文件类型等信息；使用 <code>rust-objdump target/riscv64imac-unknown-none-elf/debug/xxx -x --arch-name=riscv64</code>查看文件元信息，使用<code>-d</code>则可进行反汇编；使用<code>rust-objcopy target/riscv64imac-unknown-none-elf/debug/xxx --strip-all -O binary target/riscv64imac-unknown-none-elf/debug/kernel.bin</code>丢弃所有符号表及调试信息，生成二进制内核镜像文件。</p></li><li></li></ul>`,8),r=[l];function t(c,p,i,d,u,g){return s(),o("div",null,r)}const C=e(a,[["render",t]]);export{y as __pageData,C as default};
