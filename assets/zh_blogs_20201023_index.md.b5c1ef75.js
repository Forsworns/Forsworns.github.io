import{_ as s,c as a,o as n,e as l}from"./app.76aadb6e.js";const A=JSON.parse('{"title":"WebRTC折腾笔记","description":"WebRTC on WSL2 Ubuntu2 折腾笔记","frontmatter":{"title":"WebRTC折腾笔记","description":"WebRTC on WSL2 Ubuntu2 折腾笔记","tags":["配环境"]},"headers":[{"level":2,"title":"Android环境搭建","slug":"android环境搭建","link":"#android环境搭建","children":[]}],"relativePath":"zh/blogs/20201023/index.md"}'),o={name:"zh/blogs/20201023/index.md"},p=l(`<h1 id="webrtc-on-wsl2-ubuntu2-折腾笔记" tabindex="-1">WebRTC on WSL2 Ubuntu2 折腾笔记 <a class="header-anchor" href="#webrtc-on-wsl2-ubuntu2-折腾笔记" aria-hidden="true">#</a></h1><nav class="table-of-contents"><ul><li><a href="#android环境搭建">Android环境搭建</a></li></ul></nav><p>WebRTC的安卓开发环境只能在Linux系统上使用，因此我在Windows下的WSL2中搭建了环境，我的WSL2安装的是Ubuntu20，在搭建过程中遇到了一些坑，记录下来。部分内容参考自<a href="https://www.cnblogs.com/hejunlin/p/12526727.html" target="_blank" rel="noreferrer">博客</a>。</p><h2 id="android环境搭建" tabindex="-1">Android环境搭建 <a class="header-anchor" href="#android环境搭建" aria-hidden="true">#</a></h2><p>首先我们需要参考<a href="https://webrtc.googlesource.com/src/+/refs/heads/master/docs/native-code/android/index.md" target="_blank" rel="noreferrer">官方文档</a>，发现需要先安装<a href="https://webrtc.googlesource.com/src/+/refs/heads/master/docs/native-code/development/prerequisite-sw/index.md" target="_blank" rel="noreferrer">prerequisite software</a></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://chromium.googlesource.com/chromium/tools/depot_tools.git</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> PATH</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">/path/to/depot_tools:</span><span style="color:#A6ACCD;">$PATH </span><span style="color:#676E95;font-style:italic;"># 建议写入~/.bashrc</span></span>
<span class="line"></span></code></pre></div><p>接着运行</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--nohooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webrtc_android</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 会下很久……万幸有输出会提示没断开连接</span></span>
<span class="line"><span style="color:#FFCB6B;">gclient</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--nohooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sync</span></span>
<span class="line"><span style="color:#FFCB6B;">gclient</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">runhooks</span></span>
<span class="line"></span></code></pre></div><p>在这一步WSL2需要配置代理，同时后面用到<code>download_google_storage</code>也可能有代理问题，所以同时最好给gclient单独配置<code>your_webrtc_directory/http_proxy.boto</code>文件设置代理规则，建议将下述命令写入<code>~/.bashrc</code></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> hostip</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">cat</span><span style="color:#C3E88D;"> /etc/resolv.conf </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">grep</span><span style="color:#C3E88D;"> -oP </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">(?&lt;=nameserver\\ ).*</span><span style="color:#89DDFF;">&#39;)</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[Boto]\\nproxy = </span><span style="color:#89DDFF;">\${</span><span style="color:#C3E88D;">hostip</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">\\nproxy_port = 8888</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">your_webrtc_directory/http_proxy.boto</span></span>
<span class="line"><span style="color:#C792EA;">alias</span><span style="color:#A6ACCD;"> setss</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">export https_proxy=&quot;http://\${hostip}:8888&quot;;export http_proxy=&quot;http://\${hostip}:8888&quot;;export all_proxy=&quot;http://\${hostip}:8888&quot;;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>之后在windows中打开SSR/V2Ray/Clash等代理工具，设置允许本地代理，选择允许来自局域网的连接，将端口设置到8888，运行<code>source ~/.bashrc</code>和<code>setss</code>，设置WSL2下的代理规则。</p><p>在运行<code>gclient runhook</code>时，Ubuntu20中因为没有安装python2.7会报相关错误，<code>sudo apt install python</code>后解决。</p><p>重新运行<code>gclient runhook</code>，接着会产生无法下载debian_sid_i386-sysroot的问题，这是DNS有问题，直接在浏览器打开<a href="https://commondatastorage.googleapis.com/chrome-linux-sysroot/toolchain/d967bcef40477dbc39acef141ff22bf73f3e7cdb/debian_sid_i386_sysroot.tar.xz" target="_blank" rel="noreferrer">下载链接</a>也下载不到。修改Windows下无线网卡的DNS为谷歌的8.8.8.8/8.8.4.4后，可以在浏览器中下载到，移动到了<code>your_webrtc_directory/src/build/linux/debian_sid_i386-sysroot</code>中，修改<code>your_webrtc_directory/src/build/linux/sysroot_scripts/install-sysroot.py</code>为</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">tarball </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sysroot</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> tarball_filename</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">not</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exists</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tarball</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 检查是否已经有了 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isdir</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sysroot</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        shutil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rmtree</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">sysroot</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		……</span></span>
<span class="line"><span style="color:#A6ACCD;">        response </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">urlopen</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">url</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 或者在这里设置代理为hostip:8888也行</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">tarball</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  		……</span></span>
<span class="line"></span></code></pre></div><p>重新运行<code>gclient runhook</code>，同样方法处理之后的amd64 sysroot下载不到的问题。之后可能会有clang-llvm的安装问题，通过在Windows下的代理中设置DNS为谷歌的8.8.8.8后解决。</p><p>之后的就都正常下载下来了，如果出问题，重新跑一下<code>setss</code>。</p><p>之后开始安装编译过程中必要的工具</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 在your_webrtc_directory下</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">build/install-build-deps-android.sh</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">gn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gen</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">out/Debug</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--args=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">target_os=&quot;android&quot; target_cpu=&quot;arm&quot;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">autoninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">out/Debug</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 会花费很长时间</span></span>
<span class="line"><span style="color:#FFCB6B;">autoninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">out/Debug</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AppRTCMobile</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 只编译AppRTCMobile</span></span>
<span class="line"></span></code></pre></div><p>至此，编译完成了！</p><p>切换到Release m85，之后固定在这个版本</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">m85</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">refs/remotes/branch-heads/</span><span style="color:#F78C6C;">4183</span></span>
<span class="line"></span></code></pre></div><h1 id="linux环境搭建" tabindex="-1">Linux环境搭建 <a class="header-anchor" href="#linux环境搭建" aria-hidden="true">#</a></h1><p>项目结构和上面类似，但是有一些example没有，也不知道别的有没有区别……就直接重新搭建了一份</p><p>过程类似，因为depot_tools安过了，所以第一步可以跳过了</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--nohooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webrtc_android</span></span>
<span class="line"><span style="color:#FFCB6B;">gclient</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--nohooks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sync</span></span>
<span class="line"><span style="color:#FFCB6B;">gclient</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">runhooks</span></span>
<span class="line"></span></code></pre></div><p>同样会遇到root image下不到的情况，类似上面可以处理掉</p><p>之后使用GN生产Ninja编译配置文件</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">gn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gen</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">out/Default</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># gn gen out/Default --args=&#39;is_debug=false&#39; # release version</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># gn clean out/Default # clean builds</span></span>
<span class="line"><span style="color:#FFCB6B;">ninja</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">out/Default</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># compile</span></span>
<span class="line"></span></code></pre></div><p>切换到Release m85，之后固定在这个版本</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">m85</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">refs/remotes/branch-heads/</span><span style="color:#F78C6C;">4183</span></span>
<span class="line"></span></code></pre></div><p>在<code>src</code>目录下查看一下文件大小</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">du</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--max-depth=1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-h</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">27M     ./data</span></span>
<span class="line"><span style="color:#A6ACCD;">17G     ./third_party</span></span>
<span class="line"><span style="color:#A6ACCD;">1.9M    ./p2p</span></span>
<span class="line"><span style="color:#A6ACCD;">968K    ./rtc_tools</span></span>
<span class="line"><span style="color:#A6ACCD;">9.9M    ./sdk</span></span>
<span class="line"><span style="color:#A6ACCD;">1.3M    ./call</span></span>
<span class="line"><span style="color:#A6ACCD;">4.3M    ./rtc_base</span></span>
<span class="line"><span style="color:#A6ACCD;">104K    ./stats</span></span>
<span class="line"><span style="color:#A6ACCD;">4.3M    ./pc</span></span>
<span class="line"><span style="color:#A6ACCD;">4.3G    ./out</span></span>
<span class="line"><span style="color:#A6ACCD;">502M    ./examples</span></span>
<span class="line"><span style="color:#A6ACCD;">325M    ./.git</span></span>
<span class="line"><span style="color:#A6ACCD;">164K    ./docs</span></span>
<span class="line"><span style="color:#A6ACCD;">2.8M    ./video</span></span>
<span class="line"><span style="color:#A6ACCD;">696K    ./audio</span></span>
<span class="line"><span style="color:#A6ACCD;">948K    ./logging</span></span>
<span class="line"><span style="color:#A6ACCD;">83M     ./base</span></span>
<span class="line"><span style="color:#A6ACCD;">188K    ./system_wrappers</span></span>
<span class="line"><span style="color:#A6ACCD;">92M     ./buildtools</span></span>
<span class="line"><span style="color:#A6ACCD;">49M     ./testing</span></span>
<span class="line"><span style="color:#A6ACCD;">1.9M    ./media</span></span>
<span class="line"><span style="color:#A6ACCD;">1.5M    ./tools_webrtc</span></span>
<span class="line"><span style="color:#A6ACCD;">6.7M    ./test</span></span>
<span class="line"><span style="color:#A6ACCD;">640M    ./build</span></span>
<span class="line"><span style="color:#A6ACCD;">20K     ./build_overrides</span></span>
<span class="line"><span style="color:#A6ACCD;">1.4G    ./resources</span></span>
<span class="line"><span style="color:#A6ACCD;">1.3M    ./common_audio</span></span>
<span class="line"><span style="color:#A6ACCD;">12K     ./style-guide</span></span>
<span class="line"><span style="color:#A6ACCD;">368K    ./common_video</span></span>
<span class="line"><span style="color:#A6ACCD;">1.1G    ./tools</span></span>
<span class="line"><span style="color:#A6ACCD;">2.8M    ./api</span></span>
<span class="line"><span style="color:#A6ACCD;">20M     ./modules</span></span>
<span class="line"><span style="color:#A6ACCD;">25G     .</span></span>
<span class="line"></span></code></pre></div><p>过滤掉大的、没必要改动的文件夹</p><h1 id="android-studio配置" tabindex="-1">Android Studio配置 <a class="header-anchor" href="#android-studio配置" aria-hidden="true">#</a></h1><p>官网上的方法已经标出了无法使用，推荐直接将<code>src/examples/androidapp/</code>下的代码拷贝出来。</p><p>用Android Studio创建一个项目，创建时<code>minSdkVersion</code>设置为21而不是默认的16，因为webrtc包不支持更低的版本。package name建议设置成了<code>org.appspot.apprtc</code>，在Android Studio项目目录结构中，把<code>src/examples/androidapp/</code>下的文件放到对应位置。注意 <code>src/examples/androidapp/third_party/autobanh/lib/autobanh.jar</code>文件需要拷贝到 <code>src/libs</code> 目录下，<code>third_party</code>中的其他文件可以删掉了。其他的比如<code>build.gradle</code>在<code>app</code> Module下，<code>res</code>文件夹是在<code>src/main</code>下，<code>org</code>放到<code>src/main/java</code>下。</p><p>这时需要用Android Studio的Refactor选项中的Migrate to AndroidX，升级陈旧的依赖。但是这里有个坑是Nullable注解依赖不会自动更新，所以需要将java源代码中所有的<code>import android.support.annotation.Nullable;</code>替换为<code>import androidx.annotation.Nullable;</code>。然后sync一下gradle，就可以build了。</p>`,37),e=[p];function t(c,r,i,y,C,d){return n(),a("div",null,e)}const F=s(o,[["render",t]]);export{A as __pageData,F as default};
