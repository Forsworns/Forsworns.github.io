import{_ as s,c as e,o as n,e as a}from"./app.3be36d2c.js";const l="/assets/boot_mode.c287f2c0.png",t="/assets/STM32MP1IPsOverview_legend.daaac184.png",o="/assets/STM32MP1IPsOverview.9194654b.png",p="/assets/STM32CubeMPUPackageArchitecture.c7f1248a.png",r="/assets/simplex.f029594f.png",i="/assets/half_duplex.2a921ae5.png",c="/assets/IPCC_overview.3f7a1417.png",d="/assets/Mailbox_overview.a9d995d8.png",C="/assets/Rpmsg_overview.0ca38f59.png",A="/assets/Remoteproc_overview.81793eb9.png",u="/assets/boot_photo.494d30da.png",y="/assets/Arm_to_pru.700986ee.png",T=JSON.parse('{"title":"STM32MP157A和IPCC","description":"开发板学习","frontmatter":{"title":"STM32MP157A和IPCC","description":"开发板学习","tags":["嵌入式","配环境"]},"headers":[{"level":2,"title":"开发板、STM32CubeIDE 注意点备忘（实践相关，很乱，放前面是为了自己快点看到，读者可以先跳过）","slug":"开发板、stm32cubeide-注意点备忘-实践相关-很乱-放前面是为了自己快点看到-读者可以先跳过","link":"#开发板、stm32cubeide-注意点备忘-实践相关-很乱-放前面是为了自己快点看到-读者可以先跳过","children":[]},{"level":2,"title":"硬件","slug":"硬件","link":"#硬件","children":[]},{"level":2,"title":"软件工具","slug":"软件工具","link":"#软件工具","children":[]},{"level":2,"title":"STM32学习笔记","slug":"stm32学习笔记","link":"#stm32学习笔记","children":[{"level":3,"title":"Cortex M4","slug":"cortex-m4","link":"#cortex-m4","children":[]},{"level":3,"title":"Cortex A7","slug":"cortex-a7","link":"#cortex-a7","children":[]},{"level":3,"title":"利用 OpenAMP 的多核协同工作（A7 和 M4 通信）","slug":"利用-openamp-的多核协同工作-a7-和-m4-通信","link":"#利用-openamp-的多核协同工作-a7-和-m4-通信","children":[]},{"level":3,"title":"相关数据结构：","slug":"相关数据结构","link":"#相关数据结构","children":[]}]},{"level":2,"title":"Tiny OS 移植","slug":"tiny-os-移植","link":"#tiny-os-移植","children":[]}],"relativePath":"zh/blogs/20210223/index.md"}'),h={name:"zh/blogs/20210223/index.md"},_=a(`<nav class="table-of-contents"><ul><li><a href="#开发板、stm32cubeide-注意点备忘-实践相关-很乱-放前面是为了自己快点看到-读者可以先跳过">开发板、STM32CubeIDE 注意点备忘（实践相关，很乱，放前面是为了自己快点看到，读者可以先跳过）</a></li><li><a href="#硬件">硬件</a></li><li><a href="#软件工具">软件工具</a></li><li><a href="#stm32学习笔记">STM32学习笔记</a><ul><li><a href="#cortex-m4">Cortex M4</a></li><li><a href="#cortex-a7">Cortex A7</a></li><li><a href="#利用-openamp-的多核协同工作-a7-和-m4-通信">利用 OpenAMP 的多核协同工作（A7 和 M4 通信）</a></li><li><a href="#相关数据结构">相关数据结构：</a></li></ul></li><li><a href="#tiny-os-移植">Tiny OS 移植</a></li></ul></nav><h1 id="stm32mp157a和ipcc" tabindex="-1">STM32MP157A和IPCC <a class="header-anchor" href="#stm32mp157a和ipcc" aria-hidden="true">#</a></h1><p>STM32MP157 是基于 ARM 的 32 位的 MPU，很多厂商都基于这个 MPU 包装了开发板，这类板子很有意思的地方在于 ST 的这款 MPU 搭载了两个处理器，其中一个包含两颗 ARM Cortex A7，另一个则是单个 ARM Cortex M4。前者可以用来运行 Linux，且具有可信执行环境；后者一般用来管理传感器或可以运行一些实时物联网操作系统，比如 RTOS、TencentOS-tiny 等。</p><p>关于MPU和MCU的区别，参考了<a href="https://zhuanlan.zhihu.com/p/106860696?utm_source=wechat_session" target="_blank" rel="noreferrer">知乎相关专栏</a>。MPU的全称叫Micro Processor Unit，MCU的全称是Mirco Controller Unit。首先这两个词都有一个Micro开头，其实这就表明了这是计算/控制单元小型化后出现的技术。原来有多片分立的元件组成的计算机系统向高度集成化发展，多个芯片/元件的功能在向一颗芯片集中。</p><p>搭载MCU的计算机系统不承担主要的工作负载，而主要是起辅助/协调/控制作用。因此这种情况下集成化的计算机系统就不太需要强大的计算/处理能力。所以对应的形态应该是运行频率低、运算能力一般，但是需要集成化程度高（使用方便）、价格低廉（辅助系统不应增加太多成本）等因素。而随着ARM的32位MCU的出现，采用ARM的M系列的MCU也开始逐步扩大市场。以ST、NXP公司的产品为主要代表。MPU从一开始就定位了具有相当的处理和运算能力，一帮需要运行较大型的操作系统来实现复杂的任务处理。因此这就决定了MPU应该具备比较高的主频，和较为强大的运算能力。</p><p>ARM Cortex芯片系列：</p><ul><li>ARM Cortex-A：支持 ARM和Thumb指令集，并支持虚拟地址和内存管理，用于应用领域。</li><li>ARM Cortex-R：支持 ARM和Thumb指令集，只支持物理地址，支持内存管理，用于实时性领域。</li><li>ARM Cortex-M：只支持Thumb指令集，用于微处理器领域。</li></ul><h2 id="开发板、stm32cubeide-注意点备忘-实践相关-很乱-放前面是为了自己快点看到-读者可以先跳过" tabindex="-1">开发板、STM32CubeIDE 注意点备忘（实践相关，很乱，放前面是为了自己快点看到，读者可以先跳过） <a class="header-anchor" href="#开发板、stm32cubeide-注意点备忘-实践相关-很乱-放前面是为了自己快点看到-读者可以先跳过" aria-hidden="true">#</a></h2><ul><li><p>换了机器后，在 STM32CubeIDE 里直接打开原来是 working space 是不行的，它记录的是绝对路径，记得把 working space 下的工程都删掉，重新导入工程；同时记得在 project 选项栏下选 make clean 把原先的记录都清掉。</p></li><li><p>build 项目的时候注意选好是哪个项目，注意是用的 JTAG 还是 A7 上的 Linux （根据板子启动模式的不同来选择），如果是 linux 的话对每个项目可以单独选择它在远端的路径、名称（Remote Settings），也是在项目的 property 里设置。</p></li><li><p>用 A7 上的 Linux 调试的时候（STM32CubeIDE 里调试选项的生产模式），可以用串口连接它，开一个终端；也可以给板子连上网线，自己另开一个控制台用 ssh 来连接。后者要方便一些，因为我们的程序中可以要输出一些调试值到串口，影响 A7 的使用。但是还是需要用 USB 线去连开发机，加载出来 Remote NDIS 网卡，在 CubeIDE 里 Debug Configuration 里设置调试器 IP 为 Remote NDIS 网卡的地址，否则调试可能会出问题：我试了一下给板子接上网线，在 CubeIDE 里用局域网内的地址，虽然可以把编译出的项目文件拷贝到 A7 上的 <code>/usr/local/project</code> （这里后面有一条详细写了），但是没法用 OpenOCD 下断点调试。</p></li><li><p>记得在项目的 property 属性（可以通过邮件点击项目找到）里的 C/C++ General 下的 Path and Symbols 看有没有添加上头文件路径等。</p></li><li><p>开发板上烧写 Ubuntu18.04，参考华清远见提供的手册，往 flash 上烧写要用 emmc 对应的配置，但是实测失败了，往 sd 卡上烧写ubuntu 的 raw 镜像倒是成功了（注意 sd 卡启动是 101，emmc 启动是010）。</p></li><li><p>官方提供的 Ubuntu 18.04 镜像上没有支持 usb otg，所以用 Ubuntu 做多核通信部分不能按手册里的方式配置，可以给板子接个网线，因为 STM32CubeIDE 是用 ssh 连接的，用 scp 复制的文件，这个镜像默认是没有 netplan 工具的，所以要按之前版本的 Ubuntu 改静态 IP 的方法，在 <code>/etc/network/interfaces</code> 中修改成静态 IP，在 <code>/etc/resolv.conf</code> 里修改 DNS（注意两边网卡名匹配）。然后<code>ip addr flush dev \${your-net-device}</code> 刷新设置、<code>ifdown \${your-net-device</code>} 、 <code>ifup \${your-net-device}</code> 重启网卡。也可以把这些设置提前写到别的文件里，在 <code>~/.bashrc</code> 里用这些文件通过 <code>cp</code> 等方式默认配置文件，这样每次开机都可以自己覆盖掉（当然下面记录的部分是用的默认的 st open linux，所以是用 usb otg 搞得 RNDIS，从而连接的）</p></li><li><p>这个镜像也没有 <code>modprobe</code> 工具，如果用到需要自己安 <code>kmod</code> 包</p></li><li><p>因为板子是 Cortex-A7 的，在这个板子上的 apt 需要换用 arm 源，华为有提供而且可以 wget 直接下……如果配的是 x86 源的会报找不到源还以为是网不好；同时记得注意版本，18.04 名字是 Bionic Beaver，链接都要换成 Bionic，可以用 <code>sed -i &#39;s/xxxx/Bionic/g&#39; /etc/apt/source.list</code> 做快速替换</p></li><li><p>STM32CubeIDE 选 Linux 调试是用 ssh 和板子上的 Linux 建立的连接，默认是用的 root 用户，我没有找到在哪里改用别的用户连接开发板，所以只能在板上的系统里开启允许 root 用户建立 ssh 的选项。需要修改 <code>/etc/ssh/sshd_config</code> 文件，把 <code>PermitRootLogin prohibit-password</code> 改成 <code>PermitRootLogin yes</code>，然后重启相关服务 <code>sudo service ssh restart</code></p></li><li><p>STM32CubeIDE 会把编译出的 elf 文件发送给板子，存在上面提到的 Remote Settings 中默认的 <code>/usr/local/project/\${project-name}</code> 下面，可以去板子上的 Linux 这个目录下找，可以看到下面这样的自动生成的脚本。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/sh</span></span>
<span class="line"><span style="color:#A6ACCD;">rproc_class_dir</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/sys/class/remoteproc/remoteproc0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">fmw_dir</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/lib/firmware</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">fmw_name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxxxx.elf</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">$1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;"># Start the firmware</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#FFCB6B;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lib/firmware/</span><span style="color:#A6ACCD;">$fmw_name $fmw_dir</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-n</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$fmw_name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> $rproc_class_dir</span><span style="color:#C3E88D;">/firmware</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-n</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> $rproc_class_dir</span><span style="color:#C3E88D;">/state</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">$1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">stop</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;"># Stop the firmware</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-n</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> $rproc_class_dir</span><span style="color:#C3E88D;">/state</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span></code></pre></div><p>然后是用的 remoteproc 的方式在 Cortex-M4 上加载的 elf 文件，所以理论上，我们在 Cortex-A7 上可以通过这种方式，向 Cortex-M4 提供准备好的 elf 文件。当然，这里 remoteproc 只是在做开关机等操作，在启动后，Cortex-A7 和 Cortex-M4 日常的通信可以用 <code>/dev/RPMsg0</code> 和 <code>/dev/RPMsg1</code></p></li></ul><h2 id="硬件" tabindex="-1">硬件 <a class="header-anchor" href="#硬件" aria-hidden="true">#</a></h2><p>搭载的 SOC 是 STM32MP157AAA3，在 STM32Cube 里面记住选这个。</p><p>板子上还有一个缩写为 MPU 的东西，叫 Memory Protection Unit，即内存保护单元，其作用如下</p><ul><li>阻止用户应用程序破坏操作系统使用的数据。</li><li>阻止一个任务访问其它任务的数据区，从而把任务隔开。</li><li>可以把关键数据区设置为只读，从根本上消除了被破坏的可能。</li><li>检测意外的存储访问，如，堆栈溢出，数组越界。</li><li>此外，还可以通过MPU设置存储器regions的其它访问属性，比如是否缓冲等。</li></ul><p>仿真器上可以接一路板子上的调试串口来调试 Cortex M4 上的程序，用 USB OTG 和电脑连接。</p><p>板子上的的 USB OTG 是用来做数据传输、镜像烧录的。</p><p>在 Wi-Fi 蓝牙天线接口的旁边有一个拨片开关是用来设置启动配置的，实测和下图中定义的不符？</p><ul><li><strong>001</strong>是工程模式（写字母的一端上方，代表1；写数字的一端下方，代表0）。可以进行 Cortex M4 的开发和调试。</li><li><strong>101</strong>是让 Cortex A7 加载 TF 卡内镜像启动， <strong>000</strong> 是烧录镜像给板载 Flash，<strong>010</strong>是加载板载 Flash 内镜像启动。</li><li>注意 0 和 1 可能搞反，启动 / 调试不了拨过来重新试一下。</li></ul><p><img src="`+l+'" alt="boot_mode"></p><p>电源旁边的是 reset 键，另一个是可以自定义的按键。</p><p>因为 MPU 内部的接口是固定的，板子则是厂商自定义的，所以在<strong>使用板子前需要在 STM32CubeMX 里先设定好用到的接口</strong>。在原理图目录下的 pdf 中可以查看开发版上的引脚。比如第十三章中讲解 GPIO 的，查到引脚是 PZ5，PZ6，PZ7，于是在STM32CubeIDE中需要调用STM32CubeMX工具，将这几个引脚设置为GPIO_OUTPUT。</p><p>STM32MP157 有三个运行环境，有一些 peripheral 在某些 context 是没法用的。</p><ul><li>Arm dual core Cortex-A7 secure (Trustzone), running a Secure Monitor or Secure OS like <a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/OP-TEE_overview" target="_blank" rel="noreferrer">OP-TEE</a></li><li>Arm dual core Cortex-A7 non secure , running <a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/STM32MP15_Linux_kernel_overview" target="_blank" rel="noreferrer">Linux</a></li><li>Arm Cortex-M4 (non-secure), running <a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/STM32CubeMP1_architecture" target="_blank" rel="noreferrer">STM32Cube</a></li></ul><p>大多数 peripheral 只能分配给一个 context，比如<a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/USART_internal_peripheral" target="_blank" rel="noreferrer">USART</a> 和 <a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/I2C_internal_peripheral" target="_blank" rel="noreferrer">I2C</a>。 有一些则可以在多个 contexts 之间共享，一般是系统的 peripheral 如 <a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/PWR_internal_peripheral" target="_blank" rel="noreferrer">PWR</a> 和 <a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/RCC_internal_peripheral" target="_blank" rel="noreferrer">RCC</a>。</p><p>具体的分配规则如下两图所示，第一幅图是第二幅图的图例，文字版见官方<a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/STM32MP15_peripherals_overview" target="_blank" rel="noreferrer">wiki</a>。</p><img src="'+t+'" style="zoom:150%;"><p><img src="'+o+'" alt=""></p><h2 id="软件工具" tabindex="-1">软件工具 <a class="header-anchor" href="#软件工具" aria-hidden="true">#</a></h2><p>STM32CubeProgrammer 是用来烧录镜像的工具。</p><p>STM32CubeMX 可提供以下服务（在使用前一般要对 MPU 内部的 peripheral 进行设置，MPU 外部是做开发板的人已经连好的）：</p><ul><li>STM32 微控制器和微处理器的选择</li><li>引脚排列，时钟，外设和中间件配置</li><li>项目创建和初始化代码的生成</li></ul><p><strong>STM32CubeIDE 是集成了 STM32CubeMX</strong> 的 IDE ，创建项目的时候就可以自动加载它先进行引脚等的配置，同时该IDE还自带了 ARM 工具链和 GDB 调试工具。</p><p>在用 STM32CubeIDE 进行初始化设置的时候，<strong>记得在 Project Manager 中勾选 “Generate peripheral initialization as a pair of &#39;.c/.h&#39; files per peripheral”</strong>，这样生成的代码更容易阅读。</p><p>同时在<strong>设置引脚的时候，记得右键勾选 pin reserved</strong>，把引脚分配给某个运行上下文（context 在后面 IPCC 部分也会提到），否则按照默认设置是 free，就只是设置了引脚为输入、输出等，但是还是不知道是哪个 cpu 控制着它，STM32CubeMX 就不会自动为我们生成初始化代码。</p><p>配置完成后使用 &quot;ctrl+s&quot; 就可以自动保存配置并生成初始化代码。</p><h2 id="stm32学习笔记" tabindex="-1">STM32学习笔记 <a class="header-anchor" href="#stm32学习笔记" aria-hidden="true">#</a></h2><p>华清远见教程手册第三部分是 Cortex M4 的实验内容；第四部分是 Cortex A7 的实验内容。</p><h3 id="cortex-m4" tabindex="-1">Cortex M4 <a class="header-anchor" href="#cortex-m4" aria-hidden="true">#</a></h3><p>先来看一下架构图，我们在编程时，只需要操作硬件抽象层（HAL层）的 API 就行了。</p><p><img src="'+p+`" alt=""></p><h4 id="gpio" tabindex="-1">GPIO <a class="header-anchor" href="#gpio" aria-hidden="true">#</a></h4><p>华清远见教程 P247 左右。在创建工程后注意 IDE 会先调用 STM32CubeMX 让你初始化板子，不然很多相关头文件都要自己手动 include，初始化等工作也要自己做，配置后会自动为我们生成工程文件。同时因为有两个核，还要设置 Pin Reservation 给 Cortex M4。在Project Manager 的 Code Generator 处选择为每个外设生成单独的 <code>.c/.h</code> 文件以便阅读。在 STM32CubeMX 里左键点击引脚可以进行类型选择，选择后右键再点击可以选择分配给的是哪个核，下方还有搜索框可以搜索引脚，被搜索到的引脚在 Pinout View 中会闪烁。这里因为我们买的是华清远见做好的板子，所以哪个引脚对应什么功能，是华清远见已经连接好的，比如这里 LED 它给连接的就是 PZ5，PZ6，PZ7 这三个引脚。</p><p>IO 口可以由软件配置成4种模式，其实操作的是GPIO 的端口模式寄存器</p><ul><li>输入（复位状态）/input（reset state）</li><li>通用输出模式/ general purpose output mode</li><li>复用功能模式/ alternate function mode</li><li>模拟模式/ analog mode</li></ul><p>对应的宏为 <code>GPIO_MODE_INPUT</code>，<code>GPIO_MODE_OUTPUT_PP</code>，<code>GPIO_MODE_OUTPUT_OD</code>， <code>GPIO_MODE_AF_PP</code>，<code>GPIO_MODE_AF_OD</code>，分別是对应不同的寄存器值。</p><p>IO 操作重要结构体：<code>GPIO_InitTypeDef</code>中定义了Pin、Mode、Pull、Speed、Alternate。</p><p>设置 GPIO 引脚调用的HAL 函数： <code>void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);</code> 第一个参数传的是GPIO 所在的组，第二个是该组的几号管脚，第三个是对管脚进行置位。</p><h4 id="按键扫描" tabindex="-1">按键扫描 <a class="header-anchor" href="#按键扫描" aria-hidden="true">#</a></h4><p>华清远见教程 P256 左右。</p><p><code>void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)</code>可以读引脚输入值，默认是 pullup，所以按下后是 0 。</p><p><code>void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)</code>来对输出引脚值取反。</p><h4 id="外部中断" tabindex="-1">外部中断 <a class="header-anchor" href="#外部中断" aria-hidden="true">#</a></h4><p>除了常规的设置引脚以外，记得要在左侧列表下的 GPIO 设置项目的 NVIC 界面中勾选使能对应的中断，否则要自己在 <code>gpio.c</code> 中启用外部中断并定义优先级</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">HAL_NVIC_SetPriority</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">EXTI0_IRQn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#82AAFF;">HAL_NVIC_EnableIRQ</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">EXTI0_IRQn</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>同时要在 <code>stm32mp1xx_it.h/c</code> 中定义 <code>void EXTI0_IRQHandler(void)</code>，调用 <code>HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_XXX)</code>，同时注册一个回调函数 <code>void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)</code>。同时要尽可能避免在中断处理程序（ISR）中去调用 <code>HAL_Delay()</code>，因为后者也是通过中断实现的，用在一起需要调整 ISR 的优先级。</p><h4 id="串行通讯接口" tabindex="-1">串行通讯接口 <a class="header-anchor" href="#串行通讯接口" aria-hidden="true">#</a></h4><p>串口通信的概念非常简单，串口按位（bit）发送和接收字节。尽管比按字节（byte）的并行通信慢，但是串口可以在使用一根线发送数据的同时用另一根线接收数据。串口通信是异步的。串口通信最重要的参数是波特率、数据位、停止位和奇偶校验。</p><ul><li><p>波特率：这是一个衡量通信速度的参数。它表示每秒钟传送的bit 的个数。例如 300 波特表示每秒钟发送300 个bit。当我们提到时钟周期时，我们就是指波特率。例如如果协议需要4800波特率，那么时钟是4800Hz。这意味着串口通信在数据线上的采样率为4800Hz。通常电话线的波特率为14400，28800 和36600。波特率可以远远大于这些值，但是波特率和距离成反比。高波特率常常用于放置的很近的仪器间的通信，典型的例子就是GPIB 设备的通信。</p></li><li><p>数据位：这是衡量通信中实际数据位的参数。当计算机发送一个信息包，实际的数据不会是8 位的，标准的值是5、7 和8 位。如何设置取决于你想传送的信息。比如，标准的ASCII码是0～127（7 位）。扩展的ASCII 码是0～255（8 位）。如果数据使用简单的文本（标准ASCII 码），那么每个数据包使用7 位数据。每个包是指一个字节，包括开始/停止位，数据位和奇偶校验位。</p></li><li><p>停止位：用于表示单个包的最后一位。典型的值为1 ，1.5 和2 位。这里的1.5 位的数据宽度，就是1.5 个波特率，由于数据是在传输线上定时的，并且每一个设备有其自己的时钟，很可能在通信中两台设备间出现了小小的不同步。因此停止位不仅仅是表示传输的结束，并且提供计算机校正时钟同步的机会。适用于停止位的位数越多，不同时钟同步的容忍程度越大，但是数据传输率同时也越慢。</p></li><li><p>奇偶校验位：在串口通信中一种简单的检错方式。有四种检错方式：偶、奇、高和低。当然没有校验位也是可以的。对于偶和奇校验的情况，串口会设置校验位（数据位后面的一位），用一个值确保传输的数据有偶个或者奇个逻辑高位。例如，如果数据是011，那么对于偶校验，校验位为0，保证逻辑高的位数是偶数个。如果是奇校验，校验位位1 ，这样就有3 个逻辑高位。高位和低位不真正的检查数据，简单置位逻辑高或者逻辑低校验。这样使得接收设备能够知道一个位的状态，有机会判断是否有噪声干扰了通信或者是否传输和接收数据是否不同步。</p></li><li><p>硬件流控制: 硬件流控制常用的有RTS/CTS 流控制和DTR/ R（数据终端就绪/数据设置就绪）流控制。硬件流控制必须将相应的电缆线连上，用RTS/CTS（请求发送/清除发送）流控制时，应将通讯两端的RTS、CTS 线对应相连，数据终端设备（如计算机）使用RTS 来起始调制解调器或其它数据通讯设备的数据流，而数据通讯设备（如调制解调器）则用CTS 来起动和暂停来自计算机的数据流。这种硬件握手方式的过程为：我们在编程时根据接收端缓冲区大小设置一个高位标志（可为缓冲区大小的75％）和一个低位标志（可为缓冲区大小的25％），当缓冲区内数据量达到高位时，我们在接收端将CTS 线置低电平（送逻辑0），当发送端的程序检测到CTS 为低后，就停止发送数据，直到接收端缓冲区的数据量低于低位而将CTS 置高电平。RTS 则用来标明接收设备有没有准备好接收数据。</p></li></ul><p>STM32 串口设置一般可以总结为如下几个步骤：</p><ol><li>串口时钟使能，GPIO 时钟使能</li><li>设置引脚复用映射</li><li>GPIO 初始化设置,模式为复用功能</li><li>串口参数初始化：设置波特率，字长，奇偶校验等参数</li><li>开启中断并初始化NVIC，使能中断（如果需要开启中断才需要这个步骤）</li><li>使能串口</li><li>编写中断处理函数</li></ol><p>相关 HAL API：</p><p><code>HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);</code> 轮询方式发送。</p><p><code>HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout);</code> 轮询方式接收。</p><p><code>HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);</code> 中断方式发送，需要重载 <code>void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);</code> 。</p><p><code>HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);</code> 中断方式接收，需要重载 <code>void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);</code> 。</p><p>在配置时，除了需要找到 UART4 的 TX 和 RX 对应的引脚外，还需要在左侧列表中找到 UART4，并把它在 Cortex-M4 上激活，激活后，模式下拉选择 Asynchronous，如果要用中断方式，需要在 NVIC Settting 栏下勾选 Enabled 使能串口中断。</p><h4 id="hsem" tabindex="-1">HSEM <a class="header-anchor" href="#hsem" aria-hidden="true">#</a></h4><p>STM32MP157 手册第 11 章。</p><p>在讨论 IPCC 之前，STM32MP1官方 wiki 里也提到了 HSEM， 即 Hardware Semaphore，说是用于coprocessor的，但是读了STM32MP157的手册发现似乎是用于 Cortex A7 的两个核的。</p><p>HSEM总共设计了32个32位（4 Bytes）的寄存器用于存储信号量，对这些寄存器的读写都是以字节（4 Bytes）为单位的，以半字、Byte方式读写是无效的。</p><p>关于信号量的使用，有一本很好的书，<strong><a href="https://www.researchgate.net/publication/249954903_The_Little_Book_of_Semaphores" target="_blank" rel="noreferrer">The Little Book Of Semaphores</a></strong>。</p><h4 id="ipcc" tabindex="-1">IPCC <a class="header-anchor" href="#ipcc" aria-hidden="true">#</a></h4><p>STM32MP157 手册第 12 章、<a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/IPCC_internal_peripheral" target="_blank" rel="noreferrer">官方wiki</a>。</p><p>IPCC全称 inter-processor communication controller 可以用来在两个处理器间传递数据，他提供的是 non-blocking 的信号机制，使用原子操作发送和获取信息。视通信的模式，从 MCU SRAM 中分划出一部分作为共享内存。IPCC是不安全的 peripheral。在启动时无法使用。</p><p>IPCC peripheral 提供了管理 IPCC 通信的机制。每个处理器都有自己独立的寄存器组和中断。</p><p>该芯片上共有6条双向通道，每条通道又被划分为两条朝向相反的单向的子通道。</p><h5 id="单向子通道" tabindex="-1">单向子通道 <a class="header-anchor" href="#单向子通道" aria-hidden="true">#</a></h5><p>子通道包含：</p><ul><li>一个 flag，该 flag 在occupied 和 free 之间变化，当发送数据时，发送方可以设置为 occupied，接收方收到后清空为 free。去看手册会发现，他是靠寄存器实现的，事实上可以看成是 hardware 的 semaphore 或者是 mutex :happy:，起到互斥的作用 。</li><li>两个相关的中断。这两个中断在不同通道间是共享的，也就是说同一时刻只有一个通道可以触发中断让处理器对他进行读写。即使是你有办法让 6 条通道火力全开，并行传输，也会受到这里的限制。这在下面的概况图中表示为外围设备部分的6条通道，是共同经过一个 OR 门触发 IRQ 的。 <ul><li>RXO：&quot;receiver&quot; 端的 RX 通道被占用，即Rx_Occupied</li><li>TXF：&quot;sender&quot; 端的 TX 通道是空闲的，即Tx_Free</li></ul></li><li>两个相关的中断掩码</li></ul><h5 id="通信模式" tabindex="-1">通信模式 <a class="header-anchor" href="#通信模式" aria-hidden="true">#</a></h5><p>理论上 IPCC 可以有三种运行通信模式：</p><ul><li>Simplex communication mode <ul><li>只使用一个子通道。</li><li>单向信息：一旦发送方的处理器已经向内存发送了数据，他就立刻把信道状态 flag 设置为 occupied 状态；接收方一旦读取完了信息就把 flag 清除为 free 状态。</li></ul></li><li>Half-duplex communication mode <ul><li>只使用一个子信道。</li><li>双向信息：一旦发送方的处理器已经向内存发送了数据，他就立刻把信道状态 flag 设置为 occupied 状态；当接收方读取完信息且 response 在共享内存中可用了，再清空 flag。</li></ul></li><li>Full-duplex communication mode <ul><li>以异步的方式使用子信道。</li><li>通过将信道设置为 occupied 状态，任何一个处理器都可以异步地发送信息；当接收处理器收到信息后，清楚 flag。该模式可以被视为两个 simplex 模式在一个给定信道上的结合。</li></ul></li></ul><p>但是STM32MP157的手册中只有前两种，下面分别给出具体的电位图，理解起来更方便：</p><p><img src="`+r+'" alt=""></p><p><img src="'+i+'" alt=""></p><h5 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-hidden="true">#</a></h5><p>IPCC的架构为</p><ul><li>IPCC processor 1 是 Cortex-A7 non-secure， 使用<a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/Linux_Mailbox_framework_overview" target="_blank" rel="noreferrer">Linux mailbox framework</a>进行管理。</li><li>IPCC processor 2 是 Cortex-M4，适应 <a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/STM32CubeMP1_architecture" target="_blank" rel="noreferrer">IPCC HAL driver</a>进行管理。</li></ul><p>可以用下图概括</p><p><img src="'+c+'" alt=""></p><h5 id="linux-mailbox" tabindex="-1">Linux Mailbox <div id="mailbox"></div> <a class="header-anchor" href="#linux-mailbox" aria-hidden="true">#</a></h5><p>Mailbox框架用于异构多核系统中处理器之间的数据和信号传递。该框架下有 controller 和 client：</p><ul><li>Controller 用来设置和管理来自 IPCC peripheral 的 IRQ，叫 stm32_ipcc。</li><li>Client 用来管理数据的发送和接收，用户可以自定义Client，例如 RPMsg 框架使用了该 mailbox 进行处理器间的通信，在这种情况下 Client 就是 remoteproc 驱动。</li></ul><p>架构图如下</p><p><img src="'+d+`" alt=""></p><p>使用细节参见文档：</p><p><a href="https://github.com/STMicroelectronics/linux/blob/v5.4-stm32mp/Documentation/mailbox.txt" target="_blank" rel="noreferrer">https://github.com/STMicroelectronics/linux/blob/v5.4-stm32mp/Documentation/mailbox.txt</a></p><p><a href="https://github.com/STMicroelectronics/linux/blob/v5.4-stm32mp/include/linux/mailbox_controller.h" target="_blank" rel="noreferrer">https://github.com/STMicroelectronics/linux/blob/v5.4-stm32mp/include/linux/mailbox_controller.h</a></p><p><a href="https://github.com/STMicroelectronics/linux/blob/v5.4-stm32mp/include/linux/mailbox_client.h" target="_blank" rel="noreferrer">https://github.com/STMicroelectronics/linux/blob/v5.4-stm32mp/include/linux/mailbox_client.h</a></p><p>具体设置参见：</p><p><a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/Linux_Mailbox_framework_overview" target="_blank" rel="noreferrer">Linux mailbox framework</a></p><p><a href="https://wiki.stmicroelectronics.cn/stm32mpu/wiki/Menuconfig_or_how_to_configure_kernel" target="_blank" rel="noreferrer">https://wiki.stmicroelectronics.cn/stm32mpu/wiki/Menuconfig_or_how_to_configure_kernel</a></p><h5 id="rpmsg" tabindex="-1">RPMsg <div id="rpmsg"></div> <a class="header-anchor" href="#rpmsg" aria-hidden="true">#</a></h5><p>RPMsg是基于 <strong>virtio</strong> 的 messaging bus，允许本地处理器和远程处理器进行交流。它是用 virtio vring 在共享内存上发送和接收数据的。</p><p>具体而言，vring 是单向的，总共需要开两个实现双向传输，在两个处理器都能看到的内存空间上会开辟共享的 buffer。使用 <a href="#mailbox">Mailbox framework</a> 来通知处理器在共享内存中有待读取的数据。</p><p>基于这些框架， RPMsg框架实现了一个基于信道的通讯方式，信道使用文本信息进行区分，同时有本地地址和远端地址，类似 socket 通信？需要注意的是在远端也需要实现 RPMsg框架，具体的实现有很多种，比较出名的是 <a href="https://www.openampproject.org/" target="_blank" rel="noreferrer"><strong>OpenAMP</strong></a>。</p><blockquote><p>实践相关：在 STM32CubeIDE 里添加 OpenAMP 支持后，会自动添加 OpenAMP 到 <code>Middleware</code> 目录下，在 <code>M4</code> 目录下的是 ST 在它之上做的一层包裹。包裹后视作 virtual uart 结构，可以支持双向通信。</p><p>底层的IPCC，是创建了两个 vring，分别分配给 channel1 和 channel2，而在<code>mbox_ipcc.c</code> 的注释里直接画出来了通信的方向：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* Channel direction and usage:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*  ========   &lt;-- new msg ---=============--------&lt;------   =======</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* ||      ||                || CHANNEL 1 ||                ||     ||</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* ||  A7  ||  -------&gt;-------=============--- buf free--&gt;  || M4  ||</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* ||      ||                                               ||     ||</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* ||master||  &lt;-- buf free---=============--------&lt;------  ||slave||</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* ||      ||                || CHANNEL 2 ||                ||     ||</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*  ========   -------&gt;-------=============----new msg --&gt;   =======</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span></code></pre></div><p>A7是被当做 master（<code>RPMSG_MASTER</code> / <code>VIRTIO_DEV_SLAVE</code>），rpmsg 的 endpoint 存储在 <code>VIRT_UART_HandleTypeDef huart0</code> 中；M4 是 slave（<code>RPMSG_REMOTE</code> / <code>VIRTIO_DEV_SLAVE</code>），rpmsg 的 endpoint 存储在 <code>VIRT_UART_HandleTypeDef huart1</code> 中。vring 的具体定义在 rsc_table.c 中，每个 vring 上有 16 个 buffer。共享内存的总大小是 32KB，是定义在链接文件 <code>STM32MP157AAAX_RAM.ld</code> 中的，定义成了</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">RAM2_ipc_shm		(xrw)	: ORIGIN = 0x10040000,	LENGTH = 0x00008000</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在 OpenAMP 的 <code>rpmsg_virtio.h</code> 中定义的 <code>RPMSG_BUFFER_SIZE</code> 则是 512。</p></blockquote><p>在 RPMsg client 的实现中，需要关注两个概念：</p><ul><li><p>RPMsg channel：</p><p>RPMsg client 是关联于 RPMsg channel 的，RPMsg channel 建立在本地和远端处理器之间。client使用文本信息，即 service name，注册在 RPMsg 框架中，当找到了本地注册过的服务名和远端发布的服务名，就建立通讯信道。</p></li><li><p>RPMsg endpoint：RPMsg 端点通过RPMsg 信道，提供逻辑连接。一个端点有它独特的地址和对应的回调函数，允许用户在同一个信道上绑定多个端点。当一个用户驱动用本地地址创建了一个端点，所有目标地址和该端点本地地址相同的到达数据都会被路由到该端点。注意每个信道有一个默认的端点，所以应用即使不创建新端点，也可以进行通信。</p></li></ul><p>架构图如下</p><p><img src="`+C+'" alt=""></p><p>文档：<a href="https://www.kernel.org/doc/Documentation/rpmsg.txt" target="_blank" rel="noreferrer">https://www.kernel.org/doc/Documentation/rpmsg.txt</a></p><h5 id="rproc" tabindex="-1">RPROC <a class="header-anchor" href="#rproc" aria-hidden="true">#</a></h5><p>全称为 remote processor (RPROC) ，该框架允许不同的平台、架构忽略硬件差异去远程管理（开关、加载固件）其他处理器</p><p>STM32MP157中，有两个组成部分</p><p><strong>remoteproc</strong>，抽象的远程处理器管理框架，功能如下：</p><ul><li>在远程处理器的内存中加载 ELF firmware</li><li>解析 firmware resource table ，以控制相关资源（例如IPC、memory）</li><li>控制远程处理器的执行，远程让他运行或停止，即 Life Cycle Management （LCM）</li><li>提供检测、debug 远程固件的服务</li></ul><p><strong>stm32_rproc</strong>，ST公司编写特定的远程处理器驱动，功能如下：</p><ul><li>将供应商编写的特定回调函数注册到 RPROC 框架中</li><li>管理远程平台中与处理器相关的资源（例如 registers、watchdogs、reset、clock 和 memories）</li><li>通过 mailbox 框架向远程的处理器推送通知（kicks）</li></ul><p>架构图如下，<a href="#rpmsg">RPMsg</a> 是建立在 RPROC 之上的，但是也有直接使用RPROC的其他应用如 sysfs 和 debugfs。</p><p><img src="'+A+'" alt=""></p><p>文档：<a href="https://www.kernel.org/doc/Documentation/remoteproc.txt" target="_blank" rel="noreferrer">https://www.kernel.org/doc/Documentation/remoteproc.txt</a></p><h5 id="peripheral-设置" tabindex="-1">peripheral 设置 <a class="header-anchor" href="#peripheral-设置" aria-hidden="true">#</a></h5><p>IPCC peripheral 连接了 Cortex A7 和 Cortex M4，因此需要在两个处理器上都进行设置，内部的 peripheral 在使用时候需要通过STM32CubeMX对板子进行设置</p><p>默认设置 processor1 是 Cortex A7 non-secure，processor2 是 Cortex M4。信道默认按下表设置</p><table><thead><tr><th>信道</th><th>模式</th><th>用途</th><th>软件框架（A7）</th><th>软件框架（M4）</th></tr></thead><tbody><tr><td>信道1</td><td>全双工</td><td>M4发送，A7接收</td><td>RPMsg</td><td>OpenAMP</td></tr><tr><td>信道2</td><td>全双工</td><td>A7发送，M4接收</td><td>RPMsg</td><td>OpenAMP</td></tr><tr><td>信道3</td><td>Simplex</td><td>用于终止 Cortex M4 的运行</td><td>RemoteProc</td><td>CprocSync cube utility</td></tr><tr><td>信道4</td><td></td><td>free</td><td></td><td></td></tr><tr><td>信道5</td><td></td><td>free</td><td></td><td></td></tr><tr><td>信道6</td><td></td><td>free</td><td></td><td></td></tr></tbody></table><p>IPCC相关设置不能直接单独在某个 context 下开启，一定是两个处理器都参与其中的，在STM32CubeMX中需要设置成 A7 non-secure 和 M4 两个 context。</p><h5 id="相关代码" tabindex="-1">相关代码 <a class="header-anchor" href="#相关代码" aria-hidden="true">#</a></h5><p>1.2.0 版本下 HAL 和 LL 层的源码：</p><ul><li><code>\\Cortex-M4\\STM32Cube_FW_MP1_V1.2.0\\Drivers\\STM32MP1xx_HAL_Driver\\Inc\\stm32mp1xx_ll_ipcc.h</code></li><li><code>\\Cortex-M4\\STM32Cube_FW_MP1_V1.2.0\\Drivers\\STM32MP1xx_HAL_Driver\\Src\\stm32mp1xx_hal_ipcc.c</code></li><li><code>\\Cortex-M4\\STM32Cube_FW_MP1_V1.2.0\\Drivers\\STM32MP1xx_HAL_Driver\\Inc\\stm32mp1xx_hal_ipcc.h</code></li></ul><h3 id="cortex-a7" tabindex="-1">Cortex A7 <a class="header-anchor" href="#cortex-a7" aria-hidden="true">#</a></h3><h4 id="环境搭建" tabindex="-1">环境搭建 <a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a></h4><p>首先安装了Xshell用于串口调试，之后需要安装 STM32CubeProgrammer，在 STM32 平台上的 Flash 设备中创建分区并对各个分区进行镜像烧录。可以使用 STM32CubeProgrammer工具来烧录 STM32 MPU板上支持的所有 Flash 设备，可以对 eMMC 和 SDCard中的镜像更新。</p><h4 id="openstlinux源码编译" tabindex="-1">OpenSTLinux源码编译 <a class="header-anchor" href="#openstlinux源码编译" aria-hidden="true">#</a></h4><p>教程第 35 章，P382 左右</p><h4 id="openstlinux镜像烧录" tabindex="-1">OpenSTLinux镜像烧录 <a class="header-anchor" href="#openstlinux镜像烧录" aria-hidden="true">#</a></h4><p>教程第 36 章，P401 左右</p><p>该板子支持通过 STM32CubeProgrammer 工具进行镜像的烧录，还可以通过 BootLoader下的 ums 工具配合 ubuntu 系统进行单个镜像更新，使用 TFTP 下载方式进行镜像的下载，使用 scp 方式更新 linux 内核和设备树。</p><p>在烧录前需要将开发板断电，挑战拨码开关，将开关拨到 <strong>000</strong>。</p><p><img src="'+u+'" alt=""></p><p>使用 USB 方式烧写镜像的时候，要用 USB mini 线来进行数据传输，注意这里是接在板子上的那个 USB mini。</p><p>同时接上调试器的 USB mini，根据设备管理器里的端口信息，打开 Xshell，在连接选项中选择 Serial 连接协议，然后设置好端口号等信息，然后进行连接。</p><p>之后打开 STM32CubeProgrammer，开发板上电，在右上角切换到USB连接设置下，可以看到接着板子的 USB 端口（如果看不到尝试复位），点击 Connect 按钮，右上角会显示为绿色的 Connected。</p><p>打开镜像所在目录，不同文件夹下是不同的 tsv 格式的配置文件。例如文件名称中带有 emmc 的是片上 flash 烧录设置，而 sdcard 的是 TF 卡的烧录配置，后缀带有 trusted 和 optee 的是不同的启动模式，二者均为带有安全机制的启动方式。烧录前需要将配置文件复制到上级目录中，和镜像文件放在一起（也可以不移动，在后面的 STM32CubeProgrammer 中选择 binaries path）。在 STM32CubeProgrammer 中，点击 Open File，选择刚刚复制过去的配置文件。等待几分钟即可完成烧录，将开关拨片拨至 <strong>010</strong> 来启动系统。</p><p>也可以通过 USB Image Tool 工具制作 TF 系统卡。在 USB Image Tool 中可以看到 TF 卡和读卡器，读到盘符后将 raw 格式的 Weston 镜像。打开 Favorites 选项卡，添加一个镜像后点击 Restore， 等待烧录完成后，将开关拨片拨至 <strong>101</strong> 来启动系统。</p><h3 id="利用-openamp-的多核协同工作-a7-和-m4-通信" tabindex="-1">利用 OpenAMP 的多核协同工作（A7 和 M4 通信） <a class="header-anchor" href="#利用-openamp-的多核协同工作-a7-和-m4-通信" aria-hidden="true">#</a></h3><p>需要在 CubeMX 里同时选择 OpenAMP 和 IPCC 下的 Cortex M4 选项，注意还需要勾选 activated</p><p>STM32MP157 默认设置的共享内存是 32K</p><p>第 56 章， P613 附近</p><p>源码在 <code>\\Cortex-M4\\STM32Cube_FW_MP1_V1.2.0\\Projects\\STM32MP157A-FSMP1\\Applications\\OpenAMP\\OpenAMP_TTY_echo</code> 目录下</p><p>需要将整个文件目录都导入 STM32CubeIDE，同时需要连接两条 USB mini 线，开发版会被识别为 RNDIS 网络适配器设备，在设备管理器中如果找不到该设备，可能是被识别成了串口或 USB 设备，需要卸载驱动重装。还不能用只能换线、换电脑试试了。</p><p>下面记录下 STMicroelectronics Micro Controller Development Application Team 的文档中对该示例的描述。</p><p>该示例主要演示了如何使用 OpenAMP MW 和 Virtual UART 来创建看上去就像 Linux 系统中的 TTY 一样的设备的处理器间通讯通道。</p><p>在该示例中，调用的是 CPU2 （Cortex-M4，CM4）上的固件，默认的 CPU1 是 Cortex-A7 (CA7)，在 CPU1 上需要运行 Linux。</p><p>OpenAMP MW 使用下列硬件资源：</p><ul><li>IPCC peripheral，用来在 CA7 和 CM4 之间传递事件信号（mailbox）。</li><li>MCU SRAM peripheral 用来缓存通信信息 (virtio buffers) 。</li><li>该例子中保留的共享内存区域：SHM_ADDR=0x10040000，SHM_SIZE=128k。它定义在 <code>platform_info.c</code> 文件中。</li></ul><p>OpenAMP 的工作流程：</p><ul><li>主处理器使用 <code>remoteproc</code> 去在远程处理器上装载和运行一个远程应用</li><li>在远程应用运行时，在主从应用之间建立 rpmsg 信道</li><li>使用 <code>rpmsg</code> API 进行 IPC</li></ul><p>具体而言，以主处理器向从处理器传递消息为例，可以总结为下图（这里used是说已经读取过，可以丢弃的buffer）：</p><p><img src="'+y+`" alt=""></p><p>Master （图中是ARM Host）的步骤：</p><ul><li>Step 1a：重新分配一个buffer</li><li>Step 1b （与 Step 1a 二选一）：从 slave的Vring中取一个用过的buffer</li><li>Step 2：将数据转移到 Step 1a 或 Step 1b 拿到的 buffer 中</li><li>Step 3：将新填入数据的 buffer 添加到 slave 的 Vring 的 available 列表中，等待读取</li><li>Step 4：使用 Mailbox 给 slave 发送一个读取的信号</li></ul><p>Slave （图中是 PRU0，不用管它是啥）的步骤：</p><ul><li>Step 5：在 Mailbox 中发现了来自 master 的信号，从处理器被告知有新数据可读了</li><li>Step 6：从 slave 自己的 Vring 中读取数据</li><li>Step 7：将数据转移到自己的 buffer 中</li><li>Step 8：将空 buffer 放回自己的 Vring 已使用的 buffer 列表中</li><li>Step 9：使用另一个 Mailbox，告知主处理器自己处理完数据了</li></ul><p>在这个例子中：</p><ul><li><p>CPU2 初始化 OpenAMP MW ，OpenAMP 通过 硬件抽象层（HAL）初始化了 IPCC peripheral，设置了 openamp-rpmsg 框架。</p></li><li><p>CPU2 创建了 两个 rpmsg 信道给 两个虚拟的 UART 实例 UART0 和 UART1。</p></li><li><p>CPU2 在两条信道上等待来自 CPU1 的消息。</p></li><li><p>当 CPU2 接收到来自一个虚拟 UART 实例 / rpmsg 信道的消息时，它在同一个 UART 实例 / rpmsg 信道上将消息发送回 CPU1。</p></li></ul><p><strong>注意</strong>：</p><ul><li><p>在 Cortex-A7 上需要烧录好 Linux</p></li><li><p>在 Cortex-M4 上 logging 被重定向到了 MCUSRAM 的共享内存中，能够在 Linux 的控制台中进行展示，使用这个命令即可查看 <code>cat /sys/kernel/debug/remoteproc/remoteproc0/trace0</code></p></li><li><p>下面的命令需要在 Cortex-A7 的 Linux 控制台中运行，在执行完这个命令后，在 Linux 控制台中我们会得到 <code>&quot;Hello Virtual UART0&quot;</code> 和 <code>&quot;Hello Virtual UART1&quot;</code>。也就是说，在 CA7 中 Linux 是把消息通道识别成了一个文件描述符 （事实上，所有的文件、外设都是这样的，直接在文件系统中，当做一个普通的文件来处理，应该也是使用 socket 在通信）。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">stty</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-onlcr</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-F</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dev/ttyRPMSG0</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 设置终端取消该设备的echo，回车换行符转换换行符</span></span>
<span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dev/ttyRPMSG0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#FFCB6B;">stty</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-onlcr</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-F</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dev/ttyRPMSG1</span></span>
<span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dev/ttyRPMSG1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello Virtual UART0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">/dev/ttyRPMSG0</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello Virtual UART1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">/dev/ttyRPMSG1</span></span>
<span class="line"></span></code></pre></div></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">**注意**：</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">当使用 \`HAL_Delay()\`的时候，一定要小心，该函数基于 HAL 中时间相关的 Interrupt Service Routine （ISR） 提供的了毫秒级的准确延时。 如果在一个 peripheral ISR 中去调用 \`HAL_Delay()\`，那么相比 peripheral ISR，HAL 时间的中断将有更高的优先级（在数字表示上更小的优先级），否则调用方的 ISR 将会被阻塞。想要更改时间中断的优先级，我们需要使用 \`HAL_NVIC_SetPriority()\` 函数。我们还需要保证 HAL 时间单位总是被设置成 1 毫秒以确保我们 HAL 的行为是正确的。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">该示例中的传输，Channel 1 和 Channel 2 分别承担一个方向的传输。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">​\`\`\`C</span></span>
<span class="line"><span style="color:#A6ACCD;">/*</span></span>
<span class="line"><span style="color:#A6ACCD;"> * Channel direction and usage:</span></span>
<span class="line"><span style="color:#A6ACCD;"> *</span></span>
<span class="line"><span style="color:#A6ACCD;"> *  ========   &lt;-- new msg ---=============--------&lt;------   =======</span></span>
<span class="line"><span style="color:#A6ACCD;"> * ||      ||                || CHANNEL 1 ||                ||     ||</span></span>
<span class="line"><span style="color:#A6ACCD;"> * ||  A7  ||  -------&gt;-------=============--- buf free--&gt;  || M4  ||</span></span>
<span class="line"><span style="color:#A6ACCD;"> * ||      ||                                               ||     ||</span></span>
<span class="line"><span style="color:#A6ACCD;"> * ||master||  &lt;-- buf free---=============--------&lt;------  ||slave||</span></span>
<span class="line"><span style="color:#A6ACCD;"> * ||      ||                || CHANNEL 2 ||                ||     ||</span></span>
<span class="line"><span style="color:#A6ACCD;"> *  ========   -------&gt;-------=============----new msg --&gt;   =======</span></span>
<span class="line"><span style="color:#A6ACCD;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>在第三方库中，virtual_driver 库目录下的 <code>virtual_uart.h/c</code>包含实际开发中用到的接口，是调用的 <code>OpenAMP</code>库，<code>OpenAMP</code> 使用了 <code>libmetal</code> 库的通用接口去管理外设、内存、中断。关于 <code>OpenAMP</code> 官方代码库下的 <code>doc</code> 目录有提供一份用户手册供参考。</p><p>在 <code>openamp_conf.h</code> 中可以通过宏设置是使用 IPCC 还是 HSEM 作为通信机制，也可以通过宏选择是使用 UART 还是 I2C。</p><p>CM4 需要一个进程循环使用 <code>openamp.c</code> 中的 <code>OPENAMP_check_for_message()</code> 来查看是否接收到了数据，如果接收到会调用上面的回调，回调中如果拷贝了接收到的数据，此时就可以在循环中查看接收到的数据，记得清零接收到数据的标记。</p><p>CM4 需要调用 <code>virt_uart.c</code> 中的 <code>VIRT_UART_Transmit()</code> 去向 CA7 传输数据，最大传输数据不可以超过 <code>RPMSG_BUFFER_SIZE-16</code>，该常量定义在 <code>rpmsg_virtio.h</code> 中，是512，也即只能传输 496 字节的数据。所以比较可行的方法是双方互相发送字符串指令去调用对方上的函数？直接传输数据等不太现实。同时，CM4 使用<code>virt_uart.c</code>中的函数 <code>VIRT_UART_RegisterCallback()</code> 向 virtual UART Handler 注册回调函数，在接收到数据后，从 handler 中读取数据大小 <code>handler-&gt;RxXferSize</code> 和数据 <code>huart-&gt;pRxBuffPtr</code>，设置标记表示读取到数据等。<code>virt_uart.c</code> 中也定义了 <code>VIRT_UART_Init()</code>，用来调用 <code>openamp.c</code>中的<code>OPENAMP_create_endpoint()</code> 创建通信端点。<code>VIRT_UART_read_cb()</code>是更低一层的接口，用来向端点所在的 <code>VIRT_UART_HandleTypeDef</code>中写入数据。注意端点本身是在 Virt UART handler 结构体中的，这里找到端点对应的 handler 的方法和 Linux 中链表的使用十分类似，也是定义了一个宏，根据结构体成员的地址和偏移量计算结构体的地址。</p><p><code>openamp.h</code>和<code>openamp.c</code> 是对 <code>rpmsg.h</code> 和 <code>rpmsg.c</code> 中的 API 进行了封装。</p><p><code>mbox_ipcc.c</code> 中，通过 <code>MAILBOX_INIT()</code> 函数，调用<code>HAL_IPCC_ActivateNotification()</code>在两个 IPCC channel 上分别注册回调函数。在接收到数据后，回调函数中设置标志提示 <code>MAILBOX_Poll()</code>函数可以进行读取了，同时会调用提醒 CPU 在哪个 ipcc handler 上哪个通道接收到了数据。在<code>MAILBOX_Poll()</code> 中会检查两个通道上的标记，如果接收信道检测到数据或发送信道为空，则可以调用 <code>rproc_virtio_notified()</code> 来提醒 virtio_device。在 <code>MAILBOX_Notify()</code> 中则会检测信道是否为空（会等待到信道为空），提醒 CA7。</p><p>CM4 上的常用宏</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 普通标记</span></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  RESET </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  SET </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">RESET</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> FlagStatus</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ITStatus</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// HAL的标记</span></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  HAL_OK       </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0x00U</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  HAL_ERROR    </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0x01U</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  HAL_BUSY     </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0x02U</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  HAL_TIMEOUT  </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0x03U</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> HAL_StatusTypeDef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// HAL中锁的标记</span></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  HAL_UNLOCKED </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0x00U</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  HAL_LOCKED   </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0x01U</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> HAL_LockTypeDef</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>根据 <code>stm32mp1xx_hal_ipcc.c</code>中的注释，</p><ul><li><p>For a given channel (from 0 to IPCC_CHANNEL_NUMBER), for a given direction IPCC_CHANNEL_DIR_TX or IPCC_CHANNEL_DIR_RX, you can choose to communicate in polling mode or in interrupt mode using IPCC. By default, the IPCC HAL driver handle the communication in polling mode. By setting a callback for a channel/direction, this communication use the interrupt mode.</p></li><li><p>Polling mode:</p><ul><li><p>To transmit information, use HAL_IPCC_NotifyCPU() with IPCC_CHANNEL_DIR_TX. To know when the other processor has handled the notification, poll the communication using HAL_IPCC_NotifyCPU with IPCC_CHANNEL_DIR_TX.</p></li><li><p>To receive information, poll the status of the communication with HAL_IPCC_GetChannelStatus with IPCC_CHANNEL_DIR_RX. To notify the other processor that the information has been received, use HAL_IPCC_NotifyCPU with IPCC_CHANNEL_DIR_RX.</p></li></ul></li><li><p>Interrupt mode:</p><ul><li><p>Configure a callback for the channel and the direction using HAL_IPCC_ConfigChannel(). This callback will be triggered under interrupt.</p></li><li><p>To transmit information, use HAL_IPCC_NotifyCPU() with IPCC_CHANNEL_DIR_TX. The callback configured with HAL_IPCC_ConfigChannel() and IPCC_CHANNEL_DIR_TX will be triggered once the communication has been handled by the other processor.</p></li><li><p>To receive information, the callback configured with HAL_IPCC_ConfigChannel() and IPCC_CHANNEL_DIR_RX will be triggered on reception of a <a href="http://communication.To" target="_blank" rel="noreferrer">communication.To</a> notify the other processor that the information has been received, use HAL_IPCC_NotifyCPU with IPCC_CHANNEL_DIR_RX.</p></li><li><p>HAL_IPCC_TX_IRQHandler must be added to the IPCC TX IRQHandler</p></li><li><p>HAL_IPCC_RX_IRQHandler must be added to the IPCC RX IRQHandler</p></li></ul></li></ul><p><code>lock_resource.c</code> 中的 <code>Periph_Lock()</code> 函数可以尝试锁定 peripheral，但是如果超过时间限制还没有获取，会返回超时错误。其中设备的 HSM ID 是通过 <code>GET_HSEM_SEM_INDEX</code> 宏定义的，该宏用了很多次三目运算符对每类设备进行判断，如果都不是会返回超出 HSEM 数量的数字，在该开发板上只有32个 Hardware Semaphore，因此该数字是32 （HSEM_SEMID_MAX + 1）。这些常量一般都定义在 <code>stm32mp157cxx_cm4.h</code> 文件中。</p><p><code>virtio.c</code> 中给了一些描述设备名和特性的函数，除此以外，是重要的 <code>virtio_create_virtqueues()</code>，用来根据一系列输入设备指针、队列数量、回调函数等参数创建多个 virtio queue，该函数返回 0 则代表创建成功。因为每次创建 virtio queue 的时候，是在调用 <code>virtqueue.c</code> 中的 <code>virtqueue_create()</code>，如果成功了，则返回 <code>VQUEUE_SUCCESS</code> 值，该常量是0 。</p><p>头文件<code>virtio.h</code>中，定义了一个函数指针表结构体 <code>virtio_dispatch</code>，附属于 <code>virtio_device</code> 结构体，意味着需要为每种支持的设备单独实现一遍这些函数。</p><p><code>virtqueue.c</code> 定义了数据结构及其方法，<code>virtqueue_create()</code>中 virtio 队列 vq 的 <code>notify</code>函数是需要根据设备定义的。</p><h3 id="相关数据结构" tabindex="-1">相关数据结构： <a class="header-anchor" href="#相关数据结构" aria-hidden="true">#</a></h3><h4 id="libmetal-helper-data-struct" tabindex="-1">Libmetal helper data struct <a class="header-anchor" href="#libmetal-helper-data-struct" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">struct metal_io_region {</span></span>
<span class="line"><span style="color:#A6ACCD;">	char name[64];                      /**&lt; I/O region name */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void                    *virt;      /**&lt; base virtual address */</span></span>
<span class="line"><span style="color:#A6ACCD;">	const metal_phys_addr_t *physmap;   /**&lt; table of base physical address</span></span>
<span class="line"><span style="color:#A6ACCD;">	                                         of each of the pages in the I/O</span></span>
<span class="line"><span style="color:#A6ACCD;">	                                         region */</span></span>
<span class="line"><span style="color:#A6ACCD;">	size_t                  size;       /**&lt; size of the I/O region */</span></span>
<span class="line"><span style="color:#A6ACCD;">	unsigned long           page_shift; /**&lt; page shift of I/O region */</span></span>
<span class="line"><span style="color:#A6ACCD;">	metal_phys_addr_t       page_mask;  /**&lt; page mask of I/O region */</span></span>
<span class="line"><span style="color:#A6ACCD;">	unsigned int            mem_flags;  /**&lt; memory attribute of the</span></span>
<span class="line"><span style="color:#A6ACCD;">	                                         I/O region */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_io_ops     ops;        /**&lt; I/O region operations */</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">/** Libmetal device structure. */</span></span>
<span class="line"><span style="color:#A6ACCD;">struct metal_device {</span></span>
<span class="line"><span style="color:#A6ACCD;">	const char             *name;       /**&lt; Device name */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_bus       *bus;        /**&lt; Bus that contains device */</span></span>
<span class="line"><span style="color:#A6ACCD;">	unsigned               num_regions; /**&lt; Number of I/O regions in</span></span>
<span class="line"><span style="color:#A6ACCD;">	                                      device */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_io_region regions[METAL_MAX_DEVICE_REGIONS]; /**&lt; Array of</span></span>
<span class="line"><span style="color:#A6ACCD;">	                                                I/O regions in device*/</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_list      node;       /**&lt; Node on bus&#39; list of devices */</span></span>
<span class="line"><span style="color:#A6ACCD;">	int                    irq_num;    /**&lt; Number of IRQs per device */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void                   *irq_info;  /**&lt; IRQ ID */</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="remoteproc-data-struct" tabindex="-1">Remoteproc data struct <a class="header-anchor" href="#remoteproc-data-struct" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">struct remoteproc {</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_device dev;       /**&lt; Each remoteproc has a device, each device knows its memories regions */</span></span>
<span class="line"><span style="color:#A6ACCD;">	metal_mutex_t lock;            /**&lt; mutex lock */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void *rsc_table;               /**&lt; pointer to resource table */</span></span>
<span class="line"><span style="color:#A6ACCD;">	size_t rsc_len;                /**&lt; length of the resoruce table */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct remoteproc_ops *ops;    /**&lt; pointer to remoteproc operation */</span></span>
<span class="line"><span style="color:#A6ACCD;">	metal_phys_addr_t bootaddr;    /**&lt; boot address */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct loader_ops *loader_ops; /**&lt; image loader operation */</span></span>
<span class="line"><span style="color:#A6ACCD;">	unsigned int state;            /**&lt; remoteproc state */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_list vdevs;       /**&lt; list of vdevs  (can we limited to one for code size but linux and resource table supports multiple */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void *priv;                    /**&lt; remoteproc private data */</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">struct remoteproc_vdev {</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_list node;          /**&lt; node */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct remoteproc *rproc;        /**&lt; pointer to the remoteproc instance */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct virtio_dev;               /**&lt; virtio device */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint32_t notify_id;              /**&lt; virtio device notification ID */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void *vdev_rsc;                  /**&lt; pointer to the vdev space in resource table */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_io_region *vdev_io; /**&lt; pointer to the vdev space I/O region */ </span></span>
<span class="line"><span style="color:#A6ACCD;">	int vrings_num;                  /**&lt; number of vrings */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct rproc_vrings[1];          /**&lt; vrings array */</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">struct remoteproc_vring {</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct remoteproc_vdev *rpvdev;  /**&lt; pointer to the remoteproc vdev */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint32_t notify_id;              /**&lt; vring notify id */</span></span>
<span class="line"><span style="color:#A6ACCD;">	size_t len;                      /**&lt; vring length */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint32_t alignment;              /**&lt; vring alignment */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void *va;                        /**&lt; vring start virtual address */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_io_region *io;      /**&lt; pointer to the vring I/O region */</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="virtio-data-struct" tabindex="-1">Virtio Data struct <a class="header-anchor" href="#virtio-data-struct" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">struct virtio_dev {</span></span>
<span class="line"><span style="color:#A6ACCD;">	int index;                               /**&lt; unique position on the virtio bus */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct virtio_device_id id;              /**&lt; the device type identification (used to match it with a driver). */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_device *dev;                /**&lt; do we need this in virtio device ? */</span></span>
<span class="line"><span style="color:#A6ACCD;">	metal_spinlock lock;                     /**&lt; spin lock */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint64_t features;                       /**&lt; the features supported by both ends. */</span></span>
<span class="line"><span style="color:#A6ACCD;">	unsigned int role;                       /**&lt; if it is virtio backend or front end. */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void (*rst_cb)(struct virtio_dev *vdev); /**&lt; user registered virtio device callback */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void *priv;                              /**&lt; pointer to virtio_dev private data */</span></span>
<span class="line"><span style="color:#A6ACCD;">	int vrings_num;                          /**&lt; number of vrings */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct virtqueue vqs[1];                 /**&lt; array of virtqueues */</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">struct virtqueue {</span></span>
<span class="line"><span style="color:#A6ACCD;">	char vq_name[VIRTQUEUE_MAX_NAME_SZ];    /**&lt; virtqueue name */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct virtio_device *vdev;             /**&lt; pointer to virtio device */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint16_t vq_queue_index;</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint16_t vq_nentries;</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint32_t vq_flags;</span></span>
<span class="line"><span style="color:#A6ACCD;">	int vq_alignment;</span></span>
<span class="line"><span style="color:#A6ACCD;">	int vq_ring_size;</span></span>
<span class="line"><span style="color:#A6ACCD;">	boolean vq_inuse;</span></span>
<span class="line"><span style="color:#A6ACCD;">	void *vq_ring_mem;</span></span>
<span class="line"><span style="color:#A6ACCD;">	void (*callback) (struct virtqueue * vq); /**&lt; virtqueue callback */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void (*notify) (struct virtqueue * vq);   /**&lt; virtqueue notify remote function */</span></span>
<span class="line"><span style="color:#A6ACCD;">	int vq_max_indirect_size;</span></span>
<span class="line"><span style="color:#A6ACCD;">	int vq_indirect_mem_size;</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct vring vq_ring;</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint16_t vq_free_cnt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint16_t vq_queued_cnt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_io_region *buffers_io; /**&lt; buffers shared memory */</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">	/*</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * Head of the free chain in the descriptor table. If</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * there are no free descriptors, this will be set to</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * VQ_RING_DESC_CHAIN_END.</span></span>
<span class="line"><span style="color:#A6ACCD;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint16_t vq_desc_head_idx;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">	/*</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * Last consumed descriptor in the used table,</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * trails vq_ring.used-&gt;idx.</span></span>
<span class="line"><span style="color:#A6ACCD;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint16_t vq_used_cons_idx;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">	/*</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * Last consumed descriptor in the available table -</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * used by the consumer side.</span></span>
<span class="line"><span style="color:#A6ACCD;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint16_t vq_available_idx;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">	uint8_t padd;</span></span>
<span class="line"><span style="color:#A6ACCD;">	/*</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * Used by the host side during callback. Cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * holds the address of buffer received from other side.</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * Other fields in this structure are not used currently.</span></span>
<span class="line"><span style="color:#A6ACCD;">	 * Do we needed??/</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct vq_desc_extra {</span></span>
<span class="line"><span style="color:#A6ACCD;">		void *cookie;</span></span>
<span class="line"><span style="color:#A6ACCD;">		struct vring_desc *indirect;</span></span>
<span class="line"><span style="color:#A6ACCD;">		uint32_t indirect_paddr;</span></span>
<span class="line"><span style="color:#A6ACCD;">		uint16_t ndescs;</span></span>
<span class="line"><span style="color:#A6ACCD;">	} vq_descx[0];</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">struct vring {</span></span>
<span class="line"><span style="color:#A6ACCD;">	unsigned int num;   /**&lt; number of buffers of the vring */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct vring_desc *desc;</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct vring_avail *avail;</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct vring_used *used;</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="rpmsg-data-struct" tabindex="-1">RPMsg Data struct <a class="header-anchor" href="#rpmsg-data-struct" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">struct rpmsg_virtio_device {</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct virtio_dev *vdev;           /**&lt; pointer to the virtio device */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct virtqueue *rvq;             /**&lt; pointer to receive virtqueue */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct virtqueue *svq;             /**&lt; pointer to send virtqueue */</span></span>
<span class="line"><span style="color:#A6ACCD;">	int buffers_number;                /**&lt; number of shared buffers */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_io_region *shbuf_io;  /**&lt; pointer to the shared buffer I/O region */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void *shbuf;</span></span>
<span class="line"><span style="color:#A6ACCD;">	int (*new_endpoint_cb)(const char *name, uint32_t addr); /**&lt; name service announcement user designed callback which is used for when there is a name service announcement, there is no local endpoints waiting to bind */</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct metal_list endpoints;       /**&lt; list of endpoints */</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">struct rpmsg_endpoint {</span></span>
<span class="line"><span style="color:#A6ACCD;">	char name[SERVICE_NAME_SIZE];</span></span>
<span class="line"><span style="color:#A6ACCD;">	struct rpmsg_virtio_dev *rvdev;                                                                           /**&lt; pointer to the RPMsg virtio device */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint32_t addr;                                                                                            /**&lt; endpoint local address */</span></span>
<span class="line"><span style="color:#A6ACCD;">	uint32_t dest_addr;                                                                                       /**&lt; endpoint default target address */</span></span>
<span class="line"><span style="color:#A6ACCD;">	int (*cb)(struct rpmsg_endpoint *ept, void *data, struct metal_io_region *io, size_t len, uint32_t addr); /**&lt; endpoint callback */</span></span>
<span class="line"><span style="color:#A6ACCD;">	void (*destroy)(struct rpmsg_endpoint *ept);                                                              /**&lt; user registerd endpoint destory callback */</span></span>
<span class="line"><span style="color:#A6ACCD;">	/* Whether we need another callback for ack ns announcement? */</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="tiny-os-移植" tabindex="-1">Tiny OS 移植 <a class="header-anchor" href="#tiny-os-移植" aria-hidden="true">#</a></h2><p>首先在 STM32CubeIDE中用 STM32CubeMX仿照 LED 和外部中断那两个示例，设置好引脚和中断。</p><p>接下来移植 Tiny OS。STM32CubeIDE 是基于 Eclipse 和 arm-gcc 的，添加PATH 和修改配置文件可以凭借类似的经验或文档来。</p><p>事实上可以让 STM32CubeMX 自动生成带 FreeRTOS 的代码，然后参考 <code>RT_CM4/Core/Inc</code> 目录下的 FreeRTOSConfig.h 来设置。</p><p>如果是用 STM32CubeMX 配置 RTOS，会提示使用 HAL timebase source 而不是用 Systick。可以通过前面的 Pinout 部分的 SYS 选项设置，需要启用 TIMx，这个在下小节记录。</p><p>在 <code>board</code> 目录下找到最接近的一个。STM32F103 是 Cortex-M3，STM32F401 是 84 MHZ Cortex-M4，STM32F407 是 168 MHZ Cortex-M4，STM32F745 是 Cortex-M7。所以我们使用 STM32F401 或 STM32F407 下面的 <code>board/xxx/tos_config.h</code>，把 <code>#include &quot;stm32f4xx.h&quot;</code> 修改为 <code>#include &quot;stm32mp1xx.h&quot;</code>（因为板子是 mp157）。</p><p>主要需要的源码就是 <code>arch/arm/arm-v7m/</code> 下的 <code>common</code> 和 <code>cortex-m4/gcc</code> （由于 STM32CubeIDE 自带了 gcc ）；<code>kernel</code> 目录下的源码；<code>osal/cmsis_os</code> 也需要一份，以便使用标准接口。</p><p>刚刚 tos_config 参考的 <code>board/xxx/</code> 示例里面，有写如何在<code>main.c</code>中启动os，添加应用。他们把板子的初始化放到 <code>mcu_init.c</code> 中了，我们也这么移动，让<code>main.c</code> 简洁一些。</p><p>在 STM32CubeIDE 中设置 <code>include</code> 目录。</p><p>重复定义项需要删掉：</p><ul><li><code>stm32mp1xx_it.c</code> 自动生成的<code>PendSV_Handler()</code></li></ul><p>示例中使用的 cmsis_os 是旧版的接口（新版中没有），所以要用的是 <code>cmsis_os.h</code>。或者在 <code>platform/vendor_bsp/st/CMSIS/RTOS2/Template</code> 下的 <code>cmsis_os.h</code> 中则根据预处理宏选择了头文件的版本，如果是要求用 2.0 往上的接口，会用宏做替换。</p><p>此时可以尝试编译了，成功编译后，接下来用一小段程序验证一下是否成功跑起来了os，创建一个应用入口程序（这里用的是 cmsis_os2格式的接口，也可以用 TencentOS-tiny 创建 task 的风格，腾讯官方都做了支持；分配给每个各个任务的栈大小需要提前考虑好，不然各种奇葩的错误……）：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">__weak </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">application_entry</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// printf(&quot;This is a demo task,please use your task entry!\\r\\n&quot;);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">HAL_GPIO_TogglePin</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">GPIOZ</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> GPIO_PIN_5</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">HAL_Delay</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">500</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>上面这段写入板子后，正常情况应该看到 LED 闪烁。</p><p>本来还想测试按键中断，但是暂时不知道为什么启动 os 后按键中断无法触发。</p><p>如果是打算做AMP相关的实验，还需要把 IPCC 相关的都激活，这里因为是在 MPU 内部，所以不需要设置引脚。Middleware 那里把 OpenAMP 相关激活，FreeRTOS 亮着但是默认是禁用的，不用管。</p><p>后续可能会用到的源码：<code>platform\\xx\\st</code> 下有有关 ST 的 HAL 实现，但是目前还没有针对 stm32mp1xx 的。但是查看 <code>platform/hal/st/stm32f1xx/src/tos_hal_uart.c</code> 和 <code>platform/hal/st/stm32f4xx/src/tos_hal_uart.c</code> 后，发现并没有多大的区别，只是 stm32f1xx 板子上的 <code>HAL_UART_Transmit()</code> 函数会返回状态值，可以判断是否传输成功，那么对 stm32mp1xx，用到的时候自己去看着改一下就行了。</p><p>应该还有一些常量和宏的定义可能需要修改但是目前还没有用到。</p><p>在 <code>/components/</code>目录下选择我们需要的文件系统部分 <code>fs</code> 和 elf 文件读取功能支持 <code>elfloader</code>，添加到 STM32CubeIDE 中</p><h4 id="hal-timebase-source-systick" tabindex="-1">HAL timebase source / Systick <a class="header-anchor" href="#hal-timebase-source-systick" aria-hidden="true">#</a></h4><p>如果是用 STM32CubeIDE 自动生成带 RTOS 的代码，会有相关提示，应该还是说程序的中断和时钟中断优先级的问题</p>`,213),D=[_];function m(g,f,M,b,v,P){return n(),e("div",null,D)}const x=s(h,[["render",m]]);export{T as __pageData,x as default};
