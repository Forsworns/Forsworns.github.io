import{_ as s,c as a,o as n,e}from"./app.834e0db5.js";const C=JSON.parse('{"title":"SJTU HPC平台使用","description":"使用心得、常用命令","frontmatter":{"title":"SJTU HPC平台使用","description":"使用心得、常用命令","tags":["shell"]},"headers":[{"level":2,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[]},{"level":2,"title":"邮件提醒","slug":"邮件提醒","link":"#邮件提醒","children":[]},{"level":2,"title":"Pytorch 使用示例","slug":"pytorch-使用示例","link":"#pytorch-使用示例","children":[]},{"level":2,"title":"关于计费","slug":"关于计费","link":"#关于计费","children":[]},{"level":2,"title":"Tmux","slug":"tmux","link":"#tmux","children":[]},{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]}],"relativePath":"zh/blogs/20210506/index.md"}'),l={name:"zh/blogs/20210506/index.md"},t=e(`<nav class="table-of-contents"><ul><li><a href="#使用方法">使用方法</a></li><li><a href="#邮件提醒">邮件提醒</a></li><li><a href="#pytorch-使用示例">Pytorch 使用示例</a></li><li><a href="#关于计费">关于计费</a></li><li><a href="#tmux">Tmux</a></li><li><a href="#常用命令">常用命令</a></li></ul></nav><h1 id="sjtu-hpc-使用笔记" tabindex="-1">SJTU HPC 使用笔记 <a class="header-anchor" href="#sjtu-hpc-使用笔记" aria-hidden="true">#</a></h1><p><a href="https://docs.hpc.sjtu.edu.cn/" target="_blank" rel="noreferrer">上海交大超算平台用户手册 文档 (sjtu.edu.cn)</a></p><p>登录节点 <code>ssh user@login.hpc.sjtu.edu.cn</code></p><p>可视化平台 <a href="https://studio.hpc.sjtu.edu.cn/" target="_blank" rel="noreferrer">https://studio.hpc.sjtu.edu.cn/</a></p><p>安装包、编译最好提前申请计算资源，在登陆节点运行计算密集的作业，将会被程序自动查杀，您的账号会被加入到黑名单，并在30-120 分钟内无法登陆，申请节点方法如下</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">srun</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">small</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-n</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--pty</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span>
<span class="line"></span></code></pre></div><p>数据传输用 scp 传给 data 节点：<strong><a href="http://data.hpc.sjtu.edu.cn" target="_blank" rel="noreferrer">data.hpc.sjtu.edu.cn</a></strong></p><p>远程桌面会计费</p><p>默认单作业最长运行 7 天</p><p>不提供商业软件，开源软件需要查看列表，没有的写邮件申请</p><p>moudle av 查看有啥能加载的模块， moudle list 查看加载了什么模块</p><p>交互命令行下，记得设置发送心跳包，XShell 是在会话属性—连接——保持活动状态中</p><p>没法用任何涉及 sudo 的命令，但是好像是不让自己安装软件的（把软件安装到用户空间……逃</p><p>vscode 的 remote explorer 里创建 ssh target 连过去还是很爽的</p><p>HPC 提供的是 32 GB 的 V100，既然是按时计费没用满血亏</p><h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-hidden="true">#</a></h2><p>使用前请阅读文档！不要在登录节点进行大型任务以防影像别人的正常登录。有两种提交任务的方法：</p><ol><li><p>使用hpc教程中推荐的任务脚本提交方式。好处是可以在hpc占用高时，由系统调度任务，不必等待分配，坏处是在不确定程序正确性时可能空跑很久浪费资金，且查看实验输出时不方便</p></li><li><p>请求节点开启bash进行交互，例如，可以使用以下命令申请一个带单个GPU，六个CPU的节点： srun -n 1 -p dgx2 --gres=gpu:1 --cpus-per-task=6 --pty /bin/bash 等待分配好节点，配合 tmux/screen 使用</p></li></ol><h2 id="邮件提醒" tabindex="-1">邮件提醒 <a class="header-anchor" href="#邮件提醒" aria-hidden="true">#</a></h2><p>邮件提醒的 slurm 示例脚本，提醒事件的可选项有 ALL, BEGIN, END, FAIL</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --job-name=test</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --partition=small</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH -n 20</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --ntasks-per-node=20</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --output=%j.out</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --error=%j.err</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --mail-type=end           # 作业结束时，邮件提醒</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --mail-user=XX@sjtu.edu.cn</span></span>
<span class="line"></span></code></pre></div><h2 id="pytorch-使用示例" tabindex="-1">Pytorch 使用示例 <a class="header-anchor" href="#pytorch-使用示例" aria-hidden="true">#</a></h2><p><code>module load miniconda3</code> 加载 miniconda3 模块</p><p>在 DGX-2 上使用 pytorch。作业使用单节点，分配 2 块 GPU，GPU:CPU 配比 1:6。脚本名称可设为 slurm.test</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH -J test</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH -p dgx2</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH -o %j.out</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH -e %j.err</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH -N 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --ntasks-per-node=1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --cpus-per-task=12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#SBATCH --gres=gpu:2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># module load cuda # 在其他 partition 上不主动加载不行，可能 DGX-2 上默认加载了，不过可能其他分区也不应该使用显卡资源</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 因为在装包的时候想看一下 cuda 版本，交互是用的 small 分区，不加载 cuda module 找不到 nvcc 应用</span></span>
<span class="line"><span style="color:#FFCB6B;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">load</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">miniconda3</span></span>
<span class="line"><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">activate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pytorch-env</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">python</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">import torch; print(torch.__version__); print(torch.zeros(10,10).cuda().shape)</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>其实就是把想要执行的任务写到脚本里，不想用脚本的话，看下面的笔记，tmux维持着交互式的窗口就行了</p><p>conda init 过以后，<strong>切环境记得先 deactivate，再 activate 目标环境……（为什么不自动 deactivate 掉前一个环境呢？？？</strong></p><p>使用以下指令提交作业</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sbatch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">slurm.test</span></span>
<span class="line"></span></code></pre></div><h2 id="关于计费" tabindex="-1">关于计费 <a class="header-anchor" href="#关于计费" aria-hidden="true">#</a></h2><p><a href="https://studio.hpc.sjtu.edu.cn/pun/sys/activejobs" target="_blank" rel="noreferrer">Active Jobs - HPC Studio (sjtu.edu.cn)</a></p><p><a href="https://account.hpc.sjtu.edu.cn/#/login" target="_blank" rel="noreferrer">HPC与AI平台 (sjtu.edu.cn)</a></p><p>在 Active jobs 里可以看到自己的使用的计算资源，登录节点和数据节点是不计费的</p><p>关闭 ssh 窗口后会话终止，会自动停止掉计费，使用类似 screen、tmux 的工具的话自然会接着计费</p><h2 id="tmux" tabindex="-1">Tmux <a class="header-anchor" href="#tmux" aria-hidden="true">#</a></h2><p>服务器装的是 tmux，和之前用过的 screen 类似，可以在 ssh 会话结束后保持会话期间的命令正常运行</p><p>tmux 按 <code>ctrl+b</code> 后可以输入命令选项（类似 vim 的命令模式），比如<code>%</code>是左右分屏，<code>&quot;</code>是上下分屏，<code>d</code> 是退出当前 session，<code>x</code> 是关掉当前session</p><p><strong>注意</strong>：在 login 节点创建的 tmux session 在退出后才会继续运行，如果是用计算节点创建的 tmux session，关掉本地命令行，远端计算资源和所有 session 也会随之释放。所以正确的使用姿势（不想用 slurm 脚本的话）是登录到 login 节点，创建 tmux session，进session 后再申请计算资源。但是此时如果用 tmux 分屏，默认还是 login 节点，所以想分屏后命令行仍然是计算节点的话，需要在计算节点的 session 下再次创建 session，但是 tmux 不推荐这么搞，会提示使用特殊的方式启动……</p><p>如果用域名登陆服务器，每次登陆可能会给解析到不同节点，用ip登吧</p><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-hidden="true">#</a></h2><p>资源监视：<code>nvidia-smi</code> 查看显卡相关信息，<code>top</code> 查看 cpu、内存等资源，<code>df</code> 查看磁盘容量；可以配合 <code>watch</code> 命令使用，比如每十秒打印一次显卡情况 <code>watch -n 10 nvidia-smi</code></p><p>有标准输出的程序，想在它执行中间干点别的事情。可以这样：或者直接把输出流重定向到文件里并且让它默认到后台去执行，比如<code>python main.py &gt; log.txt &amp;</code>。或者用<code>ctrl+z</code> 先把任务切到后台，然后再开别的任务，最后再用 <code>jobs</code> 配合 <code>fg</code> 命令切回来，比如 <code>jobs</code> 下看到它是 1 号，那<code>fg 1</code> 就又回来接着执行它了</p><p>永远记住<code>man</code> 命令，想不起来 <code>man</code> 一下</p><p>vi 和 vim 的一些区别，比如 vi 不允许在编辑模式下（按下 i 时）用方向键移动光标</p>`,45),p=[t];function o(c,i,r,d,h,u){return n(),a("div",null,p)}const m=s(l,[["render",o]]);export{C as __pageData,m as default};
