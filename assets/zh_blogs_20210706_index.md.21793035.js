import{_ as s,c as n,o as a,e as l}from"./app.bbbac65d.js";const F=JSON.parse('{"title":"BPF Type Format (BTF)","description":"BPF Type Format (BTF) 文章翻译笔记","frontmatter":{"title":"BPF Type Format (BTF)","description":"BPF Type Format (BTF) 文章翻译笔记","tags":["bpf","翻译"]},"headers":[{"level":2,"title":"1. Introduction","slug":"_1-introduction","link":"#_1-introduction","children":[]},{"level":2,"title":"2. BTF Type and String Encoding","slug":"_2-btf-type-and-string-encoding","link":"#_2-btf-type-and-string-encoding","children":[{"level":3,"title":"2.1 String Encoding","slug":"_2-1-string-encoding","link":"#_2-1-string-encoding","children":[]},{"level":3,"title":"2.2 Type Encoding","slug":"_2-2-type-encoding","link":"#_2-2-type-encoding","children":[]}]},{"level":2,"title":"3. BTF Kernel API","slug":"_3-btf-kernel-api","link":"#_3-btf-kernel-api","children":[]},{"level":2,"title":"4. ELF File Format Interface","slug":"_4-elf-file-format-interface","link":"#_4-elf-file-format-interface","children":[{"level":3,"title":"4.1 .BTF section","slug":"_4-1-btf-section","link":"#_4-1-btf-section","children":[]},{"level":3,"title":"4.2 .BTF.ext section","slug":"_4-2-btf-ext-section","link":"#_4-2-btf-ext-section","children":[]},{"level":3,"title":"4.2 .BTF_ids section","slug":"_4-2-btf-ids-section","link":"#_4-2-btf-ids-section","children":[]}]},{"level":2,"title":"5. Using BTF","slug":"_5-using-btf","link":"#_5-using-btf","children":[{"level":3,"title":"5.1 bpftool map pretty print","slug":"_5-1-bpftool-map-pretty-print","link":"#_5-1-bpftool-map-pretty-print","children":[]},{"level":3,"title":"5.2 bpftool prog dump","slug":"_5-2-bpftool-prog-dump","link":"#_5-2-bpftool-prog-dump","children":[]},{"level":3,"title":"5.3 Verifier Log","slug":"_5-3-verifier-log","link":"#_5-3-verifier-log","children":[]}]},{"level":2,"title":"6. BTF Generation","slug":"_6-btf-generation","link":"#_6-btf-generation","children":[]}],"relativePath":"zh/blogs/20210706/index.md"}'),p={name:"zh/blogs/20210706/index.md"},o=l(`<h1 id="bpf-type-format-btf" tabindex="-1">BPF Type Format (BTF) <a class="header-anchor" href="#bpf-type-format-btf" aria-hidden="true">#</a></h1><p>翻译自：<a href="https://www.kernel.org/doc/html/latest/bpf/btf.html" target="_blank" rel="noreferrer">Linux Kernel Doc</a></p><h2 id="_1-introduction" tabindex="-1">1. Introduction <a class="header-anchor" href="#_1-introduction" aria-hidden="true">#</a></h2><p>BTF (BPF Type Format) 是编码 BPF 程序、映射相关的 debug 信息的元数据格式。名称 BTF 最开始是用来描述数据类型的，之后被扩展，包含了预定义的子例程的函数信息以及源码中的 line info。</p><p>debug 信息被用来格式化打印和提供函数签名等信息。函数签名优化了 bpf 程序/函数的内核符号。line info 则可以生成经过标注的字节码，jited 代码和验证器记录。</p><p>BTF 包含两部分：</p><ul><li>BTF kernel API</li><li>BTF ELF file format</li></ul><p>内核 API 是用户空间和内核之间沟通的桥梁。内核在使用 BTF 信息之前验证了它。ELF 文件格式则是一个用户空间的 ELF 文件和 libbpf loader 之间的协议。</p><p>类型和字符串段是 BTF 内核 API 的一部分，描述了 bpf 程序引用到的（几乎是类型相关的）debug 信息。</p><h2 id="_2-btf-type-and-string-encoding" tabindex="-1">2. BTF Type and String Encoding <a class="header-anchor" href="#_2-btf-type-and-string-encoding" aria-hidden="true">#</a></h2><p>头文件 <code>include/uapi/linux/btf.h</code> 中提供了类型和字符串是如何编码的高阶定义。</p><p>data blob 的开头必须是：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> btf_header </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    __u16   magic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u8    version</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u8    flags</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u32   hdr_len</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* All offsets are in bytes relative to the end of this header */</span></span>
<span class="line"><span style="color:#F07178;">    __u32   type_off</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">       /* offset of type section       */</span></span>
<span class="line"><span style="color:#F07178;">    __u32   type_len</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">       /* length of type section       */</span></span>
<span class="line"><span style="color:#F07178;">    __u32   str_off</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">        /* offset of string section     */</span></span>
<span class="line"><span style="color:#F07178;">    __u32   str_len</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">        /* length of string section     */</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>魔数 <code>magic</code> 是 <code>0xeB9F</code>，它在大端和小端系统中编码顺序不同，因此可以用来检验 BTF 是由大端还是小端目标机器生成的。<code>btf_header</code> 被设计成了可拓展的，当 data blob 生成时，它的<code>hdr_len</code> 等于<code>sizeof(struct btf_header)</code>。</p><h3 id="_2-1-string-encoding" tabindex="-1">2.1 String Encoding <a class="header-anchor" href="#_2-1-string-encoding" aria-hidden="true">#</a></h3><p>在上面的结构体中，字符串段第一个字符串一定是一个空字符串。字符串表剩下的部分是其他以空字符为结尾的字符串的拼接。</p><h3 id="_2-2-type-encoding" tabindex="-1">2.2 Type Encoding <a class="header-anchor" href="#_2-2-type-encoding" aria-hidden="true">#</a></h3><p>类型 ID <code>0</code> 预留给了 <code>void</code> 类型。类型部分是顺序解析的，并且分配了类型 ID 给可以解析的类型，是从 <code>1</code> 开始的。目前支持下面这些类型：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_INT</span><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">1</span><span style="color:#676E95;font-style:italic;">       /* Integer      */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_PTR</span><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">2</span><span style="color:#676E95;font-style:italic;">       /* Pointer      */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_ARRAY</span><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">3</span><span style="color:#676E95;font-style:italic;">       /* Array        */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_STRUCT</span><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">4</span><span style="color:#676E95;font-style:italic;">       /* Struct       */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_UNION</span><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">5</span><span style="color:#676E95;font-style:italic;">       /* Union        */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_ENUM</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">6</span><span style="color:#676E95;font-style:italic;">       /* Enumeration  */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_FWD</span><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">7</span><span style="color:#676E95;font-style:italic;">       /* Forward      */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_TYPEDEF</span><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">8</span><span style="color:#676E95;font-style:italic;">       /* Typedef      */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_VOLATILE</span><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">9</span><span style="color:#676E95;font-style:italic;">       /* Volatile     */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_CONST</span><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">10</span><span style="color:#676E95;font-style:italic;">      /* Const        */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_RESTRICT</span><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">11</span><span style="color:#676E95;font-style:italic;">      /* Restrict     */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_FUNC</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">12</span><span style="color:#676E95;font-style:italic;">      /* Function     */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_FUNC_PROTO</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">13</span><span style="color:#676E95;font-style:italic;">      /* Function Proto       */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_VAR</span><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">14</span><span style="color:#676E95;font-style:italic;">      /* Variable     */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BTF_KIND_DATASEC</span><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">15</span><span style="color:#676E95;font-style:italic;">      /* Section      */</span></span>
<span class="line"></span></code></pre></div><p>注意类型段不只是纯粹的类型信息，还编码了为 debug 而存在的信息。例如 <code>BTF_KIND_FUNC</code> 就不是一个类型，它代表着一个定义好的程序。每个类型都包含有下面的公共数据：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> btf_type </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    __u32 name_off</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* 32 位的 &quot;info&quot; 变量各位的含义</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * bits  0-15: vlen (e.g. # of struct&#39;s members)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * bits 16-23: unused</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * bits 24-27: kind (e.g. int, ptr, array...etc)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * bits 28-30: unused</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * bit     31: kind_flag, currently used by</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *             struct, union and fwd</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    __u32 info</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* &quot;size&quot; is used by INT, ENUM, STRUCT and UNION.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * &quot;size&quot; tells the size of the type it is describing.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * &quot;type&quot; is used by PTR, TYPEDEF, VOLATILE, CONST, RESTRICT,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * FUNC and FUNC_PROTO.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * &quot;type&quot; is a type_id referring to another type.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">union</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            __u32 size</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            __u32 type</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>对于特定的类型，公共数据之后就是他们各自独特的数据。 结构体<code>struct btf_type</code>中的<code>name_off</code> 指定了特定类型在字符串表中的偏移。</p><h2 id="_3-btf-kernel-api" tabindex="-1">3. BTF Kernel API <a class="header-anchor" href="#_3-btf-kernel-api" aria-hidden="true">#</a></h2><p>下列 bpf 系统调用命令包含了 BTF，除此以外还有很多<a href="https://www.kernel.org/doc/html/latest/bpf/btf.html#btf-kernel-api" target="_blank" rel="noreferrer">其他调用</a></p><ul><li><p>BPF_BTF_LOAD：将一个 blob 的 BTF 数据加载到 kernel 中。</p></li><li><p>BPF_MAP_CREATE：创建有 BTF 键和类型信息值的映射。</p></li><li><p>BPF_PROG_LOAD：加载有 BTF 函数和 line 信息的程序。</p></li><li><p>BPF_BTF_GET_FD_BY_ID：得到一个 BTF 文件描述符 fd。</p></li><li><p>BPF_OBJ_GET_INFO_BY_FD：该函数将返回 BTF，函数信息，line 信息和其他 BTF 相关信息。</p></li></ul><p>工作流通常看上去是这样的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Application:</span></span>
<span class="line"><span style="color:#A6ACCD;">    BPF_BTF_LOAD</span></span>
<span class="line"><span style="color:#A6ACCD;">        |</span></span>
<span class="line"><span style="color:#A6ACCD;">        v</span></span>
<span class="line"><span style="color:#A6ACCD;">    BPF_MAP_CREATE and BPF_PROG_LOAD</span></span>
<span class="line"><span style="color:#A6ACCD;">        |</span></span>
<span class="line"><span style="color:#A6ACCD;">        V</span></span>
<span class="line"><span style="color:#A6ACCD;">    ......</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Introspection tool:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ......</span></span>
<span class="line"><span style="color:#A6ACCD;">    BPF_{PROG,MAP}_GET_NEXT_ID (get prog/map id&#39;s)</span></span>
<span class="line"><span style="color:#A6ACCD;">        |</span></span>
<span class="line"><span style="color:#A6ACCD;">        V</span></span>
<span class="line"><span style="color:#A6ACCD;">    BPF_{PROG,MAP}_GET_FD_BY_ID (get a prog/map fd)</span></span>
<span class="line"><span style="color:#A6ACCD;">        |</span></span>
<span class="line"><span style="color:#A6ACCD;">        V</span></span>
<span class="line"><span style="color:#A6ACCD;">    BPF_OBJ_GET_INFO_BY_FD (get bpf_prog_info/bpf_map_info with btf_id)</span></span>
<span class="line"><span style="color:#A6ACCD;">        |                                     |</span></span>
<span class="line"><span style="color:#A6ACCD;">        V                                     |</span></span>
<span class="line"><span style="color:#A6ACCD;">    BPF_BTF_GET_FD_BY_ID (get btf_fd)         |</span></span>
<span class="line"><span style="color:#A6ACCD;">        |                                     |</span></span>
<span class="line"><span style="color:#A6ACCD;">        V                                     |</span></span>
<span class="line"><span style="color:#A6ACCD;">    BPF_OBJ_GET_INFO_BY_FD (get btf)          |</span></span>
<span class="line"><span style="color:#A6ACCD;">        |                                     |</span></span>
<span class="line"><span style="color:#A6ACCD;">        V                                     V</span></span>
<span class="line"><span style="color:#A6ACCD;">    pretty print types, dump func signatures and line info, etc.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="_4-elf-file-format-interface" tabindex="-1">4. ELF File Format Interface <a class="header-anchor" href="#_4-elf-file-format-interface" aria-hidden="true">#</a></h2><h3 id="_4-1-btf-section" tabindex="-1">4.1 .BTF section <a class="header-anchor" href="#_4-1-btf-section" aria-hidden="true">#</a></h3><p><code>.BTF</code> 段包含着类型数据和字符串数据。这部分的格式和 <a href="https://www.kernel.org/doc/html/latest/bpf/btf.html#btf-type-and-string-encoding" target="_blank" rel="noreferrer">2. BTF Type and String Encoding</a> 中描述的一样。</p><h3 id="_4-2-btf-ext-section" tabindex="-1">4.2 .BTF.ext section <a class="header-anchor" href="#_4-2-btf-ext-section" aria-hidden="true">#</a></h3><p><code>.BTF.ext</code> 段编码了 func_info 和 line_info，需要使用 loader 才会被加载到内核中。</p><p><code>.BTF.ext </code> 段的详细文档在文件 <code>tools/lib/bpf/btf.h</code> 和 <code>tools/lib/bpf/btf.c</code>。</p><p>当前相关的头文件中的定义如下：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> btf_ext_header </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    __u16   magic</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u8    version</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u8    flags</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u32   hdr_len</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /* All offsets are in bytes relative to the end of this header */</span></span>
<span class="line"><span style="color:#F07178;">    __u32   func_info_off</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u32   func_info_len</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u32   line_info_off</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    __u32   line_info_len</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>类似于 <code>.BTF</code> 段， 但是不是 <code>string/info</code> 段，它包含的是 <code>func_info</code> 和 <code>line_info</code> 段。</p><p>可以参考 <a href="https://www.kernel.org/doc/html/latest/bpf/btf.html#bpf-prog-load" target="_blank" rel="noreferrer">3.3 BPF_PROG_LOAD</a> 中 <code>func_info</code> 和 <code>line_info</code> 的详细信息。</p><p><code>func_info</code> 如下组织：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">func_info_rec_size</span></span>
<span class="line"><span style="color:#A6ACCD;">btf_ext_info_sec for section #1 /* func_info for section #1 */</span></span>
<span class="line"><span style="color:#A6ACCD;">btf_ext_info_sec for section #2 /* func_info for section #2 */</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>当 <code>.BTF.ext</code> 生成时，<code>func_info_rec_size</code> 定义了<code>bpf_func_info</code> 结构的大小。在下面定义的 <code>btf_ext_info_sec</code> 是每个特定的 ELF 段中的一系列 <code>func_info</code>：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> btf_ext_info_sec </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   __u32   sec_name_off</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> /* offset to section name */</span></span>
<span class="line"><span style="color:#F07178;">   __u32   num_info</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   /* Followed by num_info * record_size number of bytes */</span></span>
<span class="line"><span style="color:#F07178;">   __u8    </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>这里的 <code>num_info</code> 必须大于 0。</p><p><code>line_info</code> 如下组织：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">line_info_rec_size</span></span>
<span class="line"><span style="color:#A6ACCD;">btf_ext_info_sec for section #1 /* line_info for section #1 */</span></span>
<span class="line"><span style="color:#A6ACCD;">btf_ext_info_sec for section #2 /* line_info for section #2 */</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>当 <code>.BTF.ext</code> 生成时，<code>line_info_rec_size</code> 定义了 <code>bpf_line_info</code> 结构的大小。</p><p><code>bpf_func_info-&gt;insn_off</code> 和 <code>bpf_line_info-&gt;insn_off</code> 在内核 API 和 ELF API 中有着不同的阐释。在内核 API 中，<code>insn_off</code> 是指令在 <code>struct bpf_insn</code> 内的偏移。对于 ELF API，<code>insn_off</code> 是相对于段 <code>btf_ext_info_sec-&gt;sec_name_off</code>开始的字节偏移。</p><h3 id="_4-2-btf-ids-section" tabindex="-1">4.2 .BTF_ids section <a class="header-anchor" href="#_4-2-btf-ids-section" aria-hidden="true">#</a></h3><p><code>.BTF_ids</code> 段编码了内核中定义的 BTF ID 值。借助头文件 <code>include/linux/btf_ids.h</code> 中定义的宏，可以在内核编译时创建这一段数据。内核代码能够使用下面的语法来创建 BTF ID 值的列表和有序列表：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">BTF_ID_LIST</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">BTF_ID</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">type1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">BTF_ID</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">type2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>这将会生成下面的 .BTF_ids 段的布局：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">__BTF_ID__type1__name1__1:</span></span>
<span class="line"><span style="color:#A6ACCD;">.zero 4</span></span>
<span class="line"><span style="color:#A6ACCD;">__BTF_ID__type2__name2__2:</span></span>
<span class="line"><span style="color:#A6ACCD;">.zero 4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>u32 list[];</code> 变量被定义来获取列表。</p><p><code>BTF_ID_UNUSED</code> 宏定义了四个零字节。当我们想要在 BTF_ID_LIST 中定义 unused entry，可以这样做：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">BTF_ID_LIST</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">bpf_skb_output_btf_ids</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">BTF_ID</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sk_buff</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">BTF_ID_UNUSED</span></span>
<span class="line"><span style="color:#82AAFF;">BTF_ID</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> task_struct</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p><code>BTF_SET_START/END</code> 这一对宏定义了有序列表 BTF ID 值和它们的计数值，它的语法如下：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">BTF_SET_START</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">set</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">BTF_ID</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">type1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">BTF_ID</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">type2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> name2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">BTF_SET_END</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">set</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><p>这将会生成下面的 .BTF_ids 段的布局：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">A__BTF_ID__set__set:</span></span>
<span class="line"><span style="color:#A6ACCD;">.zero 4</span></span>
<span class="line"><span style="color:#A6ACCD;">__BTF_ID__type1__name1__3:</span></span>
<span class="line"><span style="color:#A6ACCD;">.zero 4</span></span>
<span class="line"><span style="color:#A6ACCD;">__BTF_ID__type2__name2__4:</span></span>
<span class="line"><span style="color:#A6ACCD;">.zero 4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>struct btf_id_set set;</code> 变量可以获取到列表。<code>typeX</code> 名字可以是下面的任一项：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">union</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typedef</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> func</span></span>
<span class="line"></span></code></pre></div><p>并且可以被用来在解析 BTF ID 值的时候作为过滤器使用。所有的 BTF ID 列表和有序列表都被编译到了 <code>.BTF_ids</code> 段，它在<code>resolve_btfids</code>构建出的内核的链接阶段解析。</p><h2 id="_5-using-btf" tabindex="-1">5. Using BTF <a class="header-anchor" href="#_5-using-btf" aria-hidden="true">#</a></h2><h3 id="_5-1-bpftool-map-pretty-print" tabindex="-1">5.1 bpftool map pretty print <a class="header-anchor" href="#_5-1-bpftool-map-pretty-print" aria-hidden="true">#</a></h3><p>借助 BTF，映射的健值能够以域的形式打印出来，而不是仅仅打印出裸字节。这对于大型的结构或是你的数据结构中各比特位有独立意义时很有价值。例如下面的映射：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> A1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> A2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> A3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> A4</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> A5 </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> A ___A</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">tmp_t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> a1:</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#C792EA;">int</span><span style="color:#F07178;">  a2:</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#C792EA;">int</span><span style="color:#F07178;">  :</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     __u32 a3:</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     ___A b1:</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#C792EA;">enum</span><span style="color:#F07178;"> A b2:</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> bpf_map_def </span><span style="color:#82AAFF;">SEC</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">maps</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> tmpmap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     .type </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> BPF_MAP_TYPE_ARRAY</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">     .key_size </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">__u32</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">     .value_size </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">tmp_t</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#F07178;">     .max_entries </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#82AAFF;">BPF_ANNOTATE_KV_PAIR</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tmpmap</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">tmp_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>可以这样使用 bpftool 来优雅地打印：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">[{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">a1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">x</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">a2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">x</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">a3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">x</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">b1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">x</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">b2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">xa</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><h3 id="_5-2-bpftool-prog-dump" tabindex="-1">5.2 bpftool prog dump <a class="header-anchor" href="#_5-2-bpftool-prog-dump" aria-hidden="true">#</a></h3><p>下面的例子展示了 func_info 和 line_info 能够更好地帮助 dump 出内核符号名称、函数原型和 line 信息：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bpftool</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">prog</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dump</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jited</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pinned</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/sys/fs/bpf/test_btf_haskv</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_long_fname_2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dummy_tracepoint_args</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:</span></span>
<span class="line"><span style="color:#FFCB6B;">bpf_prog_44a040bf25481309_test_long_fname_2:</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test_long_fname_2</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dummy_tracepoint_args</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#C3E88D;">arg</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">0:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;">   %rbp</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">1:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mov</span><span style="color:#A6ACCD;">    %rsp,%rbp</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">4:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">sub</span><span style="color:#A6ACCD;">    $0x30</span><span style="color:#C3E88D;">,%rsp</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">b:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">sub</span><span style="color:#A6ACCD;">    $0x28</span><span style="color:#C3E88D;">,%rbp</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">f:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mov</span><span style="color:#A6ACCD;">    %rbx,0x0</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">%</span><span style="color:#FFCB6B;">rbp</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">13:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mov</span><span style="color:#A6ACCD;">    %r13,0x8</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">%</span><span style="color:#FFCB6B;">rbp</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">17:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mov</span><span style="color:#A6ACCD;">    %r14,0x10</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">%</span><span style="color:#FFCB6B;">rbp</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">1b:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mov</span><span style="color:#A6ACCD;">    %r15,0x18</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">%</span><span style="color:#FFCB6B;">rbp</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">1f:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">xor</span><span style="color:#A6ACCD;">    %eax,%eax</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">21:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mov</span><span style="color:#A6ACCD;">    %rax,0x20</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">%</span><span style="color:#FFCB6B;">rbp</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">25:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">xor</span><span style="color:#A6ACCD;">    %esi,%esi</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">key</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">27:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mov</span><span style="color:#A6ACCD;">    %esi,-0x4</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">%</span><span style="color:#FFCB6B;">rbp</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#FFCB6B;">arg-&gt;sock</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">2a:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mov</span><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">0x8</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">%</span><span style="color:#FFCB6B;">rdi</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">,%rdi</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#FFCB6B;">arg-&gt;sock</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">2e:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">cmp</span><span style="color:#A6ACCD;">    $0x0</span><span style="color:#C3E88D;">,%rdi</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">32:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">je</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">0x0000000000000070</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">34:</span><span style="color:#A6ACCD;">   </span><span style="color:#C3E88D;">mov</span><span style="color:#A6ACCD;">    %rbp,%rsi</span></span>
<span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">counts</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bpf_map_lookup_elem</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#FFCB6B;">btf_map,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">key</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><h3 id="_5-3-verifier-log" tabindex="-1">5.3 Verifier Log <a class="header-anchor" href="#_5-3-verifier-log" aria-hidden="true">#</a></h3><p>下面的例子展示了 line_info 是如何帮助 debug 验证错误的：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">/*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">The</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">at</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tools/testing/selftests/bpf/test_xdp_noinline.c</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">modified</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">below.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">)(</span><span style="color:#FFCB6B;">long</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">xdp-</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">data_end</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">)(</span><span style="color:#FFCB6B;">long</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">xdp-</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">data_end</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">/*</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">data_end</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">XDP_DROP</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">*/</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">*(u32</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#A6ACCD;">)data = dst-</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">dst</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bpftool</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">prog</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">load</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./test_xdp_noinline.o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/sys/fs/bpf/test_xdp_noinline</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xdp</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">)(</span><span style="color:#FFCB6B;">long</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">xdp-</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">224:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">79</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">r2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">u64</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">)(</span><span style="color:#FFCB6B;">r10</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-112</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">225:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">61</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">r2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">u32</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">)(</span><span style="color:#FFCB6B;">r2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">*(u32</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#A6ACCD;">)data = dst-</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">dst</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">226:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">63</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">u32</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">)(</span><span style="color:#FFCB6B;">r2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">+</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">r1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">invalid</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">access</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">packet,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">off=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">size=</span><span style="color:#F78C6C;">4</span><span style="color:#C3E88D;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">R2</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">,off=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">,r=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">R2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">offset</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">outside</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">packet</span></span>
<span class="line"></span></code></pre></div><h2 id="_6-btf-generation" tabindex="-1">6. BTF Generation <a class="header-anchor" href="#_6-btf-generation" aria-hidden="true">#</a></h2><p>你需要使用最新的 <a href="https://git.kernel.org/pub/scm/devel/pahole/pahole.git/" target="_blank" rel="noreferrer">pahole</a> 或 8.0 版本以上的 llvm来生成 BTF。</p><p>pahole 是一个 dwarf2btf 转换器，它还不支持 <code>.BTF.ext</code> 和 <code>btf</code> <code>BTF_KIND_FUNC</code> 类型。例如：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">-bash-4.4$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cat</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">t.c</span></span>
<span class="line"><span style="color:#FFCB6B;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a:</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">b:</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">c:</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">} g;</span></span>
<span class="line"><span style="color:#FFCB6B;">-bash-4.4$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-O2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">t.c</span></span>
<span class="line"><span style="color:#FFCB6B;">-bash-4.4$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pahole</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-JV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">t.o</span></span>
<span class="line"><span style="color:#FFCB6B;">File</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">t.o:</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> STRUCT t kind_flag</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> vlen</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type_id=</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitfield_size=</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bits_offset=</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type_id=</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitfield_size=</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bits_offset=</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type_id=</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitfield_size=</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bits_offset=</span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> INT int size</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> bit_offset</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> nr_bits</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">32</span><span style="color:#A6ACCD;"> encoding</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">SIGNED</span></span>
<span class="line"></span></code></pre></div><p>llvm 能够直接生成 <code>.BTF</code> 和 <code>.BTF.ext</code>，选项是 -g，目标选项是 bpf。 使用 readelf 工具的 -S 选项能够显示出汇编格式的 BTF 代码：</p><div class="language-asm"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">-bash-</span><span style="color:#F78C6C;">4.4</span><span style="color:#A6ACCD;">$ cat t2.c</span></span>
<span class="line"><span style="color:#A6ACCD;">typedef </span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> __int32</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">struct t2 {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> a2</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> (*f2)(char q1, __int32 q2, ...)</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> (*f3)()</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">} g2</span><span style="color:#676E95;font-style:italic;">;</span></span>
<span class="line"><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> main() { return </span><span style="color:#F78C6C;">0</span><span style="color:#676E95;font-style:italic;">; }</span></span>
<span class="line"><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">test</span><span style="color:#A6ACCD;">() { return </span><span style="color:#F78C6C;">0</span><span style="color:#676E95;font-style:italic;">; }</span></span>
<span class="line"><span style="color:#A6ACCD;">-bash-</span><span style="color:#F78C6C;">4.4</span><span style="color:#A6ACCD;">$ clang -c -g -O2 -target bpf t2.c</span></span>
<span class="line"><span style="color:#A6ACCD;">-bash-</span><span style="color:#F78C6C;">4.4</span><span style="color:#A6ACCD;">$ readelf -S t2.o</span></span>
<span class="line"><span style="color:#A6ACCD;">  ......</span></span>
<span class="line"><span style="color:#A6ACCD;">  [ </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">] .BTF              PROGBITS         </span><span style="color:#F78C6C;">0000000000000000</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">00000247</span></span>
<span class="line"><span style="color:#A6ACCD;">       000000000000016e  </span><span style="color:#F78C6C;">0000000000000000</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">  [ </span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">] .BTF.ext          PROGBITS         </span><span style="color:#F78C6C;">0000000000000000</span><span style="color:#A6ACCD;">  000003b5</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">0000000000000060</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">0000000000000000</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">] .</span><span style="color:#C792EA;">rel</span><span style="color:#A6ACCD;">.BTF.ext      </span><span style="color:#C792EA;">REL</span><span style="color:#A6ACCD;">              </span><span style="color:#F78C6C;">0000000000000000</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">000007e0</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">0000000000000040</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">0000000000000010</span><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">8</span></span>
<span class="line"><span style="color:#A6ACCD;">  ......</span></span>
<span class="line"><span style="color:#A6ACCD;">-bash-</span><span style="color:#F78C6C;">4.4</span><span style="color:#A6ACCD;">$ clang -S -g -O2 -target bpf t2.c</span></span>
<span class="line"><span style="color:#A6ACCD;">-bash-</span><span style="color:#F78C6C;">4.4</span><span style="color:#A6ACCD;">$ cat t2.s</span></span>
<span class="line"><span style="color:#A6ACCD;">  ......</span></span>
<span class="line"><span style="color:#A6ACCD;">        .section        .BTF,&quot;&quot;,@progbits</span></span>
<span class="line"><span style="color:#A6ACCD;">        .short  </span><span style="color:#F78C6C;">60319</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;"> # 0xeb9f</span></span>
<span class="line"><span style="color:#A6ACCD;">        .</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        .</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">24</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">220</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">220</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">122</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">                      </span><span style="color:#676E95;font-style:italic;"> # BTF_KIND_FUNC_PROTO(id = 1)</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">218103808</span><span style="color:#A6ACCD;">              </span><span style="color:#676E95;font-style:italic;"> # 0xd000000</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">83</span><span style="color:#A6ACCD;">                     </span><span style="color:#676E95;font-style:italic;"> # BTF_KIND_INT(id = 2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">16777216</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;font-style:italic;"> # 0x1000000</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">16777248</span><span style="color:#A6ACCD;">               </span><span style="color:#676E95;font-style:italic;"> # 0x1000020</span></span>
<span class="line"><span style="color:#A6ACCD;">  ......</span></span>
<span class="line"><span style="color:#A6ACCD;">        .</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">                      </span><span style="color:#676E95;font-style:italic;"> # string offset=0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .ascii  &quot;</span><span style="color:#FFCB6B;">.text</span><span style="color:#A6ACCD;">&quot;                </span><span style="color:#676E95;font-style:italic;"> # string offset=1</span></span>
<span class="line"><span style="color:#A6ACCD;">        .</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .ascii  &quot;/home/yhs/tmp-pahole/t2.c&quot;</span><span style="color:#676E95;font-style:italic;"> # string offset=7</span></span>
<span class="line"><span style="color:#A6ACCD;">        .</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .ascii  &quot;</span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> main() { return </span><span style="color:#F78C6C;">0</span><span style="color:#676E95;font-style:italic;">; }&quot; # string offset=33</span></span>
<span class="line"><span style="color:#A6ACCD;">        .</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .ascii  &quot;</span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">test</span><span style="color:#A6ACCD;">() { return </span><span style="color:#F78C6C;">0</span><span style="color:#676E95;font-style:italic;">; }&quot; # string offset=58</span></span>
<span class="line"><span style="color:#A6ACCD;">        .</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .ascii  &quot;</span><span style="color:#89DDFF;">int</span><span style="color:#A6ACCD;">&quot;                  </span><span style="color:#676E95;font-style:italic;"> # string offset=83</span></span>
<span class="line"><span style="color:#A6ACCD;">  ......</span></span>
<span class="line"><span style="color:#A6ACCD;">        .section        .BTF.ext,&quot;&quot;,@progbits</span></span>
<span class="line"><span style="color:#A6ACCD;">        .short  </span><span style="color:#F78C6C;">60319</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;"> # 0xeb9f</span></span>
<span class="line"><span style="color:#A6ACCD;">        .</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        .</span><span style="color:#C792EA;">byte</span><span style="color:#A6ACCD;">   </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">24</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">28</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">28</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">44</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">                      </span><span style="color:#676E95;font-style:italic;"> # FuncInfo</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">                      </span><span style="color:#676E95;font-style:italic;"> # FuncInfo section string offset=1</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   .Lfunc_begin0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   .Lfunc_begin1</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">                     </span><span style="color:#676E95;font-style:italic;"> # LineInfo</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">                      </span><span style="color:#676E95;font-style:italic;"> # LineInfo section string offset=1</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   .Ltmp0</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">7</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">33</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">7182</span><span style="color:#A6ACCD;">                   </span><span style="color:#676E95;font-style:italic;"> # Line 7 Col 14</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   .Ltmp3</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">7</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">58</span></span>
<span class="line"><span style="color:#A6ACCD;">        .long   </span><span style="color:#F78C6C;">8206</span><span style="color:#A6ACCD;">                   </span><span style="color:#676E95;font-style:italic;"> # Line 8 Col 14</span></span>
<span class="line"></span></code></pre></div>`,79),e=[o];function t(c,r,C,y,D,i){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
