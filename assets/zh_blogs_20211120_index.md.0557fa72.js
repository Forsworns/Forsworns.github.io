import{_ as p,c as e,a,w as l,e as o,b as s,r as t,o as r}from"./app.a19c101b.js";const c="/assets/upload_43398fc9372c5e85f5cc3eebd787a974.ad1258d6.png",F="/assets/upload_2d4c6aa91539fb69f517a2eb92acbf65.6e410ec9.png",D="/assets/upload_ea89f6b3e564c2ffe48d368df8a685a3.857f634c.png",y="/assets/upload_2f3f7e31fd33a4f4437fc597c6297aa9.f0a7475c.png",i="/assets/upload_f4fc50373099419ef83c0bd10769c9a3.0fe99c01.png",M=JSON.parse('{"title":"Sentinel Rust 介绍","description":"Sentinel-Rust 介绍和示例","frontmatter":{"title":"Sentinel Rust 介绍","description":"Sentinel-Rust 介绍和示例","tags":["Rust","云原生","并发","Sentinel"]},"headers":[{"level":2,"title":"Sentinel 介绍","slug":"sentinel-介绍","link":"#sentinel-介绍","children":[]},{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[{"level":3,"title":"通用配置及初始化","slug":"通用配置及初始化","link":"#通用配置及初始化","children":[]},{"level":3,"title":"埋点(定义资源)","slug":"埋点-定义资源","link":"#埋点-定义资源","children":[]},{"level":3,"title":"规则配置","slug":"规则配置","link":"#规则配置","children":[]},{"level":3,"title":"流量控制示例","slug":"流量控制示例","link":"#流量控制示例","children":[]},{"level":3,"title":"Prometheus 监控","slug":"prometheus-监控","link":"#prometheus-监控","children":[]},{"level":3,"title":"K8S 动态添加流控规则","slug":"k8s-动态添加流控规则","link":"#k8s-动态添加流控规则","children":[]},{"level":3,"title":"更多示例","slug":"更多示例","link":"#更多示例","children":[]}]},{"level":2,"title":"Sentinel-Rust 相关资源","slug":"sentinel-rust-相关资源","link":"#sentinel-rust-相关资源","children":[]}],"relativePath":"zh/blogs/20211120/index.md"}'),C={name:"zh/blogs/20211120/index.md"},A=o('<nav class="table-of-contents"><ul><li><a href="#sentinel-介绍">Sentinel 介绍</a></li><li><a href="#使用示例">使用示例</a><ul><li><a href="#通用配置及初始化">通用配置及初始化</a></li><li><a href="#埋点-定义资源">埋点(定义资源)</a></li><li><a href="#规则配置">规则配置</a></li><li><a href="#流量控制示例">流量控制示例</a></li><li><a href="#prometheus-监控">Prometheus 监控</a></li><li><a href="#k8s-动态添加流控规则">K8S 动态添加流控规则</a></li><li><a href="#更多示例">更多示例</a></li></ul></li><li><a href="#sentinel-rust-相关资源">Sentinel-Rust 相关资源</a></li></ul></nav><h1 id="sentinel-rust-的使用" tabindex="-1">Sentinel Rust 的使用 <a class="header-anchor" href="#sentinel-rust-的使用" aria-hidden="true">#</a></h1><p>Sentinel 是一个面向分布式服务架构的流量控制组件，它可以提升服务的稳定性。在 Sentinel 中，应用程序提供的服务或其调用的相关服务均可被视为资源，受到 Sentinel 的保护。围绕这些资源的实时状态，可以流量控制规则、熔断降级规则以及系统保护规则来避免请求大量堆积造成的系统瘫痪。Sentinel 可以被广泛地应用在各种应用场景下，与云原生也有着紧密的结合。</p>',3),d=s("img",{width:"80%",src:c},null,-1),u=s("b",null,"Sentinel 的生态",-1),h=s("p",null,"Sentinel 有着多年的发展历史，最初专注于入口流量控制，经过多年打磨后开源，并逐步提供多语言原生支持。",-1),_=s("img",{width:"90%",src:F},null,-1),f=s("b",null,"Sentinel 的发展史",-1),g=s("p",null,"本项目参考已有的 Java 与 Golang 版本，采用 Rust 开发 Sentinel 的原生版本，使用 Rust Attribute Macro 提供低侵入式的规则定义方法，支持使用 Prometheus 进行可视化监控，支持使用 etcd、Consul 等动态加载规则。",-1),B=s("img",{width:"30%",src:D},null,-1),b=s("b",null,"Sentinel & Rust",-1),m=o('<p>项目托管于 GitHub，链接：<a href="https://github.com/sentinel-group/sentinel-rust" target="_blank" rel="noreferrer">Sentinel-Rust</a>。在项目 <a href="https://github.com/sentinel-group/sentinel-rust/wiki/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97" target="_blank" rel="noreferrer">WiKi</a> 中提供了详细的文档，同时提供了大量的<a href="https://github.com/sentinel-group/sentinel-rust/tree/main/examples" target="_blank" rel="noreferrer">示例程序</a>供参考。另外，可以在本地运行 <code>cargo doc</code> 生成 API 文档。</p><h2 id="sentinel-介绍" tabindex="-1">Sentinel 介绍 <a class="header-anchor" href="#sentinel-介绍" aria-hidden="true">#</a></h2><p>Sentinel Rust 的设计采用了<a href="https://refactoringguru.cn/design-patterns/chain-of-responsibility" target="_blank" rel="noreferrer">责任链</a>的模式，用户指定的各类规则会自动通过 <code>base::SlotChain</code> 上的插槽 (Slot) 进行检测。用户使用 Sentinel Rust (后文均用 Sentinel 表示 Sentinel Rust) ，主要需要以下几步：</p><ol><li>在项目配置中添加依赖，对 Sentinel 的运行环境进行相关配置并初始化。</li><li>埋点（定义资源），确定系统中有哪些资源需要防护。</li><li>配置规则，为每个资源配置具体的规则，规则的配置方法可参考各个模块的使用文档。</li><li>编写资源防护的入口和出口代码。</li></ol>',4),E={width:"50%",src:y,ref:"https://refactoring.guru/design-patterns/chain-of-responsibility"},S=s("b",null,"责任链模式检测规则",-1),k=o(`<h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-hidden="true">#</a></h2><p>首先需要在项目中添加 Sentinel 依赖，向 <code>Cargo.toml</code> 中添加</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">dependencies</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">sentinel-rs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path_to_sentinel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>由于目前 sentinel 尚未发布，需要下载源码后，手动设置路径。如果需要使用 sentinel 的过程宏等可选特性，可以参考<a href="https://github.com/sentinel-group/sentinel-rust/wiki/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97#%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96" target="_blank" rel="noreferrer">可选特性列表</a>。</p><h3 id="通用配置及初始化" tabindex="-1">通用配置及初始化 <a class="header-anchor" href="#通用配置及初始化" aria-hidden="true">#</a></h3><p>使用 Sentinel 需要在应用启动时对 Sentinel 运行环境进行相关配置并触发初始化。<code>api</code> 下提供如下函数：</p><ul><li><code>init_default()</code>：从环境变量指定的配置文件以及环境变量中读取相应配置来初始化 Sentinel，若环境变量不存在则使用默认值。</li><li><code>init_with_config_file(config_path: &amp;mut String)</code>：从给定的 YAML 文件中读取相应配置来初始化 Sentinel。</li><li><code>init_with_config(config_entity: ConfigEntity)</code>: 用户硬编码配置对象<code>ConfigEntity</code>来初始化 Sentinel。</li></ul><p>通用配置项加载策略和配置项请参考通用配置章节</p><p>示例代码：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> sentinel_rs</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">init_default</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> logging</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#82AAFF;">init_default</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">unwrap_or_else</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">logging</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">error!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{</span><span style="color:#C3E88D;">:?</span><span style="color:#89DDFF;">}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre></div><p><strong>注意</strong>：必须成功调用 Sentinel 的初始化函数以后再调用埋点 API。</p><h3 id="埋点-定义资源" tabindex="-1">埋点(定义资源) <a class="header-anchor" href="#埋点-定义资源" aria-hidden="true">#</a></h3><p>使用 Sentinel 的 Entry API 将业务逻辑封装起来，这一步称为“埋点”。每个埋点都有一个资源名称（resource），代表触发了这个资源的调用或访问。</p><p>埋点 API 位于 <code>api</code> 中，通过构造 <code>EntryBuilder</code>，调用它的方法 <code>build()</code> 创建 Entry。 <code>EntryBuilder</code> 提供了链式的传参方式，未传入的参数将使用默认构造。</p><p>若该次调用被拒绝，则 <code>build()</code> 会返回 <code>Result</code> 代表被 Sentinel 限流。BlockError 提供了限流原因以及触发的规则等信息，可以方便开发者获取相关信息进行记录和处理。</p><h3 id="规则配置" tabindex="-1">规则配置 <a class="header-anchor" href="#规则配置" aria-hidden="true">#</a></h3><h4 id="api-硬编码方式" tabindex="-1">API 硬编码方式 <a class="header-anchor" href="#api-硬编码方式" aria-hidden="true">#</a></h4><p>Sentinel 支持原始的硬编码方式加载规则，可以通过各个模块的 <code>load_rules(rules)</code> 或 <code>append_rules(rules)</code> 函数加载规则，前者会覆盖之前的规则设置，后者只会向设置中追加规则。目前的版本中，这也是对单一资源加载多条规则的唯一手段。以流控规则为例：</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">flow</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">load_rules</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">vec!</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Arc</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">flow</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Rule</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    resource</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">example</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">into</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">    threshold</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    calculate_strategy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">flow</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">CalculateStrategy</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Direct</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    control_strategy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">flow</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ControlStrategy</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Reject</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">..</span><span style="color:#FFCB6B;">Default</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">default</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">})]);</span></span>
<span class="line"></span></code></pre></div><h4 id="标签宏硬编码方式" tabindex="-1">标签宏硬编码方式 <a class="header-anchor" href="#标签宏硬编码方式" aria-hidden="true">#</a></h4><p>Sentinel 提供了易用的标签宏，可以帮助用户快速上手规则配置，我们为不同策略提供了丰富的标签宏使用 <a href="https://github1s.com/sentinel-group/sentinel-rust/tree/main/examples/" target="_blank" rel="noreferrer">示例</a>，也可以阅读后续文档了解。下面以流控规则为例</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">flow</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">threshold</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">10</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> calculate_strategy</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">Direct</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">task</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">u32</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><p>在上面的例子中，标签宏会修改 <code>task</code> 函数签名，返回 <code>Result&lt;u32, String&gt;</code>。接着，它将自动向规则列表中追加规则，调用 <code>EntryBuilder</code> 创建 Sentinel Entry，检查指定的规则。如果该任务成功执行，会返回 <code>Ok(u32)</code> 类型的返回值；否则会返回 <code>Err(String)</code> 类型的限流原因和触发限流的参数。</p><p>需要注意，当前的标签宏实现，仅支持在 Resource 上指定单一规则。</p><h4 id="动态数据源" tabindex="-1">动态数据源 <a class="header-anchor" href="#动态数据源" aria-hidden="true">#</a></h4><p>由 Sentinel 提供动态数据源接口进行扩展，用户可以动态地配置规则，参考使用 <a href="https://github1s.com/sentinel-group/sentinel-rust/blob/main/examples/datasources/etcdv3.rs" target="_blank" rel="noreferrer">etcd</a> 和 <a href="https://github1s.com/sentinel-group/sentinel-rust/blob/main/examples/datasources/consul.rs" target="_blank" rel="noreferrer">Consul</a> 进行配置的示例。</p><h3 id="流量控制示例" tabindex="-1">流量控制示例 <a class="header-anchor" href="#流量控制示例" aria-hidden="true">#</a></h3><p>流量控制 (Flow Control) 模块，基于令牌桶 (Token Bucket) 的思想，监控资源 (Resource) 的统计指标，然后根据 Token 计算策略来计算资源的可用 Token (也就是流量的阈值)，然后根据流量控制策略对请求进行控制，避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p><p>Sentinel 通过定义流控规则来实现对 Resource 的流量控制。Sentinel 内部会在加载流控规则（<code>flow::Rule</code>）时候，将每个规则转换成流量控制器 (<code>flow::TrafficShapingController</code>)。 每个流量控制器实例都会有自己独立的统计结构，这里统计结构是一个滑动窗口。Sentinel 内部会尽可能复用 Resource 级别的全局滑动窗口，如果流控规则的统计设置没法复用 Resource 的全局统计结构，那么Sentinel会为流量控制器创建一个全新的私有的滑动窗口，然后通过 <code>flow::StandaloneStatSlot</code> 这个统计 Slot 来维护统计指标。</p><p>Sentinel 的流量控制组件对 Resource 的检查结果要么通过，要么会 block，对于 block 的流量相当于拒绝。</p><p>下面展示两个例子，第一个例子通过 API 加载流控规则；第二个例子通过标签宏追加规则。</p><h4 id="api-加载流控规则" tabindex="-1">API 加载流控规则 <a class="header-anchor" href="#api-加载流控规则" aria-hidden="true">#</a></h4><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> sentinel_rs</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">utils</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">sleep_for_ms</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> sentinel_rs</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">base</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> flow</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> EntryBuilder</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">sync</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Arc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Init sentienl configurations</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">sentinel_rs</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">init_default</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">unwrap_or_else</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sentinel_rs</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">logging</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">error!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{</span><span style="color:#C3E88D;">:?</span><span style="color:#89DDFF;">}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> resource_name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">from</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">direct_reject_flow_control_example</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Load sentinel rules</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">flow</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">load_rules</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">vec!</span><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Arc</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">flow</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Rule</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        resource</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> resource_name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">        threshold</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        calculate_strategy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">flow</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">CalculateStrategy</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Direct</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        control_strategy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">flow</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ControlStrategy</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Reject</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">..</span><span style="color:#FFCB6B;">Default</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">default</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">})]);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> handlers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _ </span><span style="color:#F78C6C;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">..</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> res_name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> resource_name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        handlers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">thread</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">spawn</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">move</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">loop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> entry_builder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EntryBuilder</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">res_name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">with_traffic_type</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">base</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">TrafficType</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Inbound</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ok</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> entry_builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                    // Passed, wrap the logic here.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#82AAFF;">task</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                    // Be sure the entry is exited finally.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    entry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">borrow</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">exit</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                    // Blocked. We could get the block reason from the BlockError.</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#82AAFF;">sleep_for_ms</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">rand</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">random</span><span style="color:#89DDFF;">::&lt;</span><span style="color:#FFCB6B;">u64</span><span style="color:#89DDFF;">&gt;()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> h </span><span style="color:#F78C6C;">in</span><span style="color:#A6ACCD;"> handlers </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        h</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">expect</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Couldn&#39;t join on the associated thread</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">task</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{}</span><span style="color:#C3E88D;">: passed</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sentinel_rs</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">utils</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">curr_time_millis</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">sleep_for_ms</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>执行 <code>cargo run --example hello_world</code>，QPS 会被限制在 10。</p><h4 id="标签宏追加流控规则" tabindex="-1">标签宏追加流控规则 <a class="header-anchor" href="#标签宏追加流控规则" aria-hidden="true">#</a></h4><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> sentinel_macros</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">flow</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> sentinel_rs</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">utils</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">sleep_for_ms</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Init sentienl configurations</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">sentinel_rs</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">init_default</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">unwrap_or_else</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sentinel_rs</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">logging</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">error!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{</span><span style="color:#C3E88D;">:?</span><span style="color:#89DDFF;">}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> handlers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vec</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> _ </span><span style="color:#F78C6C;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">..</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        handlers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">thread</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">spawn</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">move</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">loop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">task</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">unwrap_or_else</span><span style="color:#89DDFF;">(|</span><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                    // blocked</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#82AAFF;">sleep_for_ms</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> h </span><span style="color:#F78C6C;">in</span><span style="color:#A6ACCD;"> handlers </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        h</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">expect</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Couldn&#39;t join on the associated thread</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">flow</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    traffic_type </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Outbound</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    calculate_strategy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Direct</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    threshold </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 10</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0</span></span>
<span class="line"><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">task</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;{}</span><span style="color:#C3E88D;">: passed</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sentinel_rs</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">utils</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">curr_time_millis</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">sleep_for_ms</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>执行 <code>cargo run --example macro</code>，QPS 会被限制在 10。</p><h3 id="prometheus-监控" tabindex="-1">Prometheus 监控 <a class="header-anchor" href="#prometheus-监控" aria-hidden="true">#</a></h3><p>分别执行</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">prometheus</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--config.file=./sentinel-rust/examples/exporter/prometheus/prometheus.yml</span></span>
<span class="line"></span></code></pre></div><p>和</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--example</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">prometheus</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--features=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">full exporter</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div>`,42),v={width:"100%",src:i,ref:"https://refactoring.guru/design-patterns/chain-of-responsibility"},w=s("b",null,"Prometheus 监控",-1),x=o(`<h3 id="k8s-动态添加流控规则" tabindex="-1">K8S 动态添加流控规则 <a class="header-anchor" href="#k8s-动态添加流控规则" aria-hidden="true">#</a></h3><p>本地测试时分别执行</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">prometheus</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--config.file=./sentinel-rust/examples/exporter/prometheus/prometheus.yml</span></span>
<span class="line"></span></code></pre></div><p>和</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--example</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">k8s</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--features=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">full ds_k8s async</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--nocapture</span></span>
<span class="line"></span></code></pre></div><p>将会看到动态加载的流控规则。执行</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">kubectl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">api-resources</span></span>
<span class="line"></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">kubectl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">flowresources</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-A</span></span>
<span class="line"></span></code></pre></div><p>可以查询到相应的 sentinel flow rule resources：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">NAME           APIVERSION                            NAMESPACED   KIND</span></span>
<span class="line"><span style="color:#A6ACCD;">flowresources  rust.datasource.sentinel.io/v1alpha1  true         FlowResource</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">NAMESPACE     NAME     AGE</span></span>
<span class="line"><span style="color:#A6ACCD;">default       flow-1   40s</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="更多示例" tabindex="-1">更多示例 <a class="header-anchor" href="#更多示例" aria-hidden="true">#</a></h3><p>项目中的 <code>example</code> 目录提供了大量示例程序和参数设置参考。</p><h2 id="sentinel-rust-相关资源" tabindex="-1">Sentinel-Rust 相关资源 <a class="header-anchor" href="#sentinel-rust-相关资源" aria-hidden="true">#</a></h2><p><a href="https://github.com/sentinel-group/sentinel-rust/wiki" target="_blank" rel="noreferrer">使用指南</a><a href="https://docs.rs/sentinel-core/latest/sentinel_core/" target="_blank" rel="noreferrer"> API 文档</a><a href="https://github.com/sentinel-group/sentinel-rust/tree/main/examples" target="_blank" rel="noreferrer">示例代码</a></p>`,15);function R(q,T,P,I,N,V){const n=t("center");return r(),e("div",null,[A,a(n,null,{default:l(()=>[d]),_:1}),a(n,null,{default:l(()=>[u]),_:1}),h,a(n,null,{default:l(()=>[_]),_:1}),a(n,null,{default:l(()=>[f]),_:1}),g,a(n,null,{default:l(()=>[B]),_:1}),a(n,null,{default:l(()=>[b]),_:1}),m,a(n,null,{default:l(()=>[s("img",E,null,512)]),_:1}),a(n,null,{default:l(()=>[S]),_:1}),k,a(n,null,{default:l(()=>[s("img",v,null,512)]),_:1}),a(n,null,{default:l(()=>[w]),_:1}),x])}const K=p(C,[["render",R]]);export{M as __pageData,K as default};
