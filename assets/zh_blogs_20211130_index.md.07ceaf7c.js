import{_ as s,c as n,o as a,e as o}from"./app.bbbac65d.js";const A=JSON.parse('{"title":"Do not use #[serde(deny_unknown_fields)] on k8s CRD struct","description":"为 Sentinel-Rust 添加 k8s 数据源支持时，用 kube-rs 的时候碰到的一个有趣的问题","frontmatter":{"title":"Do not use `#[serde(deny_unknown_fields)]` on k8s CRD struct","description":"为 Sentinel-Rust 添加 k8s 数据源支持时，用 kube-rs 的时候碰到的一个有趣的问题","tags":["Rust","云原生","杂谈","Sentinel"]},"headers":[{"level":2,"title":"Sentinel-Rust Resources","slug":"sentinel-rust-resources","link":"#sentinel-rust-resources","children":[]}],"relativePath":"zh/blogs/20211130/index.md"}'),l={name:"zh/blogs/20211130/index.md"},e=o(`<nav class="table-of-contents"><ul><li><a href="#sentinel-rust-resources">Sentinel-Rust Resources</a></li></ul></nav><h1 id="do-not-use-serde-deny-unknown-fields-on-k8s-crd-struct" tabindex="-1">Do not use <code>#[serde(deny_unknown_fields)]</code> on k8s CRD struct <a class="header-anchor" href="#do-not-use-serde-deny-unknown-fields-on-k8s-crd-struct" aria-hidden="true">#</a></h1><p>This blog records a potential problem in Rust when using <code>kube-rs</code>, <code>serde</code> and <code>schemars</code> together: Do not use <code>#[serde(deny_unknown_fields)]</code> on k8s CRD spec struct.</p><p>Here is a minimal example: Simply add <code>#[serde(deny_unknown_fields)]</code> in the <code>kube-rs</code> official example.</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> schemars</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">JsonSchema</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> serde</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">Deserialize</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Serialize</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> serde_json</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">json</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> validator</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Validate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> futures</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">StreamExt</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> TryStreamExt</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> k8s_openapi</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">apiextensions_apiserver</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">pkg</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">apis</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">apiextensions</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">v1</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">CustomResourceDefinition</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> kube</span><span style="color:#89DDFF;">::{</span></span>
<span class="line"><span style="color:#FFCB6B;">    api</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">Api</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> DeleteParams</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> ListParams</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> PatchParams</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Patch</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> ResourceExt</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#FFCB6B;">    core</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">CustomResourceExt</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">    Client</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> CustomResource</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">    runtime</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">watcher</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> utils</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">try_flatten_applied</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> wait</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">conditions</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> await_condition</span><span style="color:#89DDFF;">}},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Our custom resource</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">derive</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">CustomResource</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Deserialize</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Serialize</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Clone</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Debug</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Validate</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JsonSchema</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">kube</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">group </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">clux.dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">v1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> kind </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> namespaced</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">serde</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">deny_unknown_fields</span><span style="color:#89DDFF;">)]</span><span style="color:#676E95;font-style:italic;"> // here we add the macro</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FooSpec</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    info</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">validate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">min </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 3</span><span style="color:#89DDFF;">))]</span></span>
<span class="line"><span style="color:#A6ACCD;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    replicas</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">i32</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">tokio</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">main</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#F78C6C;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Result</span><span style="color:#89DDFF;">&lt;(),</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Box</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">dyn</span><span style="color:#A6ACCD;"> std</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">error</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Error</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> client </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Client</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">try_default</span><span style="color:#89DDFF;">().</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#89DDFF;">?;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> crds</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Api</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">CustomResourceDefinition</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Api</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">all</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Apply the CRD so users can create Foo instances in Kubernetes</span></span>
<span class="line"><span style="color:#A6ACCD;">    crds</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">patch</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foos.clux.dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">PatchParams</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my_manager</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">Patch</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">Apply</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">crd</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">).</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#89DDFF;">?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Wait for the CRD to be ready</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">tokio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">time</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">timeout</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">time</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Duration</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">from_secs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">await_condition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">crds</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foos.clux.dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">conditions</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">is_crd_established</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">).</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#89DDFF;">?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Watch for changes to foos in the configured namespace</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> foos</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Api</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Api</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">default_namespaced</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> lp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ListParams</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">default</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> apply_stream </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">try_flatten_applied</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">watcher</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">foos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> lp</span><span style="color:#89DDFF;">)).</span><span style="color:#82AAFF;">boxed</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Some</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> apply_stream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">try_next</span><span style="color:#89DDFF;">().</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">println!</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">saw apply to </span><span style="color:#89DDFF;">{}&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Ok</span><span style="color:#89DDFF;">(())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Then you will get an error:</p><blockquote><p>Error: Api(ErrorResponse { status: &quot;Failure&quot;, message: &quot;<a href="http://CustomResourceDefinition.apiextensions.k8s.io" target="_blank" rel="noreferrer">CustomResourceDefinition.apiextensions.k8s.io</a> &quot;foos.clux.dev&quot; is invalid: spec.validation.openAPIV3Schema.properties[spec].additionalProperties: Forbidden: additionalProperties and properties are mutual exclusive&quot;, reason: &quot;Invalid&quot;, code: 422 })</p></blockquote><p><strong>Why?</strong></p><p>Because in json schema <sup>[1]</sup>:</p><blockquote><p>By default, providing additional properties is valid (unless you set <code>additionalProperties</code> to false).</p></blockquote><p>While in <code>serde</code> <sup>[2]</sup>:</p><blockquote><p>Always error during deserialization when encountering unknown fields. When this attribute is not present, by default unknown fields are ignored for self-describing formats like JSON.</p></blockquote><p>The <code>schemars</code> is compatible with serde. There&#39;s no surprise that field <code>additionalProperties</code> is set to false when the struct is with <code>#[serde(deny_unknown_fields)]</code>.</p><p>Then the &quot;unexpected&quot; problem with <code>kube-rs</code> looms. The generated CRD struct <code>Foo</code> will contain the spec struct <code>FooSpec</code> annotated with <code>#[serde(deny_unknown_fields)]</code>, which has an attribute <code>additionalProperties</code> of value <code>false</code>. This voilates the restrictions that applied to the CRD schema<sup>[3]</sup>:</p><blockquote><p>The field <code>additionalProperties</code> cannot be set to false. The field <code>additionalProperties</code> is mutually exclusive with properties.</p></blockquote><p>[1] <a href="http://json-schema.org/understanding-json-schema/reference/object.html#id5" target="_blank" rel="noreferrer">http://json-schema.org/understanding-json-schema/reference/object.html#id5</a></p><p>[2] <a href="https://serde.rs/container-attrs.html#deny_unknown_fields" target="_blank" rel="noreferrer">https://serde.rs/container-attrs.html#deny_unknown_fields</a></p><p>[3] <a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#validation" target="_blank" rel="noreferrer">https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#validation</a></p><h2 id="sentinel-rust-resources" tabindex="-1">Sentinel-Rust Resources <a class="header-anchor" href="#sentinel-rust-resources" aria-hidden="true">#</a></h2><p><a href="https://github.com/sentinel-group/sentinel-rust/wiki" target="_blank" rel="noreferrer">Tutorial</a><a href="https://docs.rs/sentinel-core/latest/sentinel_core/" target="_blank" rel="noreferrer"> API Doc</a><a href="https://github.com/sentinel-group/sentinel-rust/tree/main/examples" target="_blank" rel="noreferrer">Example Codes</a></p>`,20),p=[e];function t(r,c,F,D,y,i){return a(),n("div",null,p)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};
