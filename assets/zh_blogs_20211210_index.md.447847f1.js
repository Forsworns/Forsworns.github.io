import{_ as s,c as a,o as n,e}from"./app.df3dc0f5.js";const l="/assets/ethercat_tool.157bcfac.png",o="/assets/application_layer_protocols.3d0c768d.png",p="/assets/ethercat_communication_modules.eef911db.png",t="/assets/EthercatOperatingPrinciple.bac2d26d.svg",c="/assets/Architecture.ae8a7285.png",r="/assets/ethercat_frame_datagram.4f6487fc.png",i="/assets/ethercat_state_machine_ESM.b2ac1f88.png",y="/assets/ESM_transitions.63a8dd4f.png",F="/assets/address.f439879b.png",d="/assets/address_fmmu.d62d28c3.png",C="/assets/pdo1.f1ca3b03.png",D="/assets/pdo2.b26e83aa.png",A="/assets/s7socket.64c866d3.png",h="/assets/s7server.a2e8b7ee.png",f="/assets/multiread.ca9eb8c0.png",v=JSON.parse('{"title":"工业物联网通讯笔记","description":"工业物联网通讯相关杂记：EtherCAT、S7","frontmatter":{"title":"工业物联网通讯笔记","description":"工业物联网通讯相关杂记：EtherCAT、S7","tags":["物联网"]},"headers":[{"level":2,"title":"IGH EtherCAT 开源主站安装及测试","slug":"igh-ethercat-开源主站安装及测试","link":"#igh-ethercat-开源主站安装及测试","children":[]},{"level":2,"title":"基于 EtherCAT 的应用","slug":"基于-ethercat-的应用","link":"#基于-ethercat-的应用","children":[]},{"level":2,"title":"常见 ESC 设备","slug":"常见-esc-设备","link":"#常见-esc-设备","children":[]},{"level":2,"title":"EtherCAT 主从环形架构","slug":"ethercat-主从环形架构","link":"#ethercat-主从环形架构","children":[]},{"level":2,"title":"帧结构","slug":"帧结构","link":"#帧结构","children":[]},{"level":2,"title":"状态机","slug":"状态机","link":"#状态机","children":[]},{"level":2,"title":"EtherCAT 取址","slug":"ethercat-取址","link":"#ethercat-取址","children":[]},{"level":2,"title":"SOES 库工作内容","slug":"soes-库工作内容","link":"#soes-库工作内容","children":[]},{"level":2,"title":"SOES 库设计","slug":"soes-库设计","link":"#soes-库设计","children":[{"level":3,"title":"ecat_slv.c 实现 slave API","slug":"ecat-slv-c-实现-slave-api","link":"#ecat-slv-c-实现-slave-api","children":[]},{"level":3,"title":"特别需要注意","slug":"特别需要注意","link":"#特别需要注意","children":[]},{"level":3,"title":"eep.c","slug":"eep-c","link":"#eep-c","children":[]},{"level":3,"title":"esc_coe.c","slug":"esc-coe-c","link":"#esc-coe-c","children":[]},{"level":3,"title":"esc_eoe.c","slug":"esc-eoe-c","link":"#esc-eoe-c","children":[]},{"level":3,"title":"esc_foe.c","slug":"esc-foe-c","link":"#esc-foe-c","children":[]},{"level":3,"title":"eep.c","slug":"eep-c-1","link":"#eep-c-1","children":[]},{"level":3,"title":"esc.c","slug":"esc-c","link":"#esc-c","children":[]},{"level":3,"title":"options.h","slug":"options-h","link":"#options-h","children":[]}]},{"level":2,"title":"SOES 样例","slug":"soes-样例","link":"#soes-样例","children":[]},{"level":2,"title":"SOES 中的一些数据规定","slug":"soes-中的一些数据规定","link":"#soes-中的一些数据规定","children":[{"level":3,"title":"SII-PDO 和 ESI-PDO","slug":"sii-pdo-和-esi-pdo","link":"#sii-pdo-和-esi-pdo","children":[]}]},{"level":2,"title":"OD","slug":"od","link":"#od","children":[{"level":3,"title":"SM 事件类型","slug":"sm-事件类型","link":"#sm-事件类型","children":[]}]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]}],"relativePath":"zh/blogs/20211210/index.md"}'),u={name:"zh/blogs/20211210/index.md"},_=e('<nav class="table-of-contents"><ul><li><a href="#igh-ethercat-开源主站安装及测试">IGH EtherCAT 开源主站安装及测试</a></li><li><a href="#基于-ethercat-的应用">基于 EtherCAT 的应用</a></li><li><a href="#常见-esc-设备">常见 ESC 设备</a></li><li><a href="#ethercat-主从环形架构">EtherCAT 主从环形架构</a></li><li><a href="#帧结构">帧结构</a></li><li><a href="#状态机">状态机</a></li><li><a href="#ethercat-取址">EtherCAT 取址</a></li><li><a href="#soes-库工作内容">SOES 库工作内容</a></li><li><a href="#soes-库设计">SOES 库设计</a><ul><li><a href="#ecat-slv-c-实现-slave-api">ecat_slv.c 实现 slave API</a></li><li><a href="#特别需要注意">特别需要注意</a></li><li><a href="#eep-c">eep.c</a></li><li><a href="#esc-coe-c">esc_coe.c</a></li><li><a href="#esc-eoe-c">esc_eoe.c</a></li><li><a href="#esc-foe-c">esc_foe.c</a></li><li><a href="#eep-c-1">eep.c</a></li><li><a href="#esc-c">esc.c</a></li><li><a href="#options-h">options.h</a></li></ul></li><li><a href="#soes-样例">SOES 样例</a></li><li><a href="#soes-中的一些数据规定">SOES 中的一些数据规定</a><ul><li><a href="#sii-pdo-和-esi-pdo">SII-PDO 和 ESI-PDO</a></li></ul></li><li><a href="#od">OD</a><ul><li><a href="#sm-事件类型">SM 事件类型</a></li></ul></li><li><a href="#实现">实现</a></li></ul></nav><h1 id="工业物联网通讯笔记" tabindex="-1">工业物联网通讯笔记 <a class="header-anchor" href="#工业物联网通讯笔记" aria-hidden="true">#</a></h1><h1 id="ethercat" tabindex="-1">EtherCAT <a class="header-anchor" href="#ethercat" aria-hidden="true">#</a></h1><p><a href="D:/aiit/ethercat/ethercat_esc_datasheet_sec1_technology_2i3.pdf" target="_blank" rel="noreferrer">专有缩写</a></p><p>思路：使用已有的网络连接透明传输构造EtherCAT帧的报文段。</p><h2 id="igh-ethercat-开源主站安装及测试" tabindex="-1">IGH EtherCAT 开源主站安装及测试 <a class="header-anchor" href="#igh-ethercat-开源主站安装及测试" aria-hidden="true">#</a></h2><p>参考 <a href="https://zhuanlan.zhihu.com/p/150957429" target="_blank" rel="noreferrer">知乎专栏</a></p><p>安装好后可以看到一系列参数 <img src="'+l+'" alt="img"></p><p>如果开机没自动起来需要手动<code>/etc/init.d/ethercat start</code>。</p><h2 id="基于-ethercat-的应用" tabindex="-1">基于 EtherCAT 的应用 <a class="header-anchor" href="#基于-ethercat-的应用" aria-hidden="true">#</a></h2><p><img src="'+o+'" alt="img"></p><h2 id="常见-esc-设备" tabindex="-1">常见 ESC 设备 <a class="header-anchor" href="#常见-esc-设备" aria-hidden="true">#</a></h2><p><img src="'+p+'" alt="img"></p><h2 id="ethercat-主从环形架构" tabindex="-1">EtherCAT 主从环形架构 <a class="header-anchor" href="#ethercat-主从环形架构" aria-hidden="true">#</a></h2><p><img src="'+t+'" alt=""></p><p><img src="'+c+'" alt=""></p><h2 id="帧结构" tabindex="-1">帧结构 <a class="header-anchor" href="#帧结构" aria-hidden="true">#</a></h2><p><img src="'+r+'" alt=""></p><h2 id="状态机" tabindex="-1">状态机 <a class="header-anchor" href="#状态机" aria-hidden="true">#</a></h2><p><img src="'+i+`" alt=""></p><p>下方介绍的 SOES 库在 <code>esc.h</code> 中定义了状态和状态的转移：</p><div class="language-C"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ESCinit</span><span style="color:#A6ACCD;">                  </span><span style="color:#F78C6C;">0x01</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ESCpreop</span><span style="color:#A6ACCD;">                 </span><span style="color:#F78C6C;">0x02</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ESCboot</span><span style="color:#A6ACCD;">                  </span><span style="color:#F78C6C;">0x03</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ESCsafeop</span><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">0x04</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ESCop</span><span style="color:#A6ACCD;">                    </span><span style="color:#F78C6C;">0x08</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ESCerror</span><span style="color:#A6ACCD;">                 </span><span style="color:#F78C6C;">0x10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">INIT_TO_INIT</span><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">0x11</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">INIT_TO_PREOP</span><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">0x21</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">INIT_TO_BOOT</span><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">0x31</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">INIT_TO_SAFEOP</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">0x41</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">INIT_TO_OP</span><span style="color:#A6ACCD;">               </span><span style="color:#F78C6C;">0x81</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PREOP_TO_INIT</span><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">0x12</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PREOP_TO_PREOP</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">0x22</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PREOP_TO_BOOT</span><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">0x32</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PREOP_TO_SAFEOP</span><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">0x42</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PREOP_TO_OP</span><span style="color:#A6ACCD;">              </span><span style="color:#F78C6C;">0x82</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BOOT_TO_INIT</span><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">0x13</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BOOT_TO_PREOP</span><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">0x23</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BOOT_TO_BOOT</span><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">0x33</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BOOT_TO_SAFEOP</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">0x43</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BOOT_TO_OP</span><span style="color:#A6ACCD;">               </span><span style="color:#F78C6C;">0x83</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SAFEOP_TO_INIT</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">0x14</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SAFEOP_TO_PREOP</span><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">0x24</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SAFEOP_TO_BOOT</span><span style="color:#A6ACCD;">           </span><span style="color:#F78C6C;">0x34</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SAFEOP_TO_SAFEOP</span><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">0x44</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SAFEOP_TO_OP</span><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">0x84</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OP_TO_INIT</span><span style="color:#A6ACCD;">               </span><span style="color:#F78C6C;">0x18</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OP_TO_PREOP</span><span style="color:#A6ACCD;">              </span><span style="color:#F78C6C;">0x28</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OP_TO_BOOT</span><span style="color:#A6ACCD;">               </span><span style="color:#F78C6C;">0x38</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OP_TO_SAFEOP</span><span style="color:#A6ACCD;">             </span><span style="color:#F78C6C;">0x48</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OP_TO_OP</span><span style="color:#A6ACCD;">                 </span><span style="color:#F78C6C;">0x88</span></span>
<span class="line"></span></code></pre></div><p><img src="`+y+'" alt=""></p><h2 id="ethercat-取址" tabindex="-1">EtherCAT 取址 <a class="header-anchor" href="#ethercat-取址" aria-hidden="true">#</a></h2><p><img src="'+F+'" alt=""><img src="'+d+`" alt=""></p><h1 id="soes" tabindex="-1">SOES <a class="header-anchor" href="#soes" aria-hidden="true">#</a></h1><p>开源 EtherCAT Slave 实现，对应有 SOEM 是 EtherCAT Master 实现。 通过配置文件配置 ESC，之后通过 <code>ESC_read</code> 和 <code>ESC_write</code> 与 ESC 交互数据，由 ESC 负责接收发送。这两个函数是硬件相关的，需要针对硬件实现（参考 <code>hal/linux-lan9252</code> 对 lan9252 的实现，<code>rt-kernel-xmc4/esc_hw.h</code> 中 <code>esc_registers</code> 定义，把指针 <code>esc_registers_t * ecat0</code> 指向了 <code>ECAT0_BASE</code>，即寄存器的起始地址）。</p><h2 id="soes-库工作内容" tabindex="-1">SOES 库工作内容 <a class="header-anchor" href="#soes-库工作内容" aria-hidden="true">#</a></h2><ul><li>ESC（EtherCAT Slave Controller）硬件初始化 <ul><li>ESC 重置</li><li>ESC 初始化，init SPI</li><li>等待 ESC 初始化成功（轮询 ESC 的 DL 寄存器）</li></ul></li><li>软件初始化 <ul><li>重置 Slave 状态（覆写 ESC AL 状态寄存器）</li><li>重置错误信息 （清除 ESC AL 错误码寄存器）</li><li>中止之前的应用层程序（可能有 SyncManager 在 block，等待接收EtherCAT 包）</li></ul></li><li>应用 <ul><li>应用层事件（ALevent）处理，ALevent 携带了 ALControl 或 SyncManagers 的更改信息。ALControl 是用来控制状态改变的，SyncManagers 是用来将 EtherCAT 的改动写入到本地内存中的。</li><li>ESC_state 用来处理状态，例如状态变化、错误处理、告知接收到信息。</li><li>Mailbox handler，提供应用层协议使用的 mailboxes。</li><li>在 mailbox 中，也会检查是否需要使用特定协议的 handler 来处理接收/发送的数据。</li></ul></li></ul><h2 id="soes-库设计" tabindex="-1">SOES 库设计 <a class="header-anchor" href="#soes-库设计" aria-hidden="true">#</a></h2><h3 id="ecat-slv-c-实现-slave-api" tabindex="-1"><code>ecat_slv.c</code> 实现 slave API <a class="header-anchor" href="#ecat-slv-c-实现-slave-api" aria-hidden="true">#</a></h3><h4 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-hidden="true">#</a></h4><ul><li>定义全局变量 <code>_ESCvar</code> 类型（定义在 <code>esc.h</code> 中）的 <code>ESCvar</code>，负责存储 ESC 状态信息。</li><li>全局变量 <code>MBX</code> 是 Mailbox，存储 <code>MBXBUFFERS * MAX(MBXSIZE,MBXSIZEBOOT)</code> 规模的 <code>uint8_t</code> 数据；<code>_MBXcontrol</code> 则是 Mailbox 对应的 Controller。</li><li>全局变量 <code>_SMmap</code> 类型的 <code>SMmap2</code> 和 <code>SMmap3</code> 分别映射输出、输入的 SM（SyncManager）。</li></ul><h4 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-hidden="true">#</a></h4><p><code>ecat_slv_init</code> 接收 <code>esc_cfg_t</code> 类型的设置选项进行初始化。</p><h4 id="应用处理" tabindex="-1">应用处理 <a class="header-anchor" href="#应用处理" aria-hidden="true">#</a></h4><p><code>ecat_slv</code> 是一个需要周期性调用的函数，它内部会调用 ecat_slv_poll 和 DIG_process。前者 poll EtherCAT event，检查状态机，检查 SM，检查 Mailbox，如果收到数据就根据编译选项依次检查是否为 CoE（CAN over EtherCAT）、EoE（EtherNet over EtherCAT）、FoE （File over EtherCAT），最后检查是否为 XoE（错误的报文）应用，视需要处理 eeprom；后者更新局部变量，读入收到的 EtherCAT 帧，写出发送帧。</p><h4 id="应用相关" tabindex="-1">应用相关 <a class="header-anchor" href="#应用相关" aria-hidden="true">#</a></h4><p><code>DIG_process</code> 会阅读、修改 <code>ESCvar</code>。首先检查是否处于可以修改 Output 信息的的状态下，即 Operational state。</p><h5 id="output-esc-视角的-ouput-即用户态的接收" tabindex="-1">Output：ESC 视角的 Ouput，即用户态的接收 <a class="header-anchor" href="#output-esc-视角的-ouput-即用户态的接收" aria-hidden="true">#</a></h5><ul><li>如果我们在 OP 状态下，我们能够阅读 3-buffer SM 中被映射到输出的 SM 中的 PDO（Process Data Objects）数据, 默认的是 SyncManager2。我们阅读 SM2 的 ESC RAM 地址，存储到本地。我们将会读入 RXPDOsize bytes 的数据来触发一个完整的 SM 读操作。</li><li>在局部变量被更新后，我们将本地的 PDO 变量传递到用户应用中。</li><li>这个函数也包含了 watchdog 机制的实现，如果触发了它，会关闭输出，状态机改变到 Safe Operational。会更新 AlError 信息，告知 Master 发生了错误。</li></ul><h5 id="input-esc-视角的-input-即用户态的发送" tabindex="-1">Input：ESC 视角的 Input，即用户态的发送 <a class="header-anchor" href="#input-esc-视角的-input-即用户态的发送" aria-hidden="true">#</a></h5><ul><li>和输出类似，是反过来的，但是更加简单。即使是在 Safe Operational 状态下也会继续更新输入信息。</li><li>首先阅读用户应用数据，写入到本地的 PDO 变量中。在局部变量刷新后，把他们写入到 Input 对应的 SM，一般是 SyncManager3。这样就可以使用用户应用数据更新 ESC 的 RAM了。</li></ul><h3 id="特别需要注意" tabindex="-1">特别需要注意 <a class="header-anchor" href="#特别需要注意" aria-hidden="true">#</a></h3><p>在实现应用的时候，必须自己定义回调函数 <code>cb_get_inputs</code> 和 <code>cb_get_outputs</code>，这两者声明在 <code>ecat_slv.h</code> 中，会在 <code>DIG_process</code> 中获取输入和输出时分别触发。</p><p><code>esc_cfg_t</code> 设置项中也有定义不同的hook，是可选的。</p><h3 id="eep-c" tabindex="-1"><code>eep.c</code> <a class="header-anchor" href="#eep-c" aria-hidden="true">#</a></h3><p>ESI EEPROM 模拟模块。</p><h3 id="esc-coe-c" tabindex="-1"><code>esc_coe.c</code> <a class="header-anchor" href="#esc-coe-c" aria-hidden="true">#</a></h3><h3 id="esc-eoe-c" tabindex="-1"><code>esc_eoe.c</code> <a class="header-anchor" href="#esc-eoe-c" aria-hidden="true">#</a></h3><p>ESI EEPROM 模拟模块。</p><h3 id="esc-foe-c" tabindex="-1"><code>esc_foe.c</code> <a class="header-anchor" href="#esc-foe-c" aria-hidden="true">#</a></h3><p>ESI EEPROM 模拟模块。</p><h3 id="eep-c-1" tabindex="-1"><code>eep.c</code> <a class="header-anchor" href="#eep-c-1" aria-hidden="true">#</a></h3><p>ESI EEPROM 模拟模块。</p><h3 id="esc-c" tabindex="-1"><code>esc.c</code> <a class="header-anchor" href="#esc-c" aria-hidden="true">#</a></h3><p>全局变量： <code>ESC_MBX1_sma</code> sm address？（参考<code>ESC_write (ESC_MBX1_sma, MBh, ESC_MBXHSIZE + length);</code>） <code>ESC_MBX1_sml</code> sm length? <code>ESC_MBX1_sme</code> sm end? <code>ESC_MBX1_smc</code> sm controller?</p><p>函数： <code>ESC_xoeprocess</code> 负责处理错误的帧。 <code>ESC_read</code> 写 ESC 寄存器。 <code>ESC_write</code> 写 ESC 寄存器。 <code>ESC_ALeventmaskread</code> 读 ALeventMask 寄存器。 <code>ESC_ALeventmaskwrite</code> 写 ALeventMask 寄存器。</p><p><code>ESC_outreqbuffer</code> 从全局的<code>MBXcontrol</code>中寻找请求发送到 outbox 的mailbox 的下标。 <code>ESC_mbxprocess</code> 是实现 mailbox protocol 的，负责 mailbox 的读、发送、重传、mailbox full event 处理。 <code>ESC_writembx</code>将 <code>esc_slv.c</code> 中的全局变量 MBX 中 <code>ESC_outreqbuffer</code> 查询到的 mailbox 发送出去。</p><p>mailbox 的状态：</p><ul><li>0 : idle</li><li>1 : claimed for inbox</li><li>2 : claimed for outbox</li><li>3 : request post outbox</li><li>4 : outbox posted not send</li><li>5 : backup outbox</li><li>6 : mailbox needs to be transmitted again 分别对应宏</li></ul><div class="language-C"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MBXstate_idle</span><span style="color:#A6ACCD;">                   </span><span style="color:#F78C6C;">0x00</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MBXstate_inclaim</span><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">0x01</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MBXstate_outclaim</span><span style="color:#A6ACCD;">               </span><span style="color:#F78C6C;">0x02</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MBXstate_outreq</span><span style="color:#A6ACCD;">                 </span><span style="color:#F78C6C;">0x03</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MBXstate_outpost</span><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">0x04</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MBXstate_backup</span><span style="color:#A6ACCD;">                 </span><span style="color:#F78C6C;">0x05</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MBXstate_again</span><span style="color:#A6ACCD;">                  </span><span style="color:#F78C6C;">0x06</span></span>
<span class="line"></span></code></pre></div><h3 id="options-h" tabindex="-1"><code>options.h</code> <a class="header-anchor" href="#options-h" aria-hidden="true">#</a></h3><p>默认的宏定义。用户程序可以通过定义 <code>ecat_options.h</code> 覆盖他们。</p><h2 id="soes-样例" tabindex="-1">SOES 样例 <a class="header-anchor" href="#soes-样例" aria-hidden="true">#</a></h2><p>目录下的 <code>rtl_slave_demo</code> 是一个简短的led亮灯示例。在这个例子中，SOES 相关 API 的应用例子封装在了 <code>void soes (void *arg)</code> 函数中通过一个线程执行，另一个线程去读取 ESCvar.ALstatus 状态和 ESCvar.ALerror 错误码，根据状态机的状态和错误码来点亮 LED，设定闪烁频次。</p><p><code>rtl_lwip_eoe</code> 是一个基于 lwip 的 EtherNet over EtherCAT 示例。<code>mbox_fetch_tmo/mbox_post_tmo</code> 是带 timeout（tmo）的 mailbox fetch/post API。</p><h2 id="soes-中的一些数据规定" tabindex="-1">SOES 中的一些数据规定 <a class="header-anchor" href="#soes-中的一些数据规定" aria-hidden="true">#</a></h2><h3 id="sii-pdo-和-esi-pdo" tabindex="-1">SII-PDO 和 ESI-PDO <a class="header-anchor" href="#sii-pdo-和-esi-pdo" aria-hidden="true">#</a></h3><p>为了通过总线获取 SII-EEPROM（Slave Information Interface）和 ESI（EtherCAT Slave Information, 存储在 SII-EEPROM），规定了相关数据结构。其中：必须的参数，mandatory 用 M 代表；可选的参数，optional 用 O 代表。</p><p><img src="`+C+'" alt="img"></p><p><img src="'+D+`" alt="img"></p><h2 id="od" tabindex="-1">OD <a class="header-anchor" href="#od" aria-hidden="true">#</a></h2><p>同时，对于比较复杂的 Slave 还可以定义可选的 Object Dictionary（OD）。可以在 CoE 中使用它，它遵循 CANopen DS301。</p><ul><li>0x0000 - 0x0FFF, Data Type Area</li><li>0x1000 - 0x1FFF, Communication Area <ul><li>RxPDO , 0x1600 - 0x17FF</li><li>TxPDO , 0x1A00 - 0x1BFF</li></ul></li><li>0x2000 - 0x5FFF, Manufacture specific area</li><li>0x6000 - 0x6FFF, Input area</li><li>0x7000 - 0x7FFF, Output area</li><li>0x8000 - 0x8FFF, Configuration area</li><li>0x9000 - 0x9FFF, Information area</li><li>0xA000 - 0xAFFF, Diagnosis Area</li><li>0xB000 - 0xBFFF, Service Transfer Area</li><li>0xC000 - 0xEFFF, Reserved Area</li><li>0xF000 - 0xFFFF, Device Area</li></ul><h3 id="sm-事件类型" tabindex="-1">SM 事件类型 <a class="header-anchor" href="#sm-事件类型" aria-hidden="true">#</a></h3><ul><li>0, Unused</li><li>1, MailBox Receive, master to slave</li><li>2, MailBox Send, slave to master</li><li>3, Processdata output, master to slave</li><li>4, Processdata input, slave to master</li></ul><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-hidden="true">#</a></h2><p>HFA21 支持硬件offloading，上层透明。用透传来写的话，只需要在 UDP datagram 里去构造 EtherCAT 包，当然这样没有 ECS，而且在传输层之上，当作应用层协议来写了，也就不具备快速的on-the-fly能力了。</p><p>为了方便做解析，这么写的（具体定义参考上面 EtherCAT 帧结构的图解）</p><div class="language-C"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">stdint.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// gcc6 以上支持强制指定大小端（big-endian、little-endian、default）</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BIG_ENDIAN</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__attribute__</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">packed</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scalar_storage_order</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">big-endian</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)))</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ETHERCAT_PORT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">34980</span><span style="color:#676E95;font-style:italic;"> // 0x88A4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> BIG_ENDIAN </span><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> type : </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> res : </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> length : </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> EcatHeader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EcatHeaderPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> BIG_ENDIAN </span><span style="color:#C792EA;">union</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    BIG_ENDIAN </span><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> position</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> offset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> position</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Position Addressing</span></span>
<span class="line"><span style="color:#F07178;">    BIG_ENDIAN </span><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> offset</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> node</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Node Addressing</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> logical</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> EcatAddress</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EcatAddressPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint8_t</span><span style="color:#F07178;"> cmd</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint8_t</span><span style="color:#F07178;"> idx</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    EcatAddress address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    BIG_ENDIAN </span><span style="color:#C792EA;">union</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        BIG_ENDIAN </span><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> length : </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> r : </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> c : </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> m : </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // followed by more datagrams or not</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> u</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // for easy parse</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> suffix</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> irq : </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> EcatDataHeader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EcatDataHeaderPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    EcatDataHeader header</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 10 bytes</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint8_t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">         // 0-1486 bytes</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> work_counter</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 2bytes</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> EcatDatagram</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EcatDatagramPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    EcatHeader header</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    EcatDatagram datagram</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> EcatData</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EcatDataPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>用 union 来包裹位域，否则要挨个解析，即依次将相同的数字赋值给占用不同位域的变量，而用了union只需要赋值给对应的 <code>EcatDataHeader.suffix.u</code>。整个强制指定为符合网络序的大端，否则需要手动处理主机序的转换。 比如，假设收到的帧中， <code>EcatDataHeader.suffix</code> 对应的值是0x12345678。 当前可以这么赋值：</p><div class="language-C"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">EcatDataHeader header</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">uint16_t</span><span style="color:#A6ACCD;"> suffix </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x1234</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">header.suffix.u </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> suffix</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%x,%x,%x,%x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> header.suffix.s.length</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> header.suffix.s.r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">header.suffix.s.c</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">header.suffix.s.m</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>但是如果</p><div class="language-C"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">typedef</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint8_t</span><span style="color:#F07178;"> cmd</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint8_t</span><span style="color:#F07178;"> idx</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    EcatAddress address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> length : </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> r : </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> c : </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> m : </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // followed by more datagrams or not</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint16_t</span><span style="color:#F07178;"> irq : </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> EcatDataHeader</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">EcatDataHeaderPtr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">EcatDataHeader header</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">uint16_t</span><span style="color:#A6ACCD;"> suffix </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x1234</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">header.length </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> suffix</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">header.r </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> suffix</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">header.c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> suffix</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">header.m </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> suffix</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">printf</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">%x,%x,%x,%x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> header.length</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> header.r</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">header.c</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">header.m</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>此时还会有大小端的问题，需要用 <code>htonl</code> 等转换。</p><h1 id="s7-库" tabindex="-1">S7 库 <a class="header-anchor" href="#s7-库" aria-hidden="true">#</a></h1><p>关于 S7，有几篇不错的博客：</p><p><a href="http://gmiru.com/article/s7comm/" target="_blank" rel="noreferrer">The Siemens S7 Communication - Part 1 General Structure</a><a href="http://gmiru.com/article/s7comm-part2/" target="_blank" rel="noreferrer">The Siemens S7 Communication - Part 2 Job Requests and Ack Data</a><a href="https://www.jianshu.com/p/0e9f74d683b4" target="_blank" rel="noreferrer">上面两篇博客的翻译</a><a href="http://blog.nsfocus.net/s7comm-readszl-0427/" target="_blank" rel="noreferrer">对 ReadSZL 的详解</a>，SZL 是系统状态列表（德语：System-ZustandsListen，英语：System Status Lists），用于描述PLC的当前状态，只能读取不能修改。</p><p>注意在 wireshark 中可以用 <code>s7comm</code> 或 <code>tcp.port == 102</code> 来过滤 S7 的包，但是前者只能在展示时起效，后者可以在过滤时起效。</p><p>该库是 Siemens 给自家 PLC 写的通讯库，使用时需要指定 IP、port、Rack，Slot。</p><p>具体地：</p><p>建立连接是用的TSnap7Peer的PeerConnect函数，调用了TIsoTcpSocket的 isoConnect。</p><p>s7_isotcp.cpp 里面定义了TIsoTcpSocket的构造函数，设置的Timeout是3000，tcp port是用的102端口。（Rack默认是0，Slot默认是2，我们的设备Slot需要设置成1。）。</p><p>发送过去的载荷是在TIsoTcpSocket 的 BuildControlPDU 里构造的 FControlPDU。</p><p>Client 的具体的 Operation 都是通过 TSnap7Job 结构体代理的，定义在 s7_micro_client 中。在PerformOperation() 被调用后，就会填充它。</p><p>填充方法是，比如TSnap7MicroClient::opGetOrderCode()中，在opReadSZL()中写入到TS7Buffer opData里将 void* 的TSnap7Job::pData 转换成目标类型的.。然后再从这个 TS7Buffer 里读取出来复制到TSnap7Job::pData的各个成员里。</p><p>opReadMultiVars/opWriteMultiVars 会自动忽略掉Area不是DB的 DBNumber。把请求的DBNumber都填充到ReqParams里，随着首部PS7ReqHeader TSnap7Peer::PDUH_out 作为PDU的数据单元。</p><p>opDBGet/opDBFill 调用了 opReadArea/opWriteArea。</p><p>所有的operation都是通过PerformOperation()去管理的，而每个operation中，都是通过TIsoTcpSocket::isoExchangeBuffer来完成的发送和接收，这个函数可以接收data来修改发送出去的PDU.payload，如果接收了空指针（一半都会传入0），则会使用默认的 PDU.payload。</p><p>接收到的数据会存储到ResData中，并复制到Target结束（Target是Job.pData偏移后 byte 类型的指针）。</p><p>主要类的继承关系：</p><p><img src="`+A+'" alt="img"></p><p><img src="'+h+'" alt="img"></p><p>测试情况：</p><p><img src="'+f+'" alt="img"></p>',106),E=[_];function S(x,m,g,O,b,T){return n(),a("div",null,E)}const I=s(u,[["render",S]]);export{v as __pageData,I as default};
