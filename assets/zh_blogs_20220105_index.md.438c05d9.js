import{_ as s,c as a,o as n,e as l}from"./app.7e53e423.js";const p="/assets/pc2board.2a8e7fd5.png",h=JSON.parse('{"title":"Wireshark 是在怎么抓包的？","description":"用 Wireshark 时抓到了进击的巨型帧？","frontmatter":{"title":"Wireshark 是在怎么抓包的？","description":"用 Wireshark 时抓到了进击的巨型帧？","tags":["Tracing","杂谈"]},"headers":[{"level":2,"title":"现象","slug":"现象","link":"#现象","children":[]},{"level":2,"title":"问题分析","slug":"问题分析","link":"#问题分析","children":[]},{"level":2,"title":"Wireshark 具体实现","slug":"wireshark-具体实现","link":"#wireshark-具体实现","children":[]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[{"level":3,"title":"解析 pcnpag 文件","slug":"解析-pcnpag-文件","link":"#解析-pcnpag-文件","children":[]}]}],"relativePath":"zh/blogs/20220105/index.md"}'),o={name:"zh/blogs/20220105/index.md"},e=l('<nav class="table-of-contents"><ul><li><a href="#现象">现象</a></li><li><a href="#问题分析">问题分析</a></li><li><a href="#wireshark-具体实现">Wireshark 具体实现</a></li><li><a href="#附录">附录</a><ul><li><a href="#解析-pcnpag-文件">解析 pcnpag 文件</a></li></ul></li></ul></nav><h1 id="wireshark-是怎么抓包的" tabindex="-1">Wireshark 是怎么抓包的？ <a class="header-anchor" href="#wireshark-是怎么抓包的" aria-hidden="true">#</a></h1><h2 id="现象" tabindex="-1">现象 <a class="header-anchor" href="#现象" aria-hidden="true">#</a></h2><p>之前在测试 <a href="https://www.gitlink.org.cn/xuos/xiuos" target="_blank" rel="noreferrer">XiUOS</a> 网络框架的时候，将开发板和 PC 直连，在开发板架起 TCP 服务端，PC 上开了 Wireshark，截了一张图</p><p><img src="'+p+`" alt=""></p><p>可以看到 Wireshark 抓到了一个长度为 <code>13194</code> 的一个帧，远超了 TCP PDU 最大长度。顿时感觉很奇怪，看了一下自己的网卡设置，也没有开启巨型帧，为什么会看到这么大的一个帧呢？</p><h2 id="问题分析" tabindex="-1">问题分析 <a class="header-anchor" href="#问题分析" aria-hidden="true">#</a></h2><p>基于一则类似的 <a href="https://osqa-ask.wireshark.org/questions/24699/tcp-packet-length-was-much-greater-than-mtu/" target="_blank" rel="noreferrer">讨论</a></p><blockquote><p>这是因为系统启用了 TCP Large Segment Offload（缩写为 TSO 或 LSO）。操作系统将大于 MTU 的数据包传递给网络适配器，而网络适配器驱动程序负责分解这些数据包，以匹配 MTU。TSO 是一种增强性能的可选特性，可以将其关闭，在这种情况下，操作系统将不再生成过大的帧。</p></blockquote><p>也就是说，这是因为抓包时抓到的是系统提供给网卡的巨型帧，在网卡层面才会进行分拆处理。</p><h2 id="wireshark-具体实现" tabindex="-1">Wireshark 具体实现 <a class="header-anchor" href="#wireshark-具体实现" aria-hidden="true">#</a></h2><p>基于另一则关于 Wireshark 是如何抓包的 <a href="https://osqa-ask.wireshark.org/questions/22956/where-exactly-wireshark-does-captures-packets/" target="_blank" rel="noreferrer">讨论</a>。</p><p>通常这种抓包的框架都是作用于在网卡驱动和内核高层的协议栈（如 TCP/IP）之间的。Wireshark 在 Linux 下使用的是 libpcap，相关 slides 见 <a href="https://sharkfestus.wireshark.org/sharkfest.11/presentations/McCanne-Sharkfest&#39;11_Keynote_Address.pdf" target="_blank" rel="noreferrer">libpcap: An Architecture and Optimization Methodology for Packet Capture</a>。之前学习 eBPF 的时候了解到 tcpdump 是基于 BPF 的。事实上，tcpdump 也是基于 libpcap 开发的，libpcap 是单独抽离出的一个库，封装了 BPF 相关调用。</p><p>Windows 版本是基于 WinPcap 开发的，WinPcap 的 <a href="https://www.winpcap.org/misc/faq.htm#Q-26" target="_blank" rel="noreferrer">QA</a> 里也谈到了具体的实现：</p><blockquote><p>问：WinPcap如何与Windows网络连接？它是否会降低TCP/IP堆栈和应用程序的速度？ 答：在Windows内核中，WinPcap作为协议驱动程序运行。它与 TCP/IP 处于同一层级。和 TCP/IP 协议栈一样，它从底层网卡驱动程序接收数据包，但只有在基于 WinPcap 的工具正在捕获数据包时才会进行接收。这意味着，当安装了 WinPcap 但未进行捕获时，对系统的影响不存在。注意，开机后第一个网络流量捕获应用程序监听适配器时，WinPcap 驱动程序才会被加载到内核中。当 WinPcap 运行时，它不会直接与 TCP/IP 进行交互。然而，尤其是在高网络负载下，WinPcap 活动（尤其是软件中断级别的活动）将影响 TCP/IP 响应。</p></blockquote><p>WinPcap 的设计和实现可以见论文 <a href="https://www.winpcap.org/docs/iscc01-wpcap.pdf" target="_blank" rel="noreferrer">An Architecture for High Performance Network Analysis</a>（开坑有空详细读一下）。</p><h2 id="附录" tabindex="-1">附录 <a class="header-anchor" href="#附录" aria-hidden="true">#</a></h2><h3 id="解析-pcnpag-文件" tabindex="-1">解析 <code>pcnpag</code> 文件 <a class="header-anchor" href="#解析-pcnpag-文件" aria-hidden="true">#</a></h3><p>使用 Python 解析 <code>pcnpag</code> 文件、进行数据分析时参考的资料</p><ul><li><p>IETF 对 pcapng 的规范：<a href="https://www.ietf.org/staging/draft-tuexen-opsawg-pcapng-02.html" target="_blank" rel="noreferrer">PCAP Next Generation (pcapng) Capture File Format</a></p></li><li><p>Python 解析 pcapng 文件：<a href="https://github.com/rshk/python-pcapng" target="_blank" rel="noreferrer">rshk/python-pcapng: Pure-Python library to parse the pcap-ng format used by newer versions of dumpcap &amp; similar tools</a></p></li></ul><h4 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-hidden="true">#</a></h4><p>下面是在实验中写的一段加载 <code>pcnpag</code> 文件并计算吞吐量、包数的 Python 脚本。这里默认该文件中记录的是已经在 Wireshark 里经过过滤后导出的特定分组，所以直接对整个文件进行了计算</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> pcapng </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> FileScanner</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> pcapng</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">blocks </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> InterfaceStatistics</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> EnhancedPacket</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> pcapng</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">structs</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> ps</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">SECOND </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1e6</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 一秒钟</span></span>
<span class="line"><span style="color:#A6ACCD;">UNIT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">1e6</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 单位时间，大于一秒钟，计算吞吐量的窗口</span></span>
<span class="line"><span style="color:#A6ACCD;">UNIT_NUM </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> UNIT</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">SECOND</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">filename</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    curr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    packet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    throughput </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">open</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">filename</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rb</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> f</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        scanner </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FileScanner</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">__iter__</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        section_header </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">scanner</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        interface_description </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">scanner</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        interface_statistics </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">None</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> block </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> scanner</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">block</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">is</span><span style="color:#A6ACCD;"> EnhancedPacket </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> block</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">packet_len</span><span style="color:#89DDFF;">&gt;</span><span style="color:#F78C6C;">80</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                packet </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">                volume </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> block</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">packet_len</span></span>
<span class="line"><span style="color:#A6ACCD;">                timestamp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">timestamp_high</span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">)+</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">timestamp_low</span></span>
<span class="line"><span style="color:#A6ACCD;">                curr_temp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">timestamp</span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;">SECOND</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> curr </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> curr_temp</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                    throughput</span><span style="color:#89DDFF;">[-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> block</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">packet_len</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                    throughput</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">block</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">packet_len</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    curr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> curr_temp</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># InterfaceStatistics</span></span>
<span class="line"><span style="color:#A6ACCD;">                interface_statistics </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> block</span></span>
<span class="line"><span style="color:#A6ACCD;">    throughput </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">UNIT_NUM</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> t </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> throughput</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># get kbps</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> throughput</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> packet</span></span>
<span class="line"></span></code></pre></div>`,23),t=[e];function r(c,D,i,y,F,C){return n(),a("div",null,t)}const d=s(o,[["render",r]]);export{h as __pageData,d as default};
