import{_ as a}from"./chunks/Anya.5efa9976.js";import{_ as l,c as o,a as e,w as p,e as s,r as t,o as r,d as c}from"./app.df3dc0f5.js";const m=JSON.parse('{"title":"Mimic Generic Specialization in Rust","description":"Fine, I give up","frontmatter":{"title":"Mimic Generic Specialization in Rust","description":"Fine, I give up","tags":["Rust","泛型"]},"headers":[{"level":2,"title":"Background","slug":"background","link":"#background","children":[]},{"level":2,"title":"How the problem arose?","slug":"how-the-problem-arose","link":"#how-the-problem-arose","children":[]},{"level":2,"title":"Mimic the SFINAE!","slug":"mimic-the-sfinae","link":"#mimic-the-sfinae","children":[]},{"level":2,"title":"Is it perfect?","slug":"is-it-perfect","link":"#is-it-perfect","children":[]},{"level":2,"title":"Fine, I give up ...","slug":"fine-i-give-up","link":"#fine-i-give-up","children":[]},{"level":2,"title":"Related questions","slug":"related-questions","link":"#related-questions","children":[]},{"level":2,"title":"Appendix","slug":"appendix","link":"#appendix","children":[{"level":3,"title":"Constraints on GAT","slug":"constraints-on-gat","link":"#constraints-on-gat","children":[]},{"level":3,"title":"Differences between Tower and Motore","slug":"differences-between-tower-and-motore","link":"#differences-between-tower-and-motore","children":[]},{"level":3,"title":"Erase message from the Request in Tonic","slug":"erase-message-from-the-request-in-tonic","link":"#erase-message-from-the-request-in-tonic","children":[]}]},{"level":2,"title":"Sentinel-Rust Resources","slug":"sentinel-rust-resources","link":"#sentinel-rust-resources","children":[]}],"relativePath":"zh/blogs/20221108/index.md"}'),F={name:"zh/blogs/20221108/index.md"},D=s(`<nav class="table-of-contents"><ul><li><a href="#background">Background</a></li><li><a href="#how-the-problem-arose">How the problem arose?</a></li><li><a href="#mimic-the-sfinae">Mimic the SFINAE!</a></li><li><a href="#is-it-perfect">Is it perfect?</a></li><li><a href="#fine-i-give-up">Fine, I give up ...</a></li><li><a href="#related-questions">Related questions</a></li><li><a href="#appendix">Appendix</a><ul><li><a href="#constraints-on-gat">Constraints on GAT</a></li><li><a href="#differences-between-tower-and-motore">Differences between Tower and Motore</a></li><li><a href="#erase-message-from-the-request-in-tonic">Erase message from the Request in Tonic</a></li></ul></li><li><a href="#sentinel-rust-resources">Sentinel-Rust Resources</a></li></ul></nav><h1 id="mimic-generic-specialization-in-rust" tabindex="-1">Mimic Generic Specialization in Rust <a class="header-anchor" href="#mimic-generic-specialization-in-rust" aria-hidden="true">#</a></h1><p>Last weekend I tried to write the <a href="https://github.com/sentinel-group/sentinel-rust/" target="_blank" rel="noreferrer">sentinel</a> middleware for <a href="https://github.com/hyperium/tonic/" target="_blank" rel="noreferrer">tonic</a> and <a href="https://github.com/cloudwego/volo/" target="_blank" rel="noreferrer">volo</a>, and struggled fighting against rustc again.</p><h2 id="background" tabindex="-1">Background <a class="header-anchor" href="#background" aria-hidden="true">#</a></h2><p>The tonic supports two ways to implement middleware.</p><ul><li><a href="https://docs.rs/tower/latest/tower/trait.Service.html" target="_blank" rel="noreferrer">tower service</a></li><li><a href="https://docs.rs/tonic/latest/tonic/service/interceptor/index.html" target="_blank" rel="noreferrer">tonic interceptor</a></li></ul><p>Different from tonic, volo utilizes <a href="https://docs.rs/motore/latest/motore/service/trait.Service.html" target="_blank" rel="noreferrer">motore</a> as the service abstraction.</p><h2 id="how-the-problem-arose" tabindex="-1">How the problem arose? <a class="header-anchor" href="#how-the-problem-arose" aria-hidden="true">#</a></h2><p>I first implement the <code>tonic::Servie</code> . Intuitively, I wrote</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SentinelService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SentinelService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><p>So what I expected is that: For tonic, whose request is in fact <code>http::Request&lt;http_body::combinators::UnsyncBoxBody&lt;bytes::Bytes, tonic::Status&gt;&gt;</code> , will be substituted in the first generic, instead of the second. In the first case, we can call methods on <code>http::Request</code> to provide a default resource extractor for <a href="https://github.com/sentinel-group/sentinel-rust/" target="_blank" rel="noreferrer">sentinel</a>, while in the second one, the custom resource extractor is necessary.</p><p>I thought that there is a similar feature in rust as <strong>SFINAE</strong> in C++. The best specialization of the generic would be chosen.</p><p>However, rustc reminded me that two implementation of trait <code>Service</code> was contradicted with each other. I realized that there was no <code>SFINAE</code> in rust!</p><h2 id="mimic-the-sfinae" tabindex="-1">Mimic the SFINAE! <a class="header-anchor" href="#mimic-the-sfinae" aria-hidden="true">#</a></h2><p>From <a href="https://stackoverflow.com/questions/65131776/pick-preferred-implementation-on-conflicting-trait-implementation-using-negativ" target="_blank" rel="noreferrer">Pick preferred implementation on conflicting trait implementation (using negative bounds) - Stack Overflow</a>, I learnt that we could use the unstable <a href="https://doc.rust-lang.org/beta/unstable-book/language-features/negative-impls.html" target="_blank" rel="noreferrer">negative_impls</a> and <a href="https://doc.rust-lang.org/nightly/unstable-book/language-features/auto-traits.html" target="_blank" rel="noreferrer">auto_traits</a> feature, to do this magic</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">#![</span><span style="color:#A6ACCD;">cfg_attr</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">feature </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nightly</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> feature</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">auto_traits</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> negative_impls</span><span style="color:#89DDFF;">))]</span></span>
<span class="line"><span style="color:#C792EA;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WithoutDefaultExtractor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!</span><span style="color:#FFCB6B;">WithoutDefaultExtractor</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SentinelService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SentinelService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WithoutDefaultExtractor</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div>`,16),y=s('<div align="center"><img src="'+a+`" style="zoom:20%;"></div><h2 id="is-it-perfect" tabindex="-1">Is it perfect? <a class="header-anchor" href="#is-it-perfect" aria-hidden="true">#</a></h2><p>If the generic is the same, say, if we have the following code,</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SentinelService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SentinelService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AnotherTrait</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><p>the above method does not work anymore. Or we can use a Higher-Rank Trait Bounds (HRTBs) and apply the similar method? I didn&#39;t try.</p><h2 id="fine-i-give-up" tabindex="-1">Fine, I give up ... <a class="header-anchor" href="#fine-i-give-up" aria-hidden="true">#</a></h2><p>Finally, I choose to add some feature items in my <code>Cargo.toml</code>, so that I can use the <code>#[cfg(feature=&quot;http&quot;)]</code> attribute to control the specialization by hand 😦</p><p>Then the code becomes</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">feature </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SentinelService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">not</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">feature </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))]</span></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SentinelService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">where</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">R</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><h2 id="related-questions" tabindex="-1">Related questions <a class="header-anchor" href="#related-questions" aria-hidden="true">#</a></h2><p><a href="https://stackoverflow.com/questions/66832882/generics-partial-specialization-in-rust" target="_blank" rel="noreferrer">Generics partial specialization in Rust - Stack Overflow</a></p><p><a href="https://stackoverflow.com/questions/47675493/equivalent-of-specific-template-usage-in-c-for-rust" target="_blank" rel="noreferrer">Equivalent of specific template usage in C++ for Rust - Stack Overflow</a></p><h2 id="appendix" tabindex="-1">Appendix <a class="header-anchor" href="#appendix" aria-hidden="true">#</a></h2><h3 id="constraints-on-gat" tabindex="-1">Constraints on GAT <a class="header-anchor" href="#constraints-on-gat" aria-hidden="true">#</a></h3><p>During implementing the middleware, I work a lot around the GAT in <code>tower</code> and <code>motore</code>. Generally I found there are two scenes where we may impose constraints on GAT.</p><ul><li>impose a trait constraint on GAT</li><li>instantiate the trait with specific GAT, <em>i.e.</em>, the equality constraint.</li></ul><p>The first one is widely used in the source code of <code>tower</code> and <code>motore</code>, and the second one is related to a <a href="https://stackoverflow.com/questions/70531785/constraint-associated-type-of-a-generic-associated-type/74597129#74597129" target="_blank" rel="noreferrer">question</a> on StackOverflow answered by me.</p><p>Here I made a <a href="https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=d7b402b716b7c0911fe42b0984f32dd4" target="_blank" rel="noreferrer">complied example</a> to illustrate them.</p><p>See how we impose constraints on GAT <code>Builder::InstanceForBuilder</code> and <code>Builder::Useless</code> and the differences between them.</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Trait definitions.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Builder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InstanceForBuilder</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Instance</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Useless</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;(&amp;</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">usize</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> Self</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">InstanceForBuilder</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">trait</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Instance</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Some functions will only work when the instance has some concrete associated type.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InstanceProperty</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">build_with_42_for_bool_instance</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">I</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">builder</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">B</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F78C6C;">where</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Builder</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">InstanceForBuilder</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;=</span><span style="color:#FFCB6B;">I</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">B</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Builder</span><span style="color:#89DDFF;">&gt;::</span><span style="color:#FFCB6B;">Useless</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Debug</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">I</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Instance</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InstanceProperty</span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;">bool</span><span style="color:#89DDFF;">&gt;+</span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Debug</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Now try it out.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyBuilder</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">derive</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Debug</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyInstance</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    val</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">usize</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Builder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InstanceForBuilder</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyInstance</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Useless</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">str</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;(&amp;</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">usize</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> Self</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">InstanceForBuilder</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">MyInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> val </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Instance</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyInstance</span><span style="color:#89DDFF;">&lt;&#39;</span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InstanceProperty</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bool</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> builder </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyBuilder</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">build_with_42_for_bool_instance</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">builder</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;"> // TODO: Doesn&#39;t work</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="differences-between-tower-and-motore" tabindex="-1">Differences between Tower and Motore <a class="header-anchor" href="#differences-between-tower-and-motore" aria-hidden="true">#</a></h3><p>The <code>Service</code> trait in <code>motore</code> is different from that in tower. In the motore, the metadata and extension is moved to the context argument passed along the call chain, and the request is kept by another argument.</p><p>The <code>poll_ready</code> is hided. In fact, <code>actix-web</code> shares similar opinions with <code>motore</code>, it provides <a href="https://docs.rs/actix-web/4.2.1/actix_web/dev/macro.forward_ready.html" target="_blank" rel="noreferrer">actix_web::dev::forward_ready</a> and <a href="https://docs.rs/actix-web/4.2.1/actix_web/dev/macro.always_ready.html" target="_blank" rel="noreferrer">actix_web::dev::always_ready</a> to help developers reduce boilerplate codes.</p><h3 id="erase-message-from-the-request-in-tonic" tabindex="-1">Erase message from the Request in Tonic <a class="header-anchor" href="#erase-message-from-the-request-in-tonic" aria-hidden="true">#</a></h3><p>In tower, the type of the message is erased in <code>tonic::service::interceptor::Interceptor</code> by the following magical code. The interceptor cannot modify the message of requests.</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// tonic/tonic/src/service/interceptor.rs</span></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">F</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReqBody</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ResBody</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Service</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ReqBody</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InterceptedService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">F</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">call</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#C792EA;">mut</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ReqBody</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> Self</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Future</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // It is bad practice to modify the body (i.e. Message) of the request via an interceptor.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // To avoid exposing the body of the request to the interceptor function, we first remove it</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // here, allow the interceptor to modify the metadata and extensions, and then recreate the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // HTTP request with the body. Tonic requests do not preserve the URI, HTTP version, and</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // HTTP method of the HTTP request, so we extract them here and then add them back in below.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> uri </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">uri</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> method </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">method</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">clone</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">version</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> req </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">from_http</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">metadata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> extensions</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">into_parts</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		// Here the \`msg\` is erased from the \`Request\`:) </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">match</span><span style="color:#A6ACCD;"> self</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">f</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">from_parts</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">metadata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> extensions</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">Ok</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">metadata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> extensions</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">into_parts</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> req </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Request</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">from_parts</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">metadata</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> extensions</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> req </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">into_http</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">uri</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> version</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SanitizeHeaders</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">No</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">ResponseFuture</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">future</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">inner</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">Err</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ResponseFuture</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">status</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">status</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="sentinel-rust-resources" tabindex="-1">Sentinel-Rust Resources <a class="header-anchor" href="#sentinel-rust-resources" aria-hidden="true">#</a></h2><p><a href="https://github.com/sentinel-group/sentinel-rust/wiki" target="_blank" rel="noreferrer">Tutorial</a><a href="https://docs.rs/sentinel-core/latest/sentinel_core/" target="_blank" rel="noreferrer"> API Doc</a><a href="https://github.com/sentinel-group/sentinel-rust/tree/main/examples" target="_blank" rel="noreferrer">Example Codes</a></p>`,28);function i(C,A,B,d,h,u){const n=t("center");return r(),o("div",null,[D,e(n,null,{default:p(()=>[c("ELEGANT! VERY ELEGANT!")]),_:1}),y])}const b=l(F,[["render",i]]);export{m as __pageData,b as default};
