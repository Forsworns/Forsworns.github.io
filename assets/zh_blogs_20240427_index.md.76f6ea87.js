import{_ as s,c as a,o as n,e as l}from"./app.7e53e423.js";const p="/assets/user.a1fa5ab1.png",o="/assets/bpf.eccb37e4.png",u=JSON.parse('{"title":"基于 BPF 的 GPU 可观测：Meta strobelight","description":"博客解读和示例代码分析","frontmatter":{"title":"基于 BPF 的 GPU 可观测：Meta strobelight","description":"博客解读和示例代码分析","tags":["bpf","GPU"]},"headers":[],"relativePath":"zh/blogs/20240427/index.md"}'),e={name:"zh/blogs/20240427/index.md"},t=l('<nav class="table-of-contents"><ul></ul></nav><h1 id="meta-的-gpu-可观测建设" tabindex="-1">Meta 的 GPU 可观测建设 <a class="header-anchor" href="#meta-的-gpu-可观测建设" aria-hidden="true">#</a></h1><p>最近注意到一篇<a href="https://atscaleconference.com/systemscale-ai-observability/" target="_blank" rel="noreferrer">博客</a>，里面讲了 Meta 是如何在各个层面上对 AI 系统进行可观测建设的。</p><p>从底层到上层都是一些耳熟能详的工具，或者已经火过一把的 Meta 开源项目，例如：</p><ul><li><a href="https://github.com/facebookincubator/dynolog" target="_blank" rel="noreferrer">Meta Dynolog</a></li><li>Nvidia’s Datacenter GPU Manager (DCGM)</li><li><a href="https://pytorch.org/docs/stable/profiler.html" target="_blank" rel="noreferrer">Pytorch Profiler</a></li><li><a href="https://github.com/pytorch/kineto" target="_blank" rel="noreferrer">Pytorch Kineto</a></li></ul><p>但是里面有一个有趣的项目：<a href="https://github.com/facebookincubator/strobelight" target="_blank" rel="noreferrer">Strobelight</a>，一个基于 BPF 的 GPU 可观测工具、神秘啊，别的项目博客中都贴了仓库地址，这个明明能在 github 搜到，但是没贴链接 = =。</p><p>具体而言，Strobelight 是一个在 Meta 的所有主机上运行的守护进程，既充当分析器又充当分析器编排工具。可以通过某些事件（例如 OOM 事件）触发分析。Strobelight 由多个子分析器组成。通过这些子分析器，它能够从机群中的任何主机收集各种性能分析，如 CPU 堆栈、内存快照和Python 堆栈。Strobelight 在许多子分析器中依赖于 BPF。他们最近还向 Strobelight 的分析器套件中添加了基于 BPF 的 CPU-&gt;GPU 分析器。</p><p>应该就是文中的典型用例 Gpusnoop，它是一个基于 BPF 的 profiler 套件。它能 hook 到一系列有趣的 GPU 事件上，例如 CUDA 核函数加载、CUDA events 同步、显存管理事件，也支持 pytorch 相关事件。</p><h1 id="案例分析-基于-bpf-trace-cuda-显存管理" tabindex="-1">案例分析：基于 BPF trace CUDA 显存管理 <a class="header-anchor" href="#案例分析-基于-bpf-trace-cuda-显存管理" aria-hidden="true">#</a></h1><p>通过使用 uprobes attach 到 CUDA 显存管理事件，gpusnoop 可以用于构建显存分配的时间线，并检测泄漏的显存的调用栈。</p><p>下面是简化后的代码，它将 attach 到 cudaMalloc 和 cudaFree 事件，并记录所有已释放和未释放的显存，以及它们的大小和调用栈。</p><p>用户侧代码示例：</p><p><img src="'+p+'" alt=""></p><p>BPF 侧代码示例：</p><p><img src="'+o+`" alt=""></p><p>上述代码 attach 到 cudaMalloc 事件，并跟踪请求的分配大小，然后 attach 到 cudaMalloc 的返回事件，获取分配到的地址。它使用这些数据来跟踪未释放的显存分配及其大小。然后，我们可以使用这些数据，在任何时刻跟踪未释放的显存分配及其大小和调用栈。我们还可以可视化这些数据，并检测显存泄漏，或者使用它来缩小使用最多显存的调用栈范围。</p><h1 id="strobelight-代码分析-基于-bpf-trace-cuda-核函数加载" tabindex="-1">Strobelight 代码分析：基于 BPF trace CUDA 核函数加载 <a class="header-anchor" href="#strobelight-代码分析-基于-bpf-trace-cuda-核函数加载" aria-hidden="true">#</a></h1><p>Gpusnoop 的代码应该没有开源，但是 <a href="https://github.com/facebookincubator/strobelight" target="_blank" rel="noreferrer">Strobelight</a> 里面倒是确实有一个 trace CUDA 核函数加载的 BPF <a href="https://github.com/facebookincubator/strobelight/blob/main/strobelight/src/profilers/gpuevent_snoop/GpuEventSnoop.cpp" target="_blank" rel="noreferrer">代码示例</a>。</p><p>全局定义了一个 64M 的 BPF Ring Buffer 用来存放 BPF 侧 trace 到的 <code>gpukern_sample</code> 信息，它的定义如下，也就是 <code>cudaLaunchKernel</code> 的参数，和一些 cpu 侧的信息、栈。</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">gpukern_sample</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> pid</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> ppid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">char</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">comm</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">TASK_COMM_LEN</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">uint64_t</span><span style="color:#F07178;"> kern_func_off</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> grid_x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> grid_y</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> grid_z</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> block_x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> block_y</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> block_z</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">uint64_t</span><span style="color:#F07178;"> stream</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">uint64_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">MAX_GPUKERN_ARGS</span><span style="color:#89DDFF;">];</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> ustack_sz</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">stack_trace_t</span><span style="color:#F07178;"> ustack</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>BPF 侧代码比较简短，完整贴上来了</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SP_OFFSET</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">offset</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> (void*)PT_REGS_SP(ctx) + offset * 8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">SEC</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uprobe</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BPF_KPROBE</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">handle_cuda_launch</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">u64</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">func_off</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">u64</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">grid_xy</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">u64</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">grid_z</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">u64</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">block_xy</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">u64</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">block_z</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">uintptr_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argv</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">gpukern_sample</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bpf_ringbuf_reserve</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">rb</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(*</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">task_struct</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> task </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">task_struct</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">bpf_get_current_task</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bpf_get_current_pid_tgid</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">ppid </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BPF_CORE_READ</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">task</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> real_parent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> tgid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">bpf_get_current_comm</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">comm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">comm</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">kern_func_off </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> func_off</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">grid_x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">u32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">grid_xy</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">grid_y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">u32</span><span style="color:#89DDFF;">)(</span><span style="color:#A6ACCD;">grid_xy </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">grid_z </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">u32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">grid_z</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">block_x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">u32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">block_xy</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">block_y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">u32</span><span style="color:#89DDFF;">)(</span><span style="color:#A6ACCD;">block_xy </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">block_z </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">u32</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">block_z</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">bpf_probe_read_user</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">uintptr_t</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SP_OFFSET</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Read the Cuda Kernel Launch Arguments</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> MAX_GPUKERN_ARGS</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> arg_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // We don&#39;t know how many argument this kernel has until we parse the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // signature, so we always attemps to read the maximum number of args,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // even if some of these arg values are not valid.</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">bpf_probe_read_user</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">arg_addr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">u64</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*)(</span><span style="color:#F07178;">argv </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> i </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">u64</span><span style="color:#89DDFF;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">bpf_probe_read_user</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#F07178;">arg_addr</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> arg_addr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Read the Cuda Kernel Launch Stack</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">ustack_sz </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">bpf_get_stack</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">ustack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">ustack</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> BPF_F_USER_STACK</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">uint64_t</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">bpf_ringbuf_submit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>用户侧基本就是 libbpf 的脚手架样板。然后需要注意的是因为是用 uprobe，得额外写一个解析 <code>/proc/$pid/exe</code> 里每个文件找 <code>cudaLaunchKernel</code> 符号的步骤，然后把 attach 上去，这里 <code>$pid</code> 是被 attach 的进程。</p><p>从 ring buffer 里面 poll 到 <code>gpukern_sample</code> 后，触发下面这个回调进行分析</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handle_event</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#676E95;font-style:italic;"> /*data_sz*/</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">gpukern_sample</span><span style="color:#C792EA;">*</span><span style="color:#A6ACCD;"> e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">gpukern_sample</span><span style="color:#C792EA;">*</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    SymUtils</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> symUtils </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SymUtils</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    SymbolInfo symInfo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> symUtils</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getSymbolByAddr</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">kern_func_off</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{} [{}] KERNEL [0x{:x}] STREAM 0x{:&lt;16x} GRID ({},{},{}) BLOCK ({},{},{}) {}</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">comm</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pid</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">kern_func_off</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">stream</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">grid_x</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">grid_y</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">grid_z</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">block_x</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">block_y</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">block_z</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        symInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substr</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MAX_FUNC_DISPLAY_LEN</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">symInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">length</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> MAX_FUNC_DISPLAY_LEN </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Args: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> symInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> MAX_GPUKERN_ARGS</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{} arg{}=0x{:x}</span><span style="color:#A6ACCD;">\\n</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">symInfo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">],</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Stack: </span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> symUtils</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">getStackByAddrs</span><span style="color:#89DDFF;">((</span><span style="color:#C792EA;">uint64_t</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">ustack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">ustack_sz</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> frame </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> stack</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">frame</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">fmt</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{:-&lt;40}</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>感觉这个项目的难度在于 <a href="https://github.com/facebookincubator/strobelight/blob/main/strobelight/src/utils/SymUtils.cpp" target="_blank" rel="noreferrer">symUtils</a> 里面的这些 parser 写起来比较难…… BPF 侧还是很简单的</p><h1 id="为什么是-bpf" tabindex="-1">为什么是 BPF <a class="header-anchor" href="#为什么是-bpf" aria-hidden="true">#</a></h1><p>所以核心问题是为什么要用 BPF？原始博客中的几个说法感觉说服力并不强，只是从 BPF 的角度去讲了</p><ul><li>BPF 自身的安全性、可编程性：老生常谈。</li><li>性能开销低：可随时启停，基于 uprobe，存疑。</li><li>用户无感，不需要用户代码改动。</li></ul>`,29),c=[t];function r(D,F,y,A,C,i){return n(),a("div",null,c)}const g=s(e,[["render",r]]);export{u as __pageData,g as default};
