import{_ as s,c as a,o as n,e as l}from"./app.d0fac791.js";const C=JSON.parse('{"title":"cuMemFree is with implicit-synchronization","description":"Analysis on cuMemFree and PyTorch memory management","frontmatter":{"title":"cuMemFree is with implicit-synchronization","description":"Analysis on cuMemFree and PyTorch memory management","tags":["CUDA","PyTorch","GPU"]},"headers":[{"level":2,"title":"Behaviour differences between CUDA and ROCm","slug":"behaviour-differences-between-cuda-and-rocm","link":"#behaviour-differences-between-cuda-and-rocm","children":[]},{"level":2,"title":"PyTorch Allocator","slug":"pytorch-allocator","link":"#pytorch-allocator","children":[]},{"level":2,"title":"OOM is recoverable","slug":"oom-is-recoverable","link":"#oom-is-recoverable","children":[]}],"relativePath":"zh/blogs/20240513/index.md"}'),o={name:"zh/blogs/20240513/index.md"},p=l(`<nav class="table-of-contents"><ul><li><a href="#behaviour-differences-between-cuda-and-rocm">Behaviour differences between CUDA and ROCm</a></li><li><a href="#pytorch-allocator">PyTorch Allocator</a></li><li><a href="#oom-is-recoverable">OOM is recoverable</a></li></ul></nav><p>Recently I met a problem with <code>cuMemFree</code>, and finally found it is in fact <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#implicit-synchronization" target="_blank" rel="noreferrer">implicit-synchronization</a>. This is not documented in the above CUDA tutorial and <a href="https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM_1g89b3f154e17cc89b6eea277dbdf5c93a" target="_blank" rel="noreferrer">driver API</a>. But luckily, many discussions on <a href="https://stackoverflow.com/questions/12539593/is-cudafree-asynchronous" target="_blank" rel="noreferrer">StackOverflow</a> are related to it, which helps me a lot to identity the original problem.</p><h2 id="behaviour-differences-between-cuda-and-rocm" tabindex="-1">Behaviour differences between CUDA and ROCm <a class="header-anchor" href="#behaviour-differences-between-cuda-and-rocm" aria-hidden="true">#</a></h2><p>One interesting thing is that <code>cuMemFree</code> only block on the context where the device pointer allocated. In contrast, since ROCm is open-source, I found that <a href="https://github.com/ROCm/clr/blob/933aa1d3a7bc4e4a2b4cfb2ad7e4c40df0b8ae61/hipamd/src/hip_memory.cpp#L69" target="_blank" rel="noreferrer">it blocks all of contexts on the device</a>.</p><h2 id="pytorch-allocator" tabindex="-1">PyTorch Allocator <a class="header-anchor" href="#pytorch-allocator" aria-hidden="true">#</a></h2><p>The PyTorch experimental allocator implement this implicit-synchronization. Following snippet is taken from PyTorch 2.1, and it implements the deallocation with CUDA virtual address API.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// c10/cuda/CUDACachingAllocator.cpp</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unmapHandles</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">begin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">end</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // note: unlike cudaFree, MemUnmap and MemRelease do</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // not appear to synchronize in all cases, so we have to wait for the</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // stream to finish before this memory is truly free.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // cannot call c10::cuda::stream_synchronize because</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // it might grab the GIL which can lead to a deadlock</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // Locking order must be GIL -&gt; Allocator Lock</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">C10_CUDA_CHECK</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cudaStreamSynchronize</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stream_</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">auto</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">c10</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">irange</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">begin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> end</span><span style="color:#89DDFF;">))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      CUmemGenericAllocationHandle h </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handles_</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">at</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">handles_</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">at</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">c10</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">nullopt</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">C10_CUDA_DRIVER_CHECK</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DriverAPI</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">cuMemUnmap_</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">          ptr_ </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> segment_size_ </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> segment_size_</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">C10_CUDA_DRIVER_CHECK</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DriverAPI</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">cuMemRelease_</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">h</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">trimHandles</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="oom-is-recoverable" tabindex="-1">OOM is recoverable <a class="header-anchor" href="#oom-is-recoverable" aria-hidden="true">#</a></h2><p>I&#39;d like to share some another insight about PyTorch allocator, too. The <code>CUDA_ERROR_OUT_OF_MEMORY</code> is a recoverable error in PyTorch.</p><p>Refer to the <a href="https://PyTorch.org/docs/stable/notes/cuda.html#memory-management" target="_blank" rel="noreferrer">PyTorch document</a> if you are not familiar to this.</p><p><code>NativeCachingAllocator</code> initalize a single <code>DeviceCachingAllocator</code> on each device. <code>NativeCachingAllocator::allocate()</code> is the public memory allocation API. When the environment variable <code>PYTORCH_NO_CUDA_MEMORY_CACHING</code> is set to 1, <code>forceUncachedAllocator</code> will call <code>cudaMalloc</code> directly, or it will call <code>DeviceCachingAllocator::malloc</code> on the specific device, and allocate from the cached buffer.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// c10/cuda/CUDACachingAllocator.cpp</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">NativeCachingAllocator</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">public</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">CUDAAllocator</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#FFCB6B;">DataPtr</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">allocate</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">override</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> device </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">C10_CUDA_CHECK</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">c10</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">cuda</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">GetDevice</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F07178;">device</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> r </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">nullptr;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">forceUncachedAllocator</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // Deliberately don&#39;t use cudaMallocMaybeCapturing here, to force an error</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // if someone tries to use forceUncachedAllocator while capturing.</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">C10_CUDA_CHECK</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cudaMalloc</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F07178;">r</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">c10</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">impl</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">PyInterpreter</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> interp </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">c10</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">impl</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">GPUTrace</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get_trace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">C10_UNLIKELY</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">interp</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">interp</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">trace_gpu_memory_allocation</span><span style="color:#89DDFF;">(reinterpret_cast&lt;</span><span style="color:#C792EA;">uintptr_t</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F07178;">r</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">r</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> r</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">uncached_delete</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Device</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DeviceType</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">CUDA</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> device</span><span style="color:#89DDFF;">)};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">size </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">const_cast&lt;</span><span style="color:#F07178;">NativeCachingAllocator</span><span style="color:#89DDFF;">*&gt;(this)-&gt;</span><span style="color:#82AAFF;">malloc</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">r</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> device</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">cuda</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">getCurrentCUDAStream</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">device</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">r</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> r</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;">local_raw_delete</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Device</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DeviceType</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">CUDA</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> device</span><span style="color:#89DDFF;">)};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/** allocates a block which is safe to use from the provided stream */</span></span>
<span class="line"><span style="color:#C792EA;">void</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">malloc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void**</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">devPtr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">device</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">size</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">cudaStream_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">stream</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    Block</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> block </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">device_allocator</span><span style="color:#89DDFF;">[</span><span style="color:#F07178;">device</span><span style="color:#89DDFF;">]-&gt;</span><span style="color:#82AAFF;">malloc</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">device</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> stream</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">add_allocated_block</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">block</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">devPtr </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">ptr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">c10</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">impl</span><span style="color:#89DDFF;">::</span><span style="color:#F07178;">PyInterpreter</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> interp </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">c10</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">impl</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">GPUTrace</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get_trace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">C10_UNLIKELY</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">interp</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">interp</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#82AAFF;">trace_gpu_memory_allocation</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">reinterpret_cast&lt;</span><span style="color:#C792EA;">uintptr_t</span><span style="color:#89DDFF;">&gt;(*</span><span style="color:#F07178;">devPtr</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>The <code>DeviceCachingAllocator::malloc</code> will try to release some memory before re-allocate.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// c10/cuda/CUDACachingAllocator.cpp</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">DeviceCachingAllocator</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">Block</span><span style="color:#C792EA;">*</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">malloc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">device</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">size_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">orig_size</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">cudaStream_t</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">stream</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> block_found </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">get_free_block</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">trigger_free_memory_callbacks</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">get_free_block</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // cannot find free block, try to allocate</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#F07178;">block_found</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // free some blocks and re-allocate</span></span>
<span class="line"><span style="color:#F07178;">      block_found </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">alloc_block</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#F07178;"> context</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">release_available_cached_blocks</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#82AAFF;">alloc_block</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false,</span><span style="color:#F07178;"> context</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">C10_LIKELY</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">captures_underway </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#82AAFF;">release_cached_blocks</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">context</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#82AAFF;">alloc_block</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true,</span><span style="color:#F07178;"> context</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // report OOM events</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>The <code>DeviceCachingAllocator::alloc_block()</code> will be called in the following snippet. And if the error is <code>cudaErrorMemoryAllocation</code>，it will erase the inner error.</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// c10/cuda/CUDACachingAllocator.cpp</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">DeviceCachingAllocator</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">alloc_block</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">AllocParams</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">p</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">bool</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">isRetry</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">shared_ptr</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">GatheredContext</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C792EA;">&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">set_fraction </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">        total_allocated_memory </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> size </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> allowed_memory_maximum</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> cudaErrorMemoryAllocation</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">CachingAllocatorConfig</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">expandable_segments</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // our checkpointing logic for private pools doesn&#39;t support</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // the expandable_segments_ structure yet</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pool</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">owner_PrivatePool</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">block</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">try_allocate_expandable_block</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">device</span><span style="color:#89DDFF;">(),</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#89DDFF;">(),</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pool</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">(),</span><span style="color:#F07178;"> ctx</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> cudaSuccess</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> cudaErrorMemoryAllocation</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">bool</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">block</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">cudaMallocMaybeCapturing</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F07178;">ptr</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> size</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> cudaSuccess</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> cudaErrorMemoryAllocation</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          // erase the error</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">cudaGetLastError</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          // errors not related to OOM, throw it</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#82AAFF;">C10_CUDA_CHECK</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>The experimental allocator in PyTorch is based on CUDA virtual memory API. By set environment variable <code>PYTORCH_CUDA_ALLOC_CONF=expandable_segments</code>, <code>DeviceCachingAllocator::alloc_block()</code> will call the <code>CachingAllocatorConfig::expandable_segments()</code> path, <code>DeviceCachingAllocator::try_allocate_expandable_block</code> will call the <code>cuMemCreate</code> API.</p>`,17),e=[p];function c(t,r,F,y,D,i){return n(),a("div",null,e)}const d=s(o,[["render",c]]);export{C as __pageData,d as default};
