import{_ as s,c as n,o as a,e as l}from"./app.0f5a0ae1.js";const i=JSON.parse('{"title":"ollama 源码阅读","description":"推理服务器","frontmatter":{"title":"ollama 源码阅读","description":"推理服务器","tags":["LLM","AI","GPU","CUDA"]},"headers":[{"level":2,"title":"gpu/gpu.go","slug":"gpu-gpu-go","link":"#gpu-gpu-go","children":[]},{"level":2,"title":"server/routes.go","slug":"server-routes-go","link":"#server-routes-go","children":[]},{"level":2,"title":"server/sched.go","slug":"server-sched-go","link":"#server-sched-go","children":[]},{"level":2,"title":"initCudaHandles中寻找的符号","slug":"initcudahandles中寻找的符号","link":"#initcudahandles中寻找的符号","children":[]}],"relativePath":"zh/blogs/20240909/index.md"}'),o={name:"zh/blogs/20240909/index.md"},p=l(`<nav class="table-of-contents"><ul><li><a href="#gpu-gpu-go">gpu/gpu.go</a></li><li><a href="#server-routes-go">server/routes.go</a></li><li><a href="#server-sched-go">server/sched.go</a></li><li><a href="#initcudahandles中寻找的符号">initCudaHandles中寻找的符号</a></li></ul></nav><p>基于 <a href="https://github.com/ollama/ollama/tree/123a722a6f541e300bc8e34297ac378ebe23f527" target="_blank" rel="noreferrer">https://github.com/ollama/ollama/tree/123a722a6f541e300bc8e34297ac378ebe23f527</a></p><p>ollama 是一个通用的 llm 推理服务器，借助 llama.cpp 进行推理。 ollama 0.1.44 镜像内，将 llama.cpp 编写的推理服务器放到了 /tmp/ollama1917690259/runners/下，以 cuda 后端为例，为 /tmp/ollama1917690259/runners/cuda_v11/ollama_llama_server。 当我们调用 ollama serve后，只会启动一个 go 编写的 server；当我们执行 ollama run qwen:7b它会拉起 llama.cpp server，然后作为反向代理转发我们的请求给 lamma.cpp server。</p><h2 id="gpu-gpu-go" tabindex="-1">gpu/gpu.go <a class="header-anchor" href="#gpu-gpu-go" aria-hidden="true">#</a></h2><p>一开始看 ollama 的代码是碰到了问题，想看下 go server 侧为什么会调用到 cuda API。</p><p>GetGPUInfo()-&gt;initCudaHandles()这里会打开 <a href="http://libnvidia-ml.so" target="_blank" rel="noreferrer">libnvidia-ml.so</a>、<a href="http://libcuda.so" target="_blank" rel="noreferrer">libcuda.so</a>、<a href="http://libcudart.so" target="_blank" rel="noreferrer">libcudart.so</a>。 会去找这些库中的一些符号，go server 运行期间通过 cgo 调用他们。</p><h2 id="server-routes-go" tabindex="-1">server/routes.go <a class="header-anchor" href="#server-routes-go" aria-hidden="true">#</a></h2><p><code>func Serve(ln net.Listener)</code> 函数也就是调用 ollama serve时执行的函数，它在启动 go server 前会去调用上面提到的<code>GetGPUInfo()</code>获取 GPU 信息。</p><p>看下这个文件的其他内容</p><p><code>func (s *Server) GenerateRoutes()</code> 配置路由和对应的 handler。 以 <code>r.POST(&quot;/api/embeddings&quot;, s.EmbeddingsHandler)</code> 为例，<code>func (s *Server) EmbeddingsHandler(c *gin.Context)</code> 中解析请求参数，调用 <code>s.sched.GetRunner</code> 阻塞直到获取到 runner。 再调用 runner.llama.Embedding 获取 llama.cpp 中的模型服务，获取响应返回给用户。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Server</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EmbeddingsHandler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">gin</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> req api</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">EmbeddingRequest</span></span>
<span class="line"><span style="color:#A6ACCD;">    err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBindJSON</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    model</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetModel</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    opts</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">modelOptions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Options</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    rCh</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> eCh </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sched</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetRunner</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Context</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> model</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> opts</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">KeepAlive</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Duration</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> runner </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">runnerRef</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> runner </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;-</span><span style="color:#A6ACCD;">rCh</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;-</span><span style="color:#A6ACCD;">eCh</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">handleErrorResponse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    embedding</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> runner</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">llama</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Embedding</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Context</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Prompt</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    resp </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> api</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">EmbeddingResponse</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        Embedding</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> embedding</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">JSON</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">http</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StatusOK</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> resp</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="server-sched-go" tabindex="-1">server/sched.go <a class="header-anchor" href="#server-sched-go" aria-hidden="true">#</a></h2><p>除了直接调用 <code>GetGPUInfo()</code>，该函数还可能通过该文件下的 <code>Scheduler.getGpuFn</code> 函数指针调用，包含下面两个调用处</p><ul><li>func (s *Scheduler) processPending(ctx context.Context)</li><li>func (runner *runnerRef) waitForVRAMRecovery()</li></ul><p>看下这个文件的其他内容</p><p><code>runnerRef</code> 是调度的实体，对应请求中的 <code>req.model.ModelPath</code>，为这个模型启动 llama.cpp 服务器。</p><p><code>GetRunner</code>，把用户请求 req 写入了 <code>s.pendingReqCh</code>，如果失败了把错误写入到 <code>req.errCh</code>，没有失败的时候，会阻塞在 <code>req.successCh</code>。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Scheduler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetRunner</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> model </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> opts api</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Options</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sessionDuration time</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Duration</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(chan</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">runnerRef</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">chan</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    req </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">LlmRequest</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        ctx</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">             c</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        model</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">           model</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        opts</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">            opts</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        sessionDuration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> sessionDuration</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        successCh</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">(chan</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">runnerRef</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        errCh</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">           </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">(chan</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pendingReqCh </span><span style="color:#89DDFF;">&lt;-</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">errCh </span><span style="color:#89DDFF;">&lt;-</span><span style="color:#A6ACCD;"> ErrMaxQueue</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">successCh</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">errCh</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>Run</code> 函数会创建两个 go routine 去分别处理等待队列和完成队列，刚刚的 <code>s.pendingReqCh </code> 中的请求就是在 <code>processPending</code> 中处理的。任务成功后写回到 <code>req.successCh</code>。</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">s </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">Scheduler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">processPending</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">processCompleted</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>func (s *Scheduler) load(req *LlmRequest, ggml *llm.GGML, gpus gpu.GpuInfoList)</code> 调用 <code>Scheduler.newServerFn</code>，也就是 <code>llm/server.go</code> 中的 <code>NewLlamaServer</code> 创建 llama.cpp 服务；同时创建调度实体 <code>runnerRef</code>。</p><p><code>func (s *Scheduler) findRunnerToUnload()</code> 用来寻找一个最合适被关闭的 runnerRef，会先去看 runner.refCount 这个引用计数，看是否有空闲的 runnerRef，如果有就把它关闭；否则就给所有 runnerRef 按 runnerRef.sessionDuration 排序，返回马上要执行完成的 runner。</p><h2 id="initcudahandles中寻找的符号" tabindex="-1">initCudaHandles中寻找的符号 <a class="header-anchor" href="#initcudahandles中寻找的符号" aria-hidden="true">#</a></h2><ul><li>gpu/gpu_info_nvcuda.h：cuda_handle_t</li><li>gpu/gpu_info_cudart.h：cudart_handle_t</li><li>gpu/gpu_info_nvml.h：nvml_handle_t</li></ul>`,24),e=[p];function r(c,t,D,F,y,A){return a(),n("div",null,e)}const d=s(o,[["render",r]]);export{i as __pageData,d as default};
