import{_ as e,c as l,o as r,e as c}from"./app.0f5a0ae1.js";const _=JSON.parse('{"title":"HAMI 源码阅读","description":"第四范式开源的通用 GPU 虚拟化组件","frontmatter":{"title":"HAMI 源码阅读","description":"第四范式开源的通用 GPU 虚拟化组件","tags":["GPU","CUDA","虚拟化","k8s"]},"headers":[{"level":2,"title":"src/nvml","slug":"src-nvml","link":"#src-nvml","children":[{"level":3,"title":"hook.c","slug":"hook-c","link":"#hook-c","children":[]},{"level":3,"title":"nvml_entry.c","slug":"nvml-entry-c","link":"#nvml-entry-c","children":[]}]},{"level":2,"title":"src/multiprocess","slug":"src-multiprocess","link":"#src-multiprocess","children":[{"level":3,"title":"multiprocess_memory_limit.c","slug":"multiprocess-memory-limit-c","link":"#multiprocess-memory-limit-c","children":[]}]},{"level":2,"title":"src/allocator/allocator.c","slug":"src-allocator-allocator-c","link":"#src-allocator-allocator-c","children":[]},{"level":2,"title":"src/utils.c","slug":"src-utils-c","link":"#src-utils-c","children":[]},{"level":2,"title":"include","slug":"include","link":"#include","children":[{"level":3,"title":"libnvml_hook.h","slug":"libnvml-hook-h","link":"#libnvml-hook-h","children":[]},{"level":3,"title":"libcuda_hook.h","slug":"libcuda-hook-h","link":"#libcuda-hook-h","children":[]}]}],"relativePath":"zh/blogs/20241020/index.md"}'),a={name:"zh/blogs/20241020/index.md"},i=c('<nav class="table-of-contents"><ul><li><a href="#src-nvml">src/nvml</a><ul><li><a href="#hook-c">hook.c</a></li><li><a href="#nvml-entry-c">nvml_entry.c</a></li></ul></li><li><a href="#src-multiprocess">src/multiprocess</a><ul><li><a href="#multiprocess-memory-limit-c">multiprocess_memory_limit.c</a></li></ul></li><li><a href="#src-allocator-allocator-c">src/allocator/allocator.c</a></li><li><a href="#src-utils-c">src/utils.c</a></li><li><a href="#include">include</a><ul><li><a href="#libnvml-hook-h">libnvml_hook.h</a></li><li><a href="#libcuda-hook-h">libcuda_hook.h</a></li></ul></li></ul></nav><p>第四范式开源的通用 GPU 虚拟化组件，支持多家 GPU 产品，目前只做了切分功能，已进 CNCF。比较像之前腾讯开源的 <a href="https://github.com/tkestack/gpu-manager" target="_blank" rel="noreferrer">https://github.com/tkestack/gpu-manager</a></p><h1 id="hami-core" tabindex="-1">HAMi-core <a class="header-anchor" href="#hami-core" aria-hidden="true">#</a></h1><p><a href="https://github.com/Project-HAMi/HAMi-core" target="_blank" rel="noreferrer">https://github.com/Project-HAMi/HAMi-core</a> 基于主线 6b2aed490910db1a33c6575ba81b1ecd96fce5f4</p><h2 id="src-nvml" tabindex="-1">src/nvml <a class="header-anchor" href="#src-nvml" aria-hidden="true">#</a></h2><h3 id="hook-c" tabindex="-1">hook.c <a class="header-anchor" href="#hook-c" aria-hidden="true">#</a></h3><p>做了改动的一些 NVML API，查初始化的时候构造的真实函数指针表调用过去。最重要的就是 <code>_nvmlDeviceGetMemoryInfo</code> 这个实现。</p><p><code>_nvmlDeviceGetMemoryInfo</code> 里面</p><h3 id="nvml-entry-c" tabindex="-1">nvml_entry.c <a class="header-anchor" href="#nvml-entry-c" aria-hidden="true">#</a></h3><p>没有做改动直接调用下去的 NVML API。</p><h2 id="src-multiprocess" tabindex="-1">src/multiprocess <a class="header-anchor" href="#src-multiprocess" aria-hidden="true">#</a></h2><h3 id="multiprocess-memory-limit-c" tabindex="-1">multiprocess_memory_limit.c <a class="header-anchor" href="#multiprocess-memory-limit-c" aria-hidden="true">#</a></h3><h2 id="src-allocator-allocator-c" tabindex="-1">src/allocator/allocator.c <a class="header-anchor" href="#src-allocator-allocator-c" aria-hidden="true">#</a></h2><h2 id="src-utils-c" tabindex="-1">src/utils.c <a class="header-anchor" href="#src-utils-c" aria-hidden="true">#</a></h2><p>定义了一个跨进程的锁，<code>&quot;/tmp/vgpulock/lock”</code>，<code>O_EXCL</code> 地互斥地打开该文件作为锁。</p><h2 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-hidden="true">#</a></h2><h3 id="libnvml-hook-h" tabindex="-1">libnvml_hook.h <a class="header-anchor" href="#libnvml-hook-h" aria-hidden="true">#</a></h3><p>定义了宏如 NVML_OVERRIDE_CALL，和用于标识 NVML API 的枚举 NVML_OVERRIDE_ENUM_t。实现上不够简洁很多地方可以 #include 同一个 API 列表去做替换。也没看到生成这些头文件的相关脚本，后面升级更新 API 列表很麻烦。</p><h3 id="libcuda-hook-h" tabindex="-1">libcuda_hook.h <a class="header-anchor" href="#libcuda-hook-h" aria-hidden="true">#</a></h3><p>类似 libnvml_hook.h</p><h1 id="hami" tabindex="-1">HAMi <a class="header-anchor" href="#hami" aria-hidden="true">#</a></h1><p><a href="https://github.com/Project-HAMi/HAMi" target="_blank" rel="noreferrer">https://github.com/Project-HAMi/HAMi</a></p>',22),o=[i];function t(h,s,n,d,m,u){return r(),l("div",null,o)}const k=e(a,[["render",t]]);export{_ as __pageData,k as default};
